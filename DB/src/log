After get terminate:
53 tokens:
ASC: 35DELETE: 27+: 0DESC: 36ID: 15%: 4WHERE: 32-: 1CREATE: 24CHAR: 18NUMBER_CONSTANT: 14*: 2AND: 5/: 3): 47OR: 6==: 7SET: 37!=: 8VALUES: 23<: 9>: 10<=: 11UPDATE: 28>=: 12}: 51=: 13STR_LITERAL: 16DEFAULT: 38INT: 17VARCHAR: 19$: 20ORDERBY: 34NOT_NULL: 21SELECT: 29DISTINCT: 22DROP: 25]: 49INSERT: 26TABLE: 30FROM: 31PRIMARY_KEY: 39JOIN: 33,: 41REFERENCES: 40.: 42{: 50;: 43?: 44:: 45(: 46[: 48EXIT: 52---------------------------------------
token_type mode end: token_type: lexer::Token
get_type mode: name, content:
lexer::getType
Finish using part
The got names:
createTable: -1
fromClause: -16
createDefinition: -9
dropTable: -2
selectStatement: -3
insertStatement: -4
updateStatement: -5
createDefinitions: -8
deleteStatement: -6
columnConstraint: -11
tableName: -7
dataType: -10
insertElement: -12
updateElements: -13
updateElement: -14
selectElements: -15
orderByClause: -17
orderByExpression: -18
logicalOperator: -26
columnName: -19
expression: -20
predicate: -21
expressionAtom: -22
constantNum: -23
positiveNum: -24
comparisonOperator: -25
mathOperator: -27
Starts a new block
Starts a new block
Finish parsing, Results:
Productions:
pid <0>: $start$ := sqlStatement '$eof$' 
pid <1>: sqlStatement := ddlStatement 
pid <2>: sqlStatement := dmlStatement 
pid <3>: sqlStatement := 'EXIT' 
pid <4>: ddlStatement := createTable 
pid <5>: ddlStatement := dropTable 
pid <6>: dmlStatement := selectStatement 
pid <7>: dmlStatement := insertStatement 
pid <8>: dmlStatement := updateStatement 
pid <9>: dmlStatement := deleteStatement 
pid <10>: createTable := 'CREATE' 'TABLE' tableName createDefinitions 
pid <11>: dropTable := 'DROP' 'TABLE' tableName 
pid <12>: createDefinitions := '(' createDefinition $__ann_31 ')' 
pid <13>: createDefinitions := '(' createDefinition ')' 
pid <14>: $__ann_31 := $__ann_31 ',' createDefinition 
pid <15>: $__ann_31 := ',' createDefinition 
pid <16>: createDefinition := 'ID' dataType $__ann_32 
pid <17>: $__ann_32 := $__ann_32 columnConstraint 
pid <18>: $__ann_32 := columnConstraint 
pid <19>: dataType := 'INT' 
pid <20>: dataType := 'CHAR' '(' positiveNum ')' 
pid <21>: dataType := 'VARCHAR' '(' positiveNum ')' 
pid <22>: columnConstraint := 'NOT_NULL' 
pid <23>: columnConstraint := 'DEFAULT' expressionAtom 
pid <24>: columnConstraint := 'PRIMARY_KEY' 
pid <25>: columnConstraint := 'REFERENCES' tableName 
pid <26>: insertStatement := 'INSERT' tableName '(' 'ID' $__ann_33 ')' insertElements 
pid <27>: insertStatement := 'INSERT' tableName '(' 'ID' ')' insertElements 
pid <28>: insertStatement := 'INSERT' tableName insertElements 
pid <29>: $__ann_33 := $__ann_33 ',' 'ID' 
pid <30>: $__ann_33 := ',' 'ID' 
pid <31>: deleteStatement := 'DELETE' 'FROM' tableName 'WHERE' expression 
pid <32>: deleteStatement := 'DELETE' 'FROM' tableName 
pid <33>: updateStatement := 'UPDATE' tableName 'SET' updateElements 'WHERE' expression 
pid <34>: updateStatement := 'UPDATE' tableName 'SET' updateElements 
pid <35>: selectStatement := 'SELECT' selectElements fromClause 'WHERE' expression orderByClause 
pid <36>: selectStatement := 'SELECT' selectElements fromClause 'WHERE' expression 
pid <37>: selectStatement := 'SELECT' selectElements fromClause orderByClause 
pid <38>: selectStatement := 'SELECT' selectElements fromClause 
pid <39>: insertElements := 'VALUES' '(' expressionAtom $__ann_35 ')' 
pid <40>: insertElements := 'VALUES' '(' expressionAtom ')' 
pid <41>: $__ann_35 := $__ann_35 ',' expressionAtom 
pid <42>: $__ann_35 := ',' expressionAtom 
pid <43>: updateElements := updateElement $__ann_36 
pid <44>: updateElements := updateElement 
pid <45>: $__ann_36 := $__ann_36 ',' updateElement 
pid <46>: $__ann_36 := ',' updateElement 
pid <47>: updateElement := columnName '=' expressionAtom 
pid <48>: updateElement := columnName '=' 'DEFAULT' 
pid <49>: selectElements := '$' 
pid <50>: selectElements := expressionAtom $__ann_37 
pid <51>: selectElements := expressionAtom 
pid <52>: $__ann_37 := $__ann_37 ',' expressionAtom 
pid <53>: $__ann_37 := ',' expressionAtom 
pid <54>: orderByClause := 'ORDERBY' orderByExpression $__ann_38 
pid <55>: orderByClause := 'ORDERBY' orderByExpression 
pid <56>: $__ann_38 := $__ann_38 ',' orderByExpression 
pid <57>: $__ann_38 := ',' orderByExpression 
pid <58>: orderByExpression := expressionAtom 'ASC' 
pid <59>: orderByExpression := expressionAtom 'DESC' 
pid <60>: orderByExpression := expressionAtom 
pid <61>: fromClause := 'FROM' tableName $__ann_39 
pid <62>: fromClause := 'FROM' tableName 
pid <63>: $__ann_39 := $__ann_39 ',' tableName 
pid <64>: $__ann_39 := ',' tableName 
pid <65>: fromClause := 'FROM' tableName 'JOIN' tableName 
pid <66>: tableName := 'ID' 
pid <67>: columnName := 'ID' '.' 'ID' 
pid <68>: columnName := 'ID' 
pid <69>: expression := expression logicalOperator expression 
pid <70>: expression := predicate 
pid <71>: predicate := expressionAtom comparisonOperator expressionAtom 
pid <72>: predicate := expressionAtom 
pid <73>: expressionAtom := constantNum 
pid <74>: expressionAtom := 'STR_LITERAL' 
pid <75>: expressionAtom := columnName 
pid <76>: expressionAtom := expressionAtom mathOperator expressionAtom 
pid <77>: constantNum := '-' positiveNum 
pid <78>: constantNum := positiveNum 
pid <79>: positiveNum := 'NUMBER_CONSTANT' 
pid <80>: comparisonOperator := '==' 
pid <81>: comparisonOperator := '>' 
pid <82>: comparisonOperator := '<' 
pid <83>: comparisonOperator := '<=' 
pid <84>: comparisonOperator := '>=' 
pid <85>: comparisonOperator := '!=' 
pid <86>: logicalOperator := 'AND' 
pid <87>: logicalOperator := 'OR' 
pid <88>: mathOperator := '*' 
pid <89>: mathOperator := '/' 
pid <90>: mathOperator := '%' 
pid <91>: mathOperator := '+' 
pid <92>: mathOperator := '-' 
names:
-40: $start$
-39: $__ann_39
-38: $__ann_38
-37: $__ann_37
-36: $__ann_36
-35: $__ann_35
-34: insertElements
-33: $__ann_33
-32: $__ann_32
-31: $__ann_31
-30: dmlStatement
-29: ddlStatement
-28: sqlStatement
-27: mathOperator
-26: logicalOperator
-25: comparisonOperator
-24: positiveNum
-23: constantNum
-22: expressionAtom
-21: predicate
-20: expression
-19: columnName
-18: orderByExpression
-17: orderByClause
-16: fromClause
-15: selectElements
-14: updateElement
-13: updateElements
-12: insertElement
-11: columnConstraint
-10: dataType
-9: createDefinition
-8: createDefinitions
-7: tableName
-6: deleteStatement
-5: updateStatement
-4: insertStatement
-3: selectStatement
-2: dropTable
-1: createTable
0: +
1: -
2: *
3: /
4: %
5: AND
6: OR
7: ==
8: !=
9: <
10: >
11: <=
12: >=
13: =
14: NUMBER_CONSTANT
15: ID
16: STR_LITERAL
17: INT
18: CHAR
19: VARCHAR
20: $
21: NOT_NULL
22: DISTINCT
23: VALUES
24: CREATE
25: DROP
26: INSERT
27: DELETE
28: UPDATE
29: SELECT
30: TABLE
31: FROM
32: WHERE
33: JOIN
34: ORDERBY
35: ASC
36: DESC
37: SET
38: DEFAULT
39: PRIMARY_KEY
40: REFERENCES
41: ,
42: .
43: ;
44: ?
45: :
46: (
47: )
48: [
49: ]
50: {
51: }
52: EXIT
53: $eof$
Other infomation:
min_with_cpp: -27
Finish first analysis, Result:
Left Map: 
$start$: 
pid <0>: 
$start$ := sqlStatement '$eof$' 

$__ann_39: 
pid <64>: 
$__ann_39 := ',' tableName 
pid <63>: 
$__ann_39 := $__ann_39 ',' tableName 

$__ann_38: 
pid <57>: 
$__ann_38 := ',' orderByExpression 
pid <56>: 
$__ann_38 := $__ann_38 ',' orderByExpression 

$__ann_37: 
pid <53>: 
$__ann_37 := ',' expressionAtom 
pid <52>: 
$__ann_37 := $__ann_37 ',' expressionAtom 

$__ann_36: 
pid <46>: 
$__ann_36 := ',' updateElement 
pid <45>: 
$__ann_36 := $__ann_36 ',' updateElement 

$__ann_35: 
pid <42>: 
$__ann_35 := ',' expressionAtom 
pid <41>: 
$__ann_35 := $__ann_35 ',' expressionAtom 

insertElements: 
pid <40>: 
insertElements := 'VALUES' '(' expressionAtom ')' 
pid <39>: 
insertElements := 'VALUES' '(' expressionAtom $__ann_35 ')' 

$__ann_33: 
pid <30>: 
$__ann_33 := ',' 'ID' 
pid <29>: 
$__ann_33 := $__ann_33 ',' 'ID' 

$__ann_32: 
pid <18>: 
$__ann_32 := columnConstraint 
pid <17>: 
$__ann_32 := $__ann_32 columnConstraint 

$__ann_31: 
pid <15>: 
$__ann_31 := ',' createDefinition 
pid <14>: 
$__ann_31 := $__ann_31 ',' createDefinition 

dmlStatement: 
pid <9>: 
dmlStatement := deleteStatement 
pid <8>: 
dmlStatement := updateStatement 
pid <7>: 
dmlStatement := insertStatement 
pid <6>: 
dmlStatement := selectStatement 

ddlStatement: 
pid <5>: 
ddlStatement := dropTable 
pid <4>: 
ddlStatement := createTable 

sqlStatement: 
pid <3>: 
sqlStatement := 'EXIT' 
pid <2>: 
sqlStatement := dmlStatement 
pid <1>: 
sqlStatement := ddlStatement 

mathOperator: 
pid <92>: 
mathOperator := '-' 
pid <91>: 
mathOperator := '+' 
pid <90>: 
mathOperator := '%' 
pid <89>: 
mathOperator := '/' 
pid <88>: 
mathOperator := '*' 

logicalOperator: 
pid <87>: 
logicalOperator := 'OR' 
pid <86>: 
logicalOperator := 'AND' 

comparisonOperator: 
pid <85>: 
comparisonOperator := '!=' 
pid <84>: 
comparisonOperator := '>=' 
pid <83>: 
comparisonOperator := '<=' 
pid <82>: 
comparisonOperator := '<' 
pid <81>: 
comparisonOperator := '>' 
pid <80>: 
comparisonOperator := '==' 

positiveNum: 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 

constantNum: 
pid <78>: 
constantNum := positiveNum 
pid <77>: 
constantNum := '-' positiveNum 

expressionAtom: 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
pid <75>: 
expressionAtom := columnName 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
pid <73>: 
expressionAtom := constantNum 

predicate: 
pid <72>: 
predicate := expressionAtom 
pid <71>: 
predicate := expressionAtom comparisonOperator expressionAtom 

expression: 
pid <70>: 
expression := predicate 
pid <69>: 
expression := expression logicalOperator expression 

columnName: 
pid <68>: 
columnName := 'ID' 
pid <67>: 
columnName := 'ID' '.' 'ID' 

orderByExpression: 
pid <60>: 
orderByExpression := expressionAtom 
pid <59>: 
orderByExpression := expressionAtom 'DESC' 
pid <58>: 
orderByExpression := expressionAtom 'ASC' 

orderByClause: 
pid <55>: 
orderByClause := 'ORDERBY' orderByExpression 
pid <54>: 
orderByClause := 'ORDERBY' orderByExpression $__ann_38 

fromClause: 
pid <65>: 
fromClause := 'FROM' tableName 'JOIN' tableName 
pid <62>: 
fromClause := 'FROM' tableName 
pid <61>: 
fromClause := 'FROM' tableName $__ann_39 

selectElements: 
pid <51>: 
selectElements := expressionAtom 
pid <50>: 
selectElements := expressionAtom $__ann_37 
pid <49>: 
selectElements := '$' 

updateElement: 
pid <48>: 
updateElement := columnName '=' 'DEFAULT' 
pid <47>: 
updateElement := columnName '=' expressionAtom 

updateElements: 
pid <44>: 
updateElements := updateElement 
pid <43>: 
updateElements := updateElement $__ann_36 

insertElement: 

columnConstraint: 
pid <25>: 
columnConstraint := 'REFERENCES' tableName 
pid <24>: 
columnConstraint := 'PRIMARY_KEY' 
pid <23>: 
columnConstraint := 'DEFAULT' expressionAtom 
pid <22>: 
columnConstraint := 'NOT_NULL' 

dataType: 
pid <21>: 
dataType := 'VARCHAR' '(' positiveNum ')' 
pid <20>: 
dataType := 'CHAR' '(' positiveNum ')' 
pid <19>: 
dataType := 'INT' 

createDefinition: 
pid <16>: 
createDefinition := 'ID' dataType $__ann_32 

createDefinitions: 
pid <13>: 
createDefinitions := '(' createDefinition ')' 
pid <12>: 
createDefinitions := '(' createDefinition $__ann_31 ')' 

tableName: 
pid <66>: 
tableName := 'ID' 

deleteStatement: 
pid <32>: 
deleteStatement := 'DELETE' 'FROM' tableName 
pid <31>: 
deleteStatement := 'DELETE' 'FROM' tableName 'WHERE' expression 

updateStatement: 
pid <34>: 
updateStatement := 'UPDATE' tableName 'SET' updateElements 
pid <33>: 
updateStatement := 'UPDATE' tableName 'SET' updateElements 'WHERE' expression 

insertStatement: 
pid <28>: 
insertStatement := 'INSERT' tableName insertElements 
pid <27>: 
insertStatement := 'INSERT' tableName '(' 'ID' ')' insertElements 
pid <26>: 
insertStatement := 'INSERT' tableName '(' 'ID' $__ann_33 ')' insertElements 

selectStatement: 
pid <38>: 
selectStatement := 'SELECT' selectElements fromClause 
pid <37>: 
selectStatement := 'SELECT' selectElements fromClause orderByClause 
pid <36>: 
selectStatement := 'SELECT' selectElements fromClause 'WHERE' expression 
pid <35>: 
selectStatement := 'SELECT' selectElements fromClause 'WHERE' expression orderByClause 

dropTable: 
pid <11>: 
dropTable := 'DROP' 'TABLE' tableName 

createTable: 
pid <10>: 
createTable := 'CREATE' 'TABLE' tableName createDefinitions 

First Map:
$start$: 
UPDATE, EXIT, CREATE, DROP, SELECT, INSERT, DELETE, 
$__ann_39: 
,, 
$__ann_38: 
,, 
$__ann_37: 
,, 
$__ann_36: 
,, 
$__ann_35: 
,, 
insertElements: 
VALUES, 
$__ann_33: 
,, 
$__ann_32: 
NOT_NULL, DEFAULT, PRIMARY_KEY, REFERENCES, 
$__ann_31: 
,, 
dmlStatement: 
SELECT, INSERT, UPDATE, DELETE, 
ddlStatement: 
CREATE, DROP, 
sqlStatement: 
UPDATE, EXIT, CREATE, DROP, SELECT, INSERT, DELETE, 
mathOperator: 
*, /, %, +, -, 
logicalOperator: 
AND, OR, 
comparisonOperator: 
==, >, <, <=, >=, !=, 
positiveNum: 
NUMBER_CONSTANT, 
constantNum: 
-, NUMBER_CONSTANT, 
expressionAtom: 
STR_LITERAL, ID, -, NUMBER_CONSTANT, 
predicate: 
STR_LITERAL, ID, -, NUMBER_CONSTANT, 
expression: 
STR_LITERAL, ID, -, NUMBER_CONSTANT, 
columnName: 
ID, 
orderByExpression: 
STR_LITERAL, ID, -, NUMBER_CONSTANT, 
orderByClause: 
ORDERBY, 
fromClause: 
FROM, 
selectElements: 
$, STR_LITERAL, ID, -, NUMBER_CONSTANT, 
updateElement: 
ID, 
updateElements: 
ID, 
insertElement: 

columnConstraint: 
NOT_NULL, DEFAULT, PRIMARY_KEY, REFERENCES, 
dataType: 
INT, CHAR, VARCHAR, 
createDefinition: 
ID, 
createDefinitions: 
(, 
tableName: 
ID, 
deleteStatement: 
DELETE, 
updateStatement: 
UPDATE, 
insertStatement: 
INSERT, 
selectStatement: 
SELECT, 
dropTable: 
DROP, 
createTable: 
CREATE, 
From Condition <0> get package:
$start$ := (^)sqlStatement '$eof$' , { }
-------------------------------------------------------------------------------

After tracing, got package:
dmlStatement := (^)updateStatement , { $eof$, }
insertStatement := (^)'INSERT' tableName '(' 'ID' $__ann_33 ')' insertElements , { $eof$, }
createTable := (^)'CREATE' 'TABLE' tableName createDefinitions , { $eof$, }
selectStatement := (^)'SELECT' selectElements fromClause 'WHERE' expression , { $eof$, }
ddlStatement := (^)createTable , { $eof$, }
updateStatement := (^)'UPDATE' tableName 'SET' updateElements , { $eof$, }
sqlStatement := (^)dmlStatement , { $eof$, }
deleteStatement := (^)'DELETE' 'FROM' tableName , { $eof$, }
$start$ := (^)sqlStatement '$eof$' , { }
dmlStatement := (^)deleteStatement , { $eof$, }
selectStatement := (^)'SELECT' selectElements fromClause orderByClause , { $eof$, }
ddlStatement := (^)dropTable , { $eof$, }
updateStatement := (^)'UPDATE' tableName 'SET' updateElements 'WHERE' expression , { $eof$, }
sqlStatement := (^)ddlStatement , { $eof$, }
selectStatement := (^)'SELECT' selectElements fromClause 'WHERE' expression orderByClause , { $eof$, }
sqlStatement := (^)'EXIT' , { $eof$, }
dmlStatement := (^)insertStatement , { $eof$, }
selectStatement := (^)'SELECT' selectElements fromClause , { $eof$, }
dmlStatement := (^)selectStatement , { $eof$, }
deleteStatement := (^)'DELETE' 'FROM' tableName 'WHERE' expression , { $eof$, }
insertStatement := (^)'INSERT' tableName '(' 'ID' ')' insertElements , { $eof$, }
dropTable := (^)'DROP' 'TABLE' tableName , { $eof$, }
insertStatement := (^)'INSERT' tableName insertElements , { $eof$, }
===============================================================================

SHIFT <0> by '+' to <1>
From Condition <1> get package:
dmlStatement := updateStatement (^), { $eof$, }
-------------------------------------------------------------------------------

After tracing, got package:
dmlStatement := updateStatement (^), { $eof$, }
===============================================================================

From Condition <1> get package:
insertStatement := 'INSERT' (^)tableName insertElements , { $eof$, }
SHIFT <insertStatement1 > by := updateStatement to <2'INSERT'>. 
(^)tableName '(' 'ID' $__ann_33 ')' insertElements , { $eof$, }
insertStatement := 'INSERT' (^)tableName '(' 'ID' Condition<2')'>, REDUCE Production by ' $eof$': insertElements
 pid <8, { >: 
$eof$, dmlStatement} := 
updateStatement------------------------------------------------------------------------------- 


After tracing, got package:
tableName := (^)'ID' , { VALUES, (, }
insertStatement := 'INSERT' (^)tableName insertElements , { $eof$, }
insertStatement := 'INSERT' (^)tableName '(' 'ID' $__ann_33 ')' insertElements , { $eof$, }
insertStatement := 'INSERT' (^)tableName '(' 'ID' ')' insertElements , { $eof$, }
===============================================================================

SHIFT <1> by 'INSERT' to <3>
From Condition <3> get package:
tableName := 'ID' (^), { VALUES, (, }
-------------------------------------------------------------------------------

After tracing, got package:
tableName := 'ID' (^), { VALUES, (, }
===============================================================================

From Condition <3> get package:
insertStatement := 'INSERT' tableName (^)'(' 'ID' $__ann_33 ')' insertElements , { $eof$, }SHIFT <
3insertStatement> by ' ID:= ' to <4'INSERT'> 
tableName (^)insertElements , { $eof$, }
insertStatement := 'INSERT' Condition<tableName4 >, REDUCE Production by '(^)VALUES'('':  
'ID'pid < 66')'>: 
 tableName insertElements:=  'ID', {  $eof$
, }Condition<4
>, REDUCE Production by '(-------------------------------------------------------------------------------': 


pid <66>: 
tableName := 'ID' 
After tracing, got package:
insertElements := (^)'VALUES' '(' expressionAtom ')' , { $eof$, }
insertStatement := 'INSERT' tableName (^)'(' 'ID' $__ann_33 ')' insertElements , { $eof$, }
insertStatement := 'INSERT' tableName (^)insertElements , { $eof$, }
insertElements := (^)'VALUES' '(' expressionAtom $__ann_35 ')' , { $eof$, }
insertStatement := 'INSERT' tableName (^)'(' 'ID' ')' insertElements , { $eof$, }
===============================================================================

SHIFT <3> by tableName to <5>.
From Condition <5> get package:
insertElements := 'VALUES' (^)'(' expressionAtom ')' , { $eof$, }
insertElements := 'VALUES' (^)'(' expressionAtom $__ann_35 ')' , { $eof$, }
-------------------------------------------------------------------------------

After tracing, got package:
insertElements := 'VALUES' (^)'(' expressionAtom ')' , { $eof$, }
insertElements := 'VALUES' (^)'(' expressionAtom $__ann_35 ')' , { $eof$, }
From Condition <===============================================================================
5
> get package:
insertStatement := 'INSERT' tableName '(' (^)'ID' $__ann_33 ')' insertElements , { $eof$, }
insertStatement := 'INSERT' tableName '(' (^)'ID' ')' insertElements , { $eof$, }
-------------------------------------------------------------------------------

After tracing, got package:
insertStatement := 'INSERT' tableName '(' (^)'ID' $__ann_33 ')' insertElements , { $eof$, }
insertStatement := 'INSERT' tableName '(' (^)'ID' ')' insertElements , { $eof$, }
===============================================================================

SHIFT <5> by 'VALUES' to <6>
SHIFT <5> by '(' to <7>
From Condition <6> get package:
insertElements := 'VALUES' '(' (^)expressionAtom ')' , { $eof$, }
insertElements := 'VALUES' '(' (^)expressionAtom $__ann_35 ')' , { $eof$, }
-------------------------------------------------------------------------------

From Condition <7> get package:
insertStatement := 'INSERT' tableName '(' 'ID' (^)$__ann_33 ')' insertElements , { $eof$, }
insertStatement := 'INSERT' tableName '(' 'ID' (^)')' insertElements , { $eof$, }
-------------------------------------------------------------------------------

After tracing, got package:
$__ann_33 := (^)',' 'ID' , { ), ,, }
insertStatement := 'INSERT' tableName '(' 'ID' (^)$__ann_33 ')' insertElements , { $eof$, }
$__ann_33 := (^)$__ann_33 ',' 'ID' , { ), ,, }
insertStatement := 'INSERT' tableName '(' 'ID' (^)')' insertElements , { $eof$, }
===============================================================================

SHIFT <7> by 'ID' to <8>
From Condition <8> get package:
$__ann_33 := ',' (^)'ID' , { ), ,, }
-------------------------------------------------------------------------------

After tracing, got package:
$__ann_33 := ',' (^)'ID' , { ), ,, }
===============================================================================

SHIFT <8> by ',' to <9>
From Condition <9> get package:
$__ann_33 := ',' 'ID' (^), { ), ,, }
-------------------------------------------------------------------------------

After tracing, got package:
$__ann_33 := ',' 'ID' (^), { ), ,, }
===============================================================================

SHIFT <9> by 'ID' to <10>
Condition<10>, REDUCE Production by ')': 
pid <30>: 
$__ann_33 := ',' 'ID' 
Condition<10>, REDUCE Production by ',': 
pid <30>: 
$__ann_33 := ',' 'ID' 
From Condition <8> get package:
insertStatement := 'INSERT' tableName '(' 'ID' $__ann_33 (^)')' insertElements , { $eof$, }
$__ann_33 := $__ann_33 (^)',' 'ID' , { ), ,, }
-------------------------------------------------------------------------------

After tracing, got package:
insertStatement := 'INSERT' tableName '(' 'ID' $__ann_33 (^)')' insertElements , { $eof$, }
$__ann_33 := $__ann_33 (^)',' 'ID' , { ), ,, }
===============================================================================

SHIFT <8> by $__ann_33 to <11After tracing, got package:>.

columnName := (^)'ID' , { ), ,, -, *, /, %, +, }
constantNum := (^)positiveNum , { ), ,, -, *, /, %, +, }
expressionAtom := (^)'STR_LITERAL' , { ), -, ,, *, /, %, +, }
expressionAtom := (^)expressionAtom mathOperator expressionAtom , { ), -, ,, *, /, %, +, }
insertElements := 'VALUES' From Condition <'(' (^)expressionAtom11 > get package:')'
 , { $eof$insertStatement,  }:= 
'INSERT'constantNum  := tableName (^)'-''('  positiveNum 'ID' , { $__ann_33) , ,')',  -, (^)*insertElements,  /, %, { , +$eof$, , }}

expressionAtom------------------------------------------------------------------------------- 
:= 
(^)constantNum , { ), -, ,, *, /, %, +, }
expressionAtom := (^)columnName , { ), -, ,, *, /, %, +, }
insertElements := 'VALUES' '(' (^)expressionAtom $__ann_35 ')' , { $eof$, }
columnName := (^)'ID' '.' 'ID' , { ), ,, -, *, /, %, +, }
positiveNum := (^)'NUMBER_CONSTANT'After tracing, got package: 
, { insertElements) , := -, ,(^), *'VALUES',  /, '('% , +expressionAtom,  }
')'=============================================================================== 
, { 
$eof$, }
insertStatement := 'INSERT' tableName '(' 'ID' $__ann_33 ')' (^)insertElements , { $eof$, }
insertElements := (^)'VALUES' '(' expressionAtom $__ann_35 ')' , { $eof$, }
===============================================================================

SHIFT <6> by '(' to <12>
From Condition <SHIFT <1211> get package:> by ')
' to <13columnName> 
:= 'ID' (^), { ), ,, -, *, /, %, +, }
columnName := 'ID' (^)'.' 'ID' , { ), ,, -, *, /, %, +, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID' (^), { ), ,, -, *, /, %, +, }
columnName := 'ID' (^)'.' 'ID' , { ), ,, -, *, /, %, +, }
===============================================================================
From Condition <
13> get package:
insertElements := 'VALUES' (^)'(' expressionAtom ')' , { $eof$, }
insertElements := 'VALUES' (^)'(' expressionAtom $__ann_35 ')' , { $eof$, }
-------------------------------------------------------------------------------

After tracing, got package:
insertElements := 'VALUES' (^)'(' expressionAtom ')' , { $eof$, }
insertElements := 'VALUES' (^)'(' expressionAtom $__ann_35 ')' , { $eof$, }
===============================================================================

SHIFT <12> by 'ID' to <14>
Condition<14>, REDUCE Production by ')': 
pid <68>: 
columnName := 'ID' 
Condition<14>, REDUCE Production by ',': 
pid <68>: 
columnName := 'ID' 
Condition<14SHIFT <>, REDUCE Production by '13-> by '': VALUES
' to <pid <668>>: 

columnNameThis condition already existed. 
:= 'ID' 
Condition<14>, REDUCE Production by '*': 
pid <68>: 
columnName := 'ID' 
Condition<14>, REDUCE Production by '/': 
pid <68>: 
columnName := 'ID' 
Condition<14>, REDUCE Production by '%': 
pid <68>: 
columnName := 'ID' 
Condition<14>, REDUCE Production by '+': 
pid <68>: 
columnName := 'ID' 
From Condition <13> get package:
insertStatement := 'INSERT' tableName '(' 'ID' $__ann_33 ')' insertElements (^), { $eof$, }
-------------------------------------------------------------------------------

After tracing, got package:
insertStatement := 'INSERT' tableName '(' 'ID' $__ann_33 ')' insertElements (^), { $eof$, }
===============================================================================
From Condition <
14> get package:
columnName := 'ID' '.' (^)'ID' , { ), ,, -, *, /, %, +, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID' '.' (^)'ID' , { ), ,, -, *, /, %, +, }
===============================================================================

SHIFT <13> by insertElements to <15>.
Condition<15>, REDUCE Production by '$eof$': 
pid <26>: 
insertStatement := 'INSERT' tableName '(' 'ID' $__ann_33 ')' insertElements 
SHIFT <14> by '.' to <16>
From Condition <11From Condition <> get package:
16> get package:
$__ann_33 := columnName$__ann_33  := ',' 'ID'(^) 'ID' '.' , { 'ID') , ,(^), , { }
)-------------------------------------------------------------------------------, 
,
, -, After tracing, got package:*, 
/, $__ann_33% , := +, }$__ann_33 
','------------------------------------------------------------------------------- 
(^)
'ID' After tracing, got package:
, { columnName ):= , ,, 'ID'} 
'.'=============================================================================== 
'ID'
 (^), { ), ,, -, *, /, %, +, }
===============================================================================

SHIFT <11> by ',' to <17>
From Condition <17> get package:SHIFT <
16$__ann_33> by ' ID:= ' to <18$__ann_33> 
',' 'ID' (^), { ), ,, }
-------------------------------------------------------------------------------
Condition<18
>, REDUCE Production by ')': After tracing, got package:

pid <$__ann_3367 >: 
:= columnName := $__ann_33 'ID'','  '.' 'ID''ID'  
(^), { Condition<18)>, REDUCE Production by ', ,,': , 
}pid <67
>: 
===============================================================================columnName
 
:= 'ID' '.' 'ID' 
Condition<18>, REDUCE Production by '-': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<18>, REDUCE Production by '*': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<18>, REDUCE Production by '/': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
SHIFT <Condition<1718> by '>, REDUCE Production by 'ID%' to <': 19
>pid <67
>: 
columnName := 'ID' '.' 'ID' 
Condition<18>, REDUCE Production by '+': Condition<
19>, REDUCE Production by 'pid <)67': >: 

columnName := pid <29'ID'>: 
 $__ann_33'.'  := 'ID'$__ann_33  
',' 'ID' 
Condition<19>, REDUCE Production by ',': 
pid <29>: 
$__ann_33 := $__ann_33 ',' 'ID' 
From Condition <12> get package:
constantNum := positiveNum (^), { ), ,, -, *, /, %, +, }
From Condition <-------------------------------------------------------------------------------
8
> get package:
After tracing, got package:
insertStatementconstantNum  := := positiveNum 'INSERT'(^) , { tableName) , ,'(',  -, 'ID'* , /')',  %, (^)+insertElements,  }
, { ===============================================================================
$eof$
, }
-------------------------------------------------------------------------------

After tracing, got package:
insertElements := (^)'VALUES' '(' SHIFT <expressionAtom12 > by positiveNum$__ann_35 to < 20')'>. 
, { $eof$, }
insertStatement := 'INSERT' tableName '(' 'ID'Condition<20 >, REDUCE Production by ')')'':  
(^)pid <78insertElements>: 
 constantNum , { := $eof$positiveNum,  }

Condition<insertElements20 >, REDUCE Production by ':= ,': (^)
'VALUES'pid <78 >: 
constantNum'('  := expressionAtompositiveNum  
')' Condition<20, { >, REDUCE Production by '-$eof$': , 
}pid <78
>: 
===============================================================================constantNum 
:= 
positiveNum 
Condition<20>, REDUCE Production by '*': 
pid <78>: 
constantNum := positiveNum 
Condition<20>, REDUCE Production by '/': 
pid <78>: 
constantNum := positiveNum 
Condition<20>, REDUCE Production by '%': 
pid <78>: 
constantNum := positiveNum 
Condition<20>, REDUCE Production by '+': 
pid <78>: 
constantNum := positiveNum 
SHIFT <8> by ')' to <21>
From Condition <12> get package:
expressionAtom := 'STR_LITERAL' (^), { ), -, ,, *, /, %, +, }
From Condition <-------------------------------------------------------------------------------
21
> get package:
After tracing, got package:
insertElementsexpressionAtom  := := 'VALUES''STR_LITERAL'  (^)(^)'(', {  ), expressionAtom- , ,$__ann_35,  *, ')'/ , %, , { +, }$eof$
, ===============================================================================}


insertElements := 'VALUES' (^)'(' expressionAtom ')' , { $eof$, }
-------------------------------------------------------------------------------

After tracing, got package:
insertElements := 'VALUES' (^)'(' expressionAtom $__ann_35 ')' , { $eof$, }
insertElements := 'VALUES' (^)'(' expressionAtom ')' , { $eof$, }
===============================================================================

SHIFT <12> by 'STR_LITERAL' to <22>
Condition<22>, REDUCE Production by ')': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<22>, REDUCE Production by '-': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<22>, REDUCE Production by ',': 
SHIFT <pid <2174> by '>: 
VALUESexpressionAtom' to < 6:= >
'STR_LITERAL'This condition already existed. 

Condition<22>, REDUCE Production by '*': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<22>, REDUCE Production by '/': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<22>, REDUCE Production by '%': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<22>, REDUCE Production by '+': 
pid <74>: 
expressionAtom := 'STR_LITERAL'From Condition < 
21> get package:
insertStatement := 'INSERT' tableName '(' 'ID' ')' insertElements (^), { $eof$, }
-------------------------------------------------------------------------------

After tracing, got package:
insertStatement := 'INSERT' tableName '(' 'ID' ')' insertElements (^), { $eof$, }
===============================================================================

SHIFT <21From Condition <> by insertElements to <2312>.> get package:

insertElements := 'VALUES' '(' expressionAtom (^)')' , { $eof$, }
expressionAtom Condition<:= 23expressionAtom>, REDUCE Production by ' $eof$': (^)
mathOperator pid <27expressionAtom>: 
 insertStatement , { := ), 'INSERT'- , tableName, , '('* , 'ID'/ , ')'% , insertElements+ , 
}
insertElements := 'VALUES' '(' expressionAtom (^)$__ann_35 ')' , { $eof$, }
-------------------------------------------------------------------------------

From Condition <5> get package:
insertStatement := 'INSERT' tableName insertElements (^), { $eof$, }
-------------------------------------------------------------------------------

After tracing, got package:
insertStatement := 'INSERT' tableName insertElements (^), { $eof$, }
===============================================================================

SHIFT <5> by insertElements to <24>.
Condition<24>, REDUCE Production by '$eof$': 
pid <28>: 
insertStatement := 'INSERT' tableName insertElements 
After tracing, got package:
mathOperator := (^)'%' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
$__ann_35 := (^)',' expressionAtom , { ), ,, }
insertElements := 'VALUES' '(' expressionAtom (^)')' , { $eof$, }
mathOperator := (^)'*' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
expressionAtom := expressionAtom (^)mathOperator expressionAtom , { ), -, ,, *, /, %, +, }
mathOperator := (^)'-' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
$__ann_35 := (^)$__ann_35 ',' expressionAtom , { ), ,, }
mathOperator := (^)'/' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'+' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
insertElements := 'VALUES' '(' expressionAtom (^)$__ann_35 ')' , { $eof$, }
===============================================================================

SHIFT <12> by expressionAtom to <25>.
From Condition <25> get package:
mathOperator := '%' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '%' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <25> by '%' to <26>
Condition<26>, REDUCE Production by 'STR_LITERAL': 
pid <90>: 
mathOperator := '%' 
Condition<26>, REDUCE Production by 'ID': 
pid <90>: 
mathOperator := '%' 
Condition<26>, REDUCE Production by '-': 
pid <90>: 
mathOperator := '%' 
Condition<26>, REDUCE Production by 'NUMBER_CONSTANT': 
pid <90>: 
mathOperator := '%' 
From Condition <25> get package:
$__ann_35 := ',' (^)expressionAtom , { ), ,, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := (^)'ID' , { ), -, ,, *, /, %, +, }
constantNum := (^)positiveNum , { ), -, ,, *, /, %, +, }
$__ann_35 := ',' (^)expressionAtom , { ), ,, }
expressionAtom := (^)'STR_LITERAL' , { ), -, ,, *, /, %, +, }
expressionAtom := (^)expressionAtom mathOperator expressionAtom , { ), -, ,, *, /, %, +, }
columnName := (^)'ID' '.' 'ID' , { ), -, ,, *, /, %, +, }
constantNum := (^)'-' positiveNum , { ), -, ,, *, /, %, +, }
expressionAtom := (^)constantNum , { ), -, ,, *, /, %, +, }
expressionAtom := (^)columnName , { ), -, ,, *, /, %, +, }
positiveNum := (^)'NUMBER_CONSTANT' , { ), -, ,, *, /, %, +, }
===============================================================================

SHIFT <25> by ',' to <27>
From Condition <27> get package:
columnName := 'ID' (^), { ), -, ,, *, /, %, +, }
columnName := 'ID' (^)'.' 'ID' , { ), -, ,, *, /, %, +, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID' (^), { ), -, ,, *, /, %, +, }
columnName := 'ID' (^)'.' 'ID' , { ), -, ,, *, /, %, +, }
===============================================================================

SHIFT <27> by 'ID' to <28>
Condition<28>, REDUCE Production by ')': 
pid <68>: 
columnName := 'ID' 
Condition<28>, REDUCE Production by '-': 
pid <68>: 
columnName := 'ID' 
Condition<28>, REDUCE Production by ',': 
pid <68>: 
columnName := 'ID' 
Condition<28>, REDUCE Production by '*': 
pid <68>: 
columnName := 'ID' 
Condition<28>, REDUCE Production by '/': 
pid <68>: 
columnName := 'ID' 
Condition<28>, REDUCE Production by '%': 
pid <68>: 
columnName := 'ID' 
Condition<28>, REDUCE Production by '+': 
pid <68>: 
columnName := 'ID' 
From Condition <28> get package:
columnName := 'ID' '.' (^)'ID' , { ), -, ,, *, /, %, +, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID' '.' (^)'ID' , { ), -, ,, *, /, %, +, }
===============================================================================

SHIFT <28> by '.' to <29>
From Condition <29> get package:
columnName := 'ID' '.' 'ID' (^), { ), -, ,, *, /, %, +, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID' '.' 'ID' (^), { ), -, ,, *, /, %, +, }
===============================================================================

SHIFT <29> by 'ID' to <30>
Condition<30>, REDUCE Production by ')': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<30>, REDUCE Production by '-': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<30>, REDUCE Production by ',': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<30>, REDUCE Production by '*': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<30>, REDUCE Production by '/': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<30>, REDUCE Production by '%': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<30>, REDUCE Production by '+': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
From Condition <27> get package:
constantNum := positiveNum (^), { ), -, ,, *, /, %, +, }
-------------------------------------------------------------------------------

After tracing, got package:
constantNum := positiveNum (^), { ), -, ,, *, /, %, +, }
===============================================================================

SHIFT <27> by positiveNum to <31>.
Condition<31>, REDUCE Production by ')': 
pid <78>: 
constantNum := positiveNum 
Condition<31>, REDUCE Production by '-': 
pid <78>: 
constantNum := positiveNum 
Condition<31>, REDUCE Production by ',': 
pid <78>: 
constantNum := positiveNum 
Condition<31>, REDUCE Production by '*': 
pid <78>: 
constantNum := positiveNum 
Condition<31>, REDUCE Production by '/': 
pid <78>: 
constantNum := positiveNum 
Condition<31>, REDUCE Production by '%': 
pid <78>: 
constantNum := positiveNum 
Condition<31>, REDUCE Production by '+': 
pid <78>: 
constantNum := positiveNum 
From Condition <27> get package:
expressionAtom := expressionAtom (^)mathOperator expressionAtom , { ), -, ,, *, /, %, +, }
$__ann_35 := ',' expressionAtom (^), { ), ,, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := (^)'*' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'%' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'-' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
expressionAtom := expressionAtom (^)mathOperator expressionAtom , { ), -, ,, *, /, %, +, }
$__ann_35 := ',' expressionAtom (^), { ), ,, }
mathOperator := (^)'/' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'+' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <27> by expressionAtom to <32>.
From Condition <32> get package:
mathOperator := '*' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '*' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <32> by '*' to <33>
Condition<33>, REDUCE Production by 'STR_LITERAL': 
pid <88>: 
mathOperator := '*' 
Condition<33>, REDUCE Production by 'ID': 
pid <88>: 
mathOperator := '*' 
Condition<33>, REDUCE Production by '-': 
pid <88>: 
mathOperator := '*' 
Condition<33>, REDUCE Production by 'NUMBER_CONSTANT': 
pid <88>: 
mathOperator := '*' 
From Condition <32> get package:
mathOperator := '%' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '%' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <32> by '%' to <26>
This condition already existed.
From Condition <32> get package:
mathOperator := '-' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '-' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <32> by '-' to <34>
Condition<34>, REDUCE Production by 'STR_LITERAL': 
pid <92>: 
mathOperator := '-' 
Condition<34>, REDUCE Production by 'ID': 
pid <92>: 
mathOperator := '-' 
Condition<34>, REDUCE Production by '-': 
pid <92>: 
mathOperator := '-' 
Condition<34>, REDUCE Production by 'NUMBER_CONSTANT': 
pid <92>: 
mathOperator := '-' 
From Condition <32> get package:
expressionAtom := expressionAtom mathOperator (^)expressionAtom , { ), -, ,, *, /, %, +, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := (^)'ID' , { ), -, ,, *, /, %, +, }
constantNum := (^)positiveNum , { ), -, ,, *, /, %, +, }
expressionAtom := (^)'STR_LITERAL' , { ), ,, -, *, /, %, +, }
expressionAtom := expressionAtom mathOperator (^)expressionAtom , { ), -, ,, *, /, %, +, }
expressionAtom := (^)expressionAtom mathOperator expressionAtom , { ), ,, -, *, /, %, +, }
columnName := (^)'ID' '.' 'ID' , { ), -, ,, *, /, %, +, }
constantNum := (^)'-' positiveNum , { ), -, ,, *, /, %, +, }
expressionAtom := (^)constantNum , { ), ,, -, *, /, %, +, }
expressionAtom := (^)columnName , { ), ,, -, *, /, %, +, }
positiveNum := (^)'NUMBER_CONSTANT' , { ), ,, -, *, /, %, +, }
===============================================================================

SHIFT <32> by mathOperator to <35>.
From Condition <35> get package:
columnName := 'ID' (^), { ), -, ,, *, /, %, +, }
columnName := 'ID' (^)'.' 'ID' , { ), -, ,, *, /, %, +, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID' (^), { ), -, ,, *, /, %, +, }
columnName := 'ID' (^)'.' 'ID' , { ), -, ,, *, /, %, +, }
===============================================================================

SHIFT <35> by 'ID' to <28>
This condition already existed.
From Condition <35> get package:
constantNum := positiveNum (^), { ), -, ,, *, /, %, +, }
-------------------------------------------------------------------------------

After tracing, got package:
constantNum := positiveNum (^), { ), -, ,, *, /, %, +, }
===============================================================================

SHIFT <35> by positiveNum to <31>.
This condition already existed.
From Condition <35> get package:
expressionAtom := 'STR_LITERAL' (^), { ), ,, -, *, /, %, +, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := 'STR_LITERAL' (^), { ), ,, -, *, /, %, +, }
===============================================================================

SHIFT <35> by 'STR_LITERAL' to <36>
Condition<36>, REDUCE Production by ')': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<36>, REDUCE Production by ',': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<36>, REDUCE Production by '-': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<36>, REDUCE Production by '*': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<36>, REDUCE Production by '/': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<36>, REDUCE Production by '%': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<36>, REDUCE Production by '+': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
From Condition <35> get package:
expressionAtom := expressionAtom (^)mathOperator expressionAtom , { ), ,, -, *, /, %, +, }
expressionAtom := expressionAtom mathOperator expressionAtom (^), { ), -, ,, *, /, %, +, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := (^)'*' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'%' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'-' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
expressionAtom := expressionAtom (^)mathOperator expressionAtom , { ), ,, -, *, /, %, +, }
expressionAtom := expressionAtom mathOperator expressionAtom (^), { ), -, ,, *, /, %, +, }
mathOperator := (^)'/' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'+' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <35> by expressionAtom to <37>.
From Condition <37> get package:
mathOperator := '*' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '*' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <37> by '*' to <33>
This condition already existed.
From Condition <37> get package:
mathOperator := '%' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '%' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <37> by '%' to <26>
This condition already existed.
From Condition <37> get package:
mathOperator := '-' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '-' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <37> by '-' to <34>
This condition already existed.
From Condition <37> get package:
expressionAtom := expressionAtom mathOperator (^)expressionAtom , { ), ,, -, *, /, %, +, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := (^)'ID' , { ), ,, -, *, /, %, +, }
constantNum := (^)positiveNum , { ), ,, -, *, /, %, +, }
expressionAtom := (^)'STR_LITERAL' , { ), -, ,, *, /, %, +, }
expressionAtom := expressionAtom mathOperator (^)expressionAtom , { ), ,, -, *, /, %, +, }
expressionAtom := (^)expressionAtom mathOperator expressionAtom , { ), -, ,, *, /, %, +, }
columnName := (^)'ID' '.' 'ID' , { ), ,, -, *, /, %, +, }
constantNum := (^)'-' positiveNum , { ), ,, -, *, /, %, +, }
expressionAtom := (^)constantNum , { ), -, ,, *, /, %, +, }
expressionAtom := (^)columnName , { ), -, ,, *, /, %, +, }
positiveNum := (^)'NUMBER_CONSTANT' , { ), -, ,, *, /, %, +, }
===============================================================================

SHIFT <37> by mathOperator to <38>.
From Condition <38> get package:
columnName := 'ID' (^), { ), ,, -, *, /, %, +, }
columnName := 'ID' (^)'.' 'ID' , { ), ,, -, *, /, %, +, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID' (^), { ), ,, -, *, /, %, +, }
columnName := 'ID' (^)'.' 'ID' , { ), ,, -, *, /, %, +, }
===============================================================================

SHIFT <38> by 'ID' to <14>
This condition already existed.
From Condition <38> get package:
constantNum := positiveNum (^), { ), ,, -, *, /, %, +, }
-------------------------------------------------------------------------------

After tracing, got package:
constantNum := positiveNum (^), { ), ,, -, *, /, %, +, }
===============================================================================

SHIFT <38> by positiveNum to <20>.
This condition already existed.
From Condition <38> get package:
expressionAtom := 'STR_LITERAL' (^), { ), -, ,, *, /, %, +, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := 'STR_LITERAL' (^), { ), -, ,, *, /, %, +, }
===============================================================================

SHIFT <38> by 'STR_LITERAL' to <22>
This condition already existed.
From Condition <38> get package:
expressionAtom := expressionAtom (^)mathOperator expressionAtom , { ), -, ,, *, /, %, +, }
expressionAtom := expressionAtom mathOperator expressionAtom (^), { ), ,, -, *, /, %, +, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := (^)'*' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'%' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'-' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
expressionAtom := expressionAtom (^)mathOperator expressionAtom , { ), -, ,, *, /, %, +, }
expressionAtom := expressionAtom mathOperator expressionAtom (^), { ), ,, -, *, /, %, +, }
mathOperator := (^)'/' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'+' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <38> by expressionAtom to <39>.
From Condition <39> get package:
mathOperator := '*' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '*' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <39> by '*' to <33>
This condition already existed.
From Condition <39> get package:
mathOperator := '%' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '%' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <39> by '%' to <26>
This condition already existed.
From Condition <39> get package:
mathOperator := '-' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '-' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <39> by '-' to <34>
This condition already existed.
From Condition <39> get package:
expressionAtom := expressionAtom mathOperator (^)expressionAtom , { ), -, ,, *, /, %, +, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := (^)'ID' , { ), -, ,, *, /, %, +, }
constantNum := (^)positiveNum , { ), -, ,, *, /, %, +, }
expressionAtom := (^)'STR_LITERAL' , { ), ,, -, *, /, %, +, }
expressionAtom := expressionAtom mathOperator (^)expressionAtom , { ), -, ,, *, /, %, +, }
expressionAtom := (^)expressionAtom mathOperator expressionAtom , { ), ,, -, *, /, %, +, }
columnName := (^)'ID' '.' 'ID' , { ), -, ,, *, /, %, +, }
constantNum := (^)'-' positiveNum , { ), -, ,, *, /, %, +, }
expressionAtom := (^)constantNum , { ), ,, -, *, /, %, +, }
expressionAtom := (^)columnName , { ), ,, -, *, /, %, +, }
positiveNum := (^)'NUMBER_CONSTANT' , { ), ,, -, *, /, %, +, }
===============================================================================

SHIFT <39> by mathOperator to <35>.
This condition already existed.
Condition<39>, REDUCE Production by ')': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Condition<39>, REDUCE Production by ',': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Already existed SHIFT by symbol'-' :
<34>
Try to set it to: REDUCE to:
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Reset Action[39]['-'] to REDUCE:
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Already existed SHIFT by symbol'*' :
<33>
Try to set it to: REDUCE to:
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Reset Action[39]['*'] to REDUCE:
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Condition<39>, REDUCE Production by '/': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Already existed SHIFT by symbol'%' :
<26>
Try to set it to: REDUCE to:
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Reset Action[39]['%'] to REDUCE:
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Condition<39>, REDUCE Production by '+': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
From Condition <39> get package:
mathOperator := '/' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '/' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

Already existed REDUCE by symbol '/': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Try to set it to: SHIFT to <40>
Set SHIFT fail in: from condition <39> to condition <40>.
Condition<40>, REDUCE Production by 'STR_LITERAL': 
pid <89>: 
mathOperator := '/' 
Condition<40>, REDUCE Production by 'ID': 
pid <89>: 
mathOperator := '/' 
Condition<40>, REDUCE Production by '-': 
pid <89>: 
mathOperator := '/' 
Condition<40>, REDUCE Production by 'NUMBER_CONSTANT': 
pid <89>: 
mathOperator := '/' 
From Condition <39> get package:
mathOperator := '+' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '+' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

Already existed REDUCE by symbol '+': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Try to set it to: SHIFT to <41>
Set SHIFT fail in: from condition <39> to condition <41>.
Condition<41>, REDUCE Production by 'STR_LITERAL': 
pid <91>: 
mathOperator := '+' 
Condition<41>, REDUCE Production by 'ID': 
pid <91>: 
mathOperator := '+' 
Condition<41>, REDUCE Production by '-': 
pid <91>: 
mathOperator := '+' 
Condition<41>, REDUCE Production by 'NUMBER_CONSTANT': 
pid <91>: 
mathOperator := '+' 
From Condition <38> get package:
constantNum := '-' (^)positiveNum , { ), ,, -, *, /, %, +, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := (^)'NUMBER_CONSTANT' , { ), -, ,, *, /, %, +, }
constantNum := '-' (^)positiveNum , { ), ,, -, *, /, %, +, }
===============================================================================

SHIFT <38> by '-' to <42>
From Condition <42> get package:
positiveNum := 'NUMBER_CONSTANT' (^), { ), -, ,, *, /, %, +, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := 'NUMBER_CONSTANT' (^), { ), -, ,, *, /, %, +, }
===============================================================================

SHIFT <42> by 'NUMBER_CONSTANT' to <43>
Condition<43>, REDUCE Production by ')': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<43>, REDUCE Production by '-': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<43>, REDUCE Production by ',': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<43>, REDUCE Production by '*': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<43>, REDUCE Production by '/': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<43>, REDUCE Production by '%': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<43>, REDUCE Production by '+': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
From Condition <42> get package:
constantNum := '-' positiveNum (^), { ), ,, -, *, /, %, +, }
-------------------------------------------------------------------------------

After tracing, got package:
constantNum := '-' positiveNum (^), { ), ,, -, *, /, %, +, }
===============================================================================

SHIFT <42> by positiveNum to <44>.
Condition<44>, REDUCE Production by ')': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<44>, REDUCE Production by ',': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<44>, REDUCE Production by '-': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<44>, REDUCE Production by '*': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<44>, REDUCE Production by '/': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<44>, REDUCE Production by '%': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<44>, REDUCE Production by '+': 
pid <77>: 
constantNum := '-' positiveNum 
From Condition <38> get package:
expressionAtom := constantNum (^), { ), -, ,, *, /, %, +, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := constantNum (^), { ), -, ,, *, /, %, +, }
===============================================================================

SHIFT <38> by constantNum to <45>.
Condition<45>, REDUCE Production by ')': 
pid <73>: 
expressionAtom := constantNum 
Condition<45>, REDUCE Production by '-': 
pid <73>: 
expressionAtom := constantNum 
Condition<45>, REDUCE Production by ',': 
pid <73>: 
expressionAtom := constantNum 
Condition<45>, REDUCE Production by '*': 
pid <73>: 
expressionAtom := constantNum 
Condition<45>, REDUCE Production by '/': 
pid <73>: 
expressionAtom := constantNum 
Condition<45>, REDUCE Production by '%': 
pid <73>: 
expressionAtom := constantNum 
Condition<45>, REDUCE Production by '+': 
pid <73>: 
expressionAtom := constantNum 
From Condition <38> get package:
expressionAtom := columnName (^), { ), -, ,, *, /, %, +, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := columnName (^), { ), -, ,, *, /, %, +, }
===============================================================================

SHIFT <38> by columnName to <46>.
Condition<46>, REDUCE Production by ')': 
pid <75>: 
expressionAtom := columnName 
Condition<46>, REDUCE Production by '-': 
pid <75>: 
expressionAtom := columnName 
Condition<46>, REDUCE Production by ',': 
pid <75>: 
expressionAtom := columnName 
Condition<46>, REDUCE Production by '*': 
pid <75>: 
expressionAtom := columnName 
Condition<46>, REDUCE Production by '/': 
pid <75>: 
expressionAtom := columnName 
Condition<46>, REDUCE Production by '%': 
pid <75>: 
expressionAtom := columnName 
Condition<46>, REDUCE Production by '+': 
pid <75>: 
expressionAtom := columnName 
From Condition <38> get package:
positiveNum := 'NUMBER_CONSTANT' (^), { ), -, ,, *, /, %, +, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := 'NUMBER_CONSTANT' (^), { ), -, ,, *, /, %, +, }
===============================================================================

SHIFT <38> by 'NUMBER_CONSTANT' to <43>
This condition already existed.
Condition<37>, REDUCE Production by ')': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Already existed SHIFT by symbol'-' :
<34>
Try to set it to: REDUCE to:
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Reset Action[37]['-'] to REDUCE:
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Condition<37>, REDUCE Production by ',': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Already existed SHIFT by symbol'*' :
<33>
Try to set it to: REDUCE to:
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Reset Action[37]['*'] to REDUCE:
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Condition<37>, REDUCE Production by '/': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Already existed SHIFT by symbol'%' :
<26>
Try to set it to: REDUCE to:
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Reset Action[37]['%'] to REDUCE:
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Condition<37>, REDUCE Production by '+': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
From Condition <37> get package:
mathOperator := '/' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '/' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

Already existed REDUCE by symbol '/': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Try to set it to: SHIFT to <40>
Set SHIFT fail in: from condition <37> to condition <40>.
This condition already existed.
From Condition <37> get package:
mathOperator := '+' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '+' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

Already existed REDUCE by symbol '+': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Try to set it to: SHIFT to <41>
Set SHIFT fail in: from condition <37> to condition <41>.
This condition already existed.
From Condition <35> get package:
constantNum := '-' (^)positiveNum , { ), -, ,, *, /, %, +, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := (^)'NUMBER_CONSTANT' , { ), ,, -, *, /, %, +, }
constantNum := '-' (^)positiveNum , { ), -, ,, *, /, %, +, }
===============================================================================

SHIFT <35> by '-' to <47>
From Condition <47> get package:
positiveNum := 'NUMBER_CONSTANT' (^), { ), ,, -, *, /, %, +, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := 'NUMBER_CONSTANT' (^), { ), ,, -, *, /, %, +, }
===============================================================================

SHIFT <47> by 'NUMBER_CONSTANT' to <48>
Condition<48>, REDUCE Production by ')': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<48>, REDUCE Production by ',': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<48>, REDUCE Production by '-': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<48>, REDUCE Production by '*': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<48>, REDUCE Production by '/': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<48>, REDUCE Production by '%': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<48>, REDUCE Production by '+': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
From Condition <47> get package:
constantNum := '-' positiveNum (^), { ), -, ,, *, /, %, +, }
-------------------------------------------------------------------------------

After tracing, got package:
constantNum := '-' positiveNum (^), { ), -, ,, *, /, %, +, }
===============================================================================

SHIFT <47> by positiveNum to <49>.
Condition<49>, REDUCE Production by ')': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<49>, REDUCE Production by '-': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<49>, REDUCE Production by ',': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<49>, REDUCE Production by '*': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<49>, REDUCE Production by '/': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<49>, REDUCE Production by '%': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<49>, REDUCE Production by '+': 
pid <77>: 
constantNum := '-' positiveNum 
From Condition <35> get package:
expressionAtom := constantNum (^), { ), ,, -, *, /, %, +, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := constantNum (^), { ), ,, -, *, /, %, +, }
===============================================================================

SHIFT <35> by constantNum to <50>.
Condition<50>, REDUCE Production by ')': 
pid <73>: 
expressionAtom := constantNum 
Condition<50>, REDUCE Production by ',': 
pid <73>: 
expressionAtom := constantNum 
Condition<50>, REDUCE Production by '-': 
pid <73>: 
expressionAtom := constantNum 
Condition<50>, REDUCE Production by '*': 
pid <73>: 
expressionAtom := constantNum 
Condition<50>, REDUCE Production by '/': 
pid <73>: 
expressionAtom := constantNum 
Condition<50>, REDUCE Production by '%': 
pid <73>: 
expressionAtom := constantNum 
Condition<50>, REDUCE Production by '+': 
pid <73>: 
expressionAtom := constantNum 
From Condition <35> get package:
expressionAtom := columnName (^), { ), ,, -, *, /, %, +, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := columnName (^), { ), ,, -, *, /, %, +, }
===============================================================================

SHIFT <35> by columnName to <51>.
Condition<51>, REDUCE Production by ')': 
pid <75>: 
expressionAtom := columnName 
Condition<51>, REDUCE Production by ',': 
pid <75>: 
expressionAtom := columnName 
Condition<51>, REDUCE Production by '-': 
pid <75>: 
expressionAtom := columnName 
Condition<51>, REDUCE Production by '*': 
pid <75>: 
expressionAtom := columnName 
Condition<51>, REDUCE Production by '/': 
pid <75>: 
expressionAtom := columnName 
Condition<51>, REDUCE Production by '%': 
pid <75>: 
expressionAtom := columnName 
Condition<51>, REDUCE Production by '+': 
pid <75>: 
expressionAtom := columnName 
From Condition <35> get package:
positiveNum := 'NUMBER_CONSTANT' (^), { ), ,, -, *, /, %, +, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := 'NUMBER_CONSTANT' (^), { ), ,, -, *, /, %, +, }
===============================================================================

SHIFT <35> by 'NUMBER_CONSTANT' to <48>
This condition already existed.
Condition<32>, REDUCE Production by ')': 
pid <42>: 
$__ann_35 := ',' expressionAtom 
Condition<32>, REDUCE Production by ',': 
pid <42>: 
$__ann_35 := ',' expressionAtom 
From Condition <32> get package:
mathOperator := '/' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '/' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <32> by '/' to <40>
This condition already existed.
From Condition <32> get package:
mathOperator := '+' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '+' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <32> by '+' to <41>
This condition already existed.
From Condition <27> get package:
expressionAtom := 'STR_LITERAL' (^), { ), -, ,, *, /, %, +, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := 'STR_LITERAL' (^), { ), -, ,, *, /, %, +, }
===============================================================================

SHIFT <27> by 'STR_LITERAL' to <22>
This condition already existed.
From Condition <27> get package:
constantNum := '-' (^)positiveNum , { ), -, ,, *, /, %, +, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := (^)'NUMBER_CONSTANT' , { ), ,, -, *, /, %, +, }
constantNum := '-' (^)positiveNum , { ), -, ,, *, /, %, +, }
===============================================================================

SHIFT <27> by '-' to <47>
This condition already existed.
From Condition <27> get package:
expressionAtom := constantNum (^), { ), -, ,, *, /, %, +, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := constantNum (^), { ), -, ,, *, /, %, +, }
===============================================================================

SHIFT <27> by constantNum to <45>.
This condition already existed.
From Condition <27> get package:
expressionAtom := columnName (^), { ), -, ,, *, /, %, +, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := columnName (^), { ), -, ,, *, /, %, +, }
===============================================================================

SHIFT <27> by columnName to <46>.
This condition already existed.
From Condition <27> get package:
positiveNum := 'NUMBER_CONSTANT' (^), { ), -, ,, *, /, %, +, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := 'NUMBER_CONSTANT' (^), { ), -, ,, *, /, %, +, }
===============================================================================

SHIFT <27> by 'NUMBER_CONSTANT' to <43>
This condition already existed.
From Condition <25> get package:
insertElements := 'VALUES' '(' expressionAtom ')' (^), { $eof$, }
-------------------------------------------------------------------------------

After tracing, got package:
insertElements := 'VALUES' '(' expressionAtom ')' (^), { $eof$, }
===============================================================================

SHIFT <25> by ')' to <52>
Condition<52>, REDUCE Production by '$eof$': 
pid <40>: 
insertElements := 'VALUES' '(' expressionAtom ')' 
From Condition <25> get package:
mathOperator := '*' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '*' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <25> by '*' to <33>
This condition already existed.
From Condition <25> get package:
expressionAtom := expressionAtom mathOperator (^)expressionAtom , { ), -, ,, *, /, %, +, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := (^)'ID' , { ), -, ,, *, /, %, +, }
constantNum := (^)positiveNum , { ), -, ,, *, /, %, +, }
expressionAtom := (^)'STR_LITERAL' , { ), ,, -, *, /, %, +, }
expressionAtom := expressionAtom mathOperator (^)expressionAtom , { ), -, ,, *, /, %, +, }
expressionAtom := (^)expressionAtom mathOperator expressionAtom , { ), ,, -, *, /, %, +, }
columnName := (^)'ID' '.' 'ID' , { ), -, ,, *, /, %, +, }
constantNum := (^)'-' positiveNum , { ), -, ,, *, /, %, +, }
expressionAtom := (^)constantNum , { ), ,, -, *, /, %, +, }
expressionAtom := (^)columnName , { ), ,, -, *, /, %, +, }
positiveNum := (^)'NUMBER_CONSTANT' , { ), ,, -, *, /, %, +, }
===============================================================================

SHIFT <25> by mathOperator to <35>.
This condition already existed.
From Condition <25> get package:
mathOperator := '-' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '-' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <25> by '-' to <34>
This condition already existed.
From Condition <25> get package:
insertElements := 'VALUES' '(' expressionAtom $__ann_35 (^)')' , { $eof$, }
$__ann_35 := $__ann_35 (^)',' expressionAtom , { ), ,, }
-------------------------------------------------------------------------------

After tracing, got package:
insertElements := 'VALUES' '(' expressionAtom $__ann_35 (^)')' , { $eof$, }
$__ann_35 := $__ann_35 (^)',' expressionAtom , { ), ,, }
===============================================================================

SHIFT <25> by $__ann_35 to <53>.
From Condition <53> get package:
insertElements := 'VALUES' '(' expressionAtom $__ann_35 ')' (^), { $eof$, }
-------------------------------------------------------------------------------

After tracing, got package:
insertElements := 'VALUES' '(' expressionAtom $__ann_35 ')' (^), { $eof$, }
===============================================================================

SHIFT <53> by ')' to <54>
Condition<54>, REDUCE Production by '$eof$': 
pid <39>: 
insertElements := 'VALUES' '(' expressionAtom $__ann_35 ')' 
From Condition <53> get package:
$__ann_35 := $__ann_35 ',' (^)expressionAtom , { ), ,, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := (^)'ID' '.' 'ID' , { ), ,, -, *, /, %, +, }
constantNum := (^)'-' positiveNum , { ), ,, -, *, /, %, +, }
$__ann_35 := $__ann_35 ',' (^)expressionAtom , { ), ,, }
expressionAtom := (^)constantNum , { ), -, ,, *, /, %, +, }
expressionAtom := (^)columnName , { ), -, ,, *, /, %, +, }
columnName := (^)'ID' , { ), ,, -, *, /, %, +, }
constantNum := (^)positiveNum , { ), ,, -, *, /, %, +, }
expressionAtom := (^)'STR_LITERAL' , { ), -, ,, *, /, %, +, }
expressionAtom := (^)expressionAtom mathOperator expressionAtom , { ), -, ,, *, /, %, +, }
positiveNum := (^)'NUMBER_CONSTANT' , { ), -, ,, *, /, %, +, }
===============================================================================

SHIFT <53> by ',' to <55>
From Condition <55> get package:
columnName := 'ID' (^)'.' 'ID' , { ), ,, -, *, /, %, +, }
columnName := 'ID' (^), { ), ,, -, *, /, %, +, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID' (^)'.' 'ID' , { ), ,, -, *, /, %, +, }
columnName := 'ID' (^), { ), ,, -, *, /, %, +, }
===============================================================================

SHIFT <55> by 'ID' to <56>
From Condition <56> get package:
columnName := 'ID' '.' (^)'ID' , { ), ,, -, *, /, %, +, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID' '.' (^)'ID' , { ), ,, -, *, /, %, +, }
===============================================================================

SHIFT <56> by '.' to <16>
This condition already existed.
Condition<56>, REDUCE Production by ')': 
pid <68>: 
columnName := 'ID' 
Condition<56>, REDUCE Production by ',': 
pid <68>: 
columnName := 'ID' 
Condition<56>, REDUCE Production by '-': 
pid <68>: 
columnName := 'ID' 
Condition<56>, REDUCE Production by '*': 
pid <68>: 
columnName := 'ID' 
Condition<56>, REDUCE Production by '/': 
pid <68>: 
columnName := 'ID' 
Condition<56>, REDUCE Production by '%': 
pid <68>: 
columnName := 'ID' 
Condition<56>, REDUCE Production by '+': 
pid <68>: 
columnName := 'ID' 
From Condition <55> get package:
constantNum := '-' (^)positiveNum , { ), ,, -, *, /, %, +, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := (^)'NUMBER_CONSTANT' , { ), -, ,, *, /, %, +, }
constantNum := '-' (^)positiveNum , { ), ,, -, *, /, %, +, }
===============================================================================

SHIFT <55> by '-' to <42>
This condition already existed.
From Condition <55> get package:
$__ann_35 := $__ann_35 ',' expressionAtom (^), { ), ,, }
expressionAtom := expressionAtom (^)mathOperator expressionAtom , { ), -, ,, *, /, %, +, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := (^)'/' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'+' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
$__ann_35 := $__ann_35 ',' expressionAtom (^), { ), ,, }
mathOperator := (^)'*' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'%' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'-' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
expressionAtom := expressionAtom (^)mathOperator expressionAtom , { ), -, ,, *, /, %, +, }
===============================================================================

SHIFT <55> by expressionAtom to <57>.
From Condition <57> get package:
mathOperator := '/' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '/' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <57> by '/' to <40>
This condition already existed.
From Condition <57> get package:
mathOperator := '+' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '+' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <57> by '+' to <41>
This condition already existed.
Condition<57>, REDUCE Production by ')': 
pid <41>: 
$__ann_35 := $__ann_35 ',' expressionAtom 
Condition<57>, REDUCE Production by ',': 
pid <41>: 
$__ann_35 := $__ann_35 ',' expressionAtom 
From Condition <57> get package:
mathOperator := '*' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '*' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <57> by '*' to <33>
This condition already existed.
From Condition <57> get package:
mathOperator := '%' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '%' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <57> by '%' to <26>
This condition already existed.
From Condition <57> get package:
mathOperator := '-' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '-' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <57> by '-' to <34>
This condition already existed.
From Condition <57> get package:
expressionAtom := expressionAtom mathOperator (^)expressionAtom , { ), -, ,, *, /, %, +, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := (^)'ID' , { ), -, ,, *, /, %, +, }
constantNum := (^)positiveNum , { ), -, ,, *, /, %, +, }
expressionAtom := (^)'STR_LITERAL' , { ), ,, -, *, /, %, +, }
expressionAtom := expressionAtom mathOperator (^)expressionAtom , { ), -, ,, *, /, %, +, }
expressionAtom := (^)expressionAtom mathOperator expressionAtom , { ), ,, -, *, /, %, +, }
columnName := (^)'ID' '.' 'ID' , { ), -, ,, *, /, %, +, }
constantNum := (^)'-' positiveNum , { ), -, ,, *, /, %, +, }
expressionAtom := (^)constantNum , { ), ,, -, *, /, %, +, }
expressionAtom := (^)columnName , { ), ,, -, *, /, %, +, }
positiveNum := (^)'NUMBER_CONSTANT' , { ), ,, -, *, /, %, +, }
===============================================================================

SHIFT <57> by mathOperator to <35>.
This condition already existed.
From Condition <55> get package:
expressionAtom := constantNum (^), { ), -, ,, *, /, %, +, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := constantNum (^), { ), -, ,, *, /, %, +, }
===============================================================================

SHIFT <55> by constantNum to <45>.
This condition already existed.
From Condition <55> get package:
expressionAtom := columnName (^), { ), -, ,, *, /, %, +, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := columnName (^), { ), -, ,, *, /, %, +, }
===============================================================================

SHIFT <55> by columnName to <46>.
This condition already existed.
From Condition <55> get package:
constantNum := positiveNum (^), { ), ,, -, *, /, %, +, }
-------------------------------------------------------------------------------

After tracing, got package:
constantNum := positiveNum (^), { ), ,, -, *, /, %, +, }
===============================================================================

SHIFT <55> by positiveNum to <20>.
This condition already existed.
From Condition <55> get package:
expressionAtom := 'STR_LITERAL' (^), { ), -, ,, *, /, %, +, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := 'STR_LITERAL' (^), { ), -, ,, *, /, %, +, }
===============================================================================

SHIFT <55> by 'STR_LITERAL' to <22>
This condition already existed.
From Condition <55> get package:
positiveNum := 'NUMBER_CONSTANT' (^), { ), -, ,, *, /, %, +, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := 'NUMBER_CONSTANT' (^), { ), -, ,, *, /, %, +, }
===============================================================================

SHIFT <55> by 'NUMBER_CONSTANT' to <43>
This condition already existed.
From Condition <25> get package:
mathOperator := '/' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '/' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <25> by '/' to <40>
This condition already existed.
From Condition <25> get package:
mathOperator := '+' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '+' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <25> by '+' to <41>
This condition already existed.
From Condition <12> get package:
constantNum := '-' (^)positiveNum , { ), ,, -, *, /, %, +, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := (^)'NUMBER_CONSTANT' , { ), -, ,, *, /, %, +, }
constantNum := '-' (^)positiveNum , { ), ,, -, *, /, %, +, }
===============================================================================

SHIFT <12> by '-' to <42>
This condition already existed.
From Condition <12> get package:
expressionAtom := constantNum (^), { ), -, ,, *, /, %, +, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := constantNum (^), { ), -, ,, *, /, %, +, }
===============================================================================

SHIFT <12> by constantNum to <45>.
This condition already existed.
From Condition <12> get package:
expressionAtom := columnName (^), { ), -, ,, *, /, %, +, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := columnName (^), { ), -, ,, *, /, %, +, }
===============================================================================

SHIFT <12> by columnName to <46>.
This condition already existed.
From Condition <12> get package:
positiveNum := 'NUMBER_CONSTANT' (^), { ), -, ,, *, /, %, +, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := 'NUMBER_CONSTANT' (^), { ), -, ,, *, /, %, +, }
===============================================================================

SHIFT <12> by 'NUMBER_CONSTANT' to <43>
This condition already existed.
From Condition <1> get package:
createTable := 'CREATE' (^)'TABLE' tableName createDefinitions , { $eof$, }
-------------------------------------------------------------------------------

After tracing, got package:
createTable := 'CREATE' (^)'TABLE' tableName createDefinitions , { $eof$, }
===============================================================================

SHIFT <1> by 'CREATE' to <58>
From Condition <1> get package:
selectStatement := 'SELECT' (^)selectElements fromClause , { $eof$, }
selectStatement := 'SELECT'From Condition < (^)selectElements fromClause58 > get package:'WHERE'
 expression , { createTable $eof$:= , }
'CREATE' selectStatement := 'TABLE' 'SELECT'(^) tableName (^)selectElementscreateDefinitions  fromClause , { 'WHERE'$eof$ , }expression 
orderByClause------------------------------------------------------------------------------- 
, { 
$eof$, }
selectStatement := 'SELECT' (^)selectElements fromClause orderByClause , { $eof$, }
-------------------------------------------------------------------------------

After tracing, got package:
tableName := (^)'ID' , { (, }
createTable := 'CREATE' 'TABLE' (^)tableName createDefinitions , { $eof$, }
===============================================================================

SHIFT <58> by 'TABLE' to <59>
From Condition <59> get package:
tableName := 'ID' (^), { (, }
-------------------------------------------------------------------------------

After tracing, got package:
tableName := 'ID' (^), { (, }
===============================================================================

SHIFT <59> by 'ID' to <60>
Condition<60>, REDUCE Production by '(': 
pid <66>: 
tableName := 'ID' 
From Condition <59> get package:
createTable := 'CREATE' 'TABLE' tableName (^)createDefinitions , { $eof$, }
-------------------------------------------------------------------------------

After tracing, got package:
createDefinitions := (^)'(' createDefinition $__ann_31 ')' , { $eof$, }
createTable := 'CREATE' 'TABLE' tableName (^)createDefinitions , { $eof$, }
createDefinitions := (^)'(' createDefinition ')' , { $eof$, }
===============================================================================

SHIFT <59> by tableName to <61>.
From Condition <61> get package:
createDefinitions := '(' (^)createDefinition $__ann_31 ')' , { $eof$, }
createDefinitions := '(' (^)createDefinition ')' , { $eof$, }
-------------------------------------------------------------------------------

After tracing, got package:
createDefinition := (^)'ID' dataType $__ann_32 , { ,, ), }
createDefinitions := '(' (^)createDefinition $__ann_31 ')' , { $eof$, }
createDefinitions := '(' (^)createDefinition ')' , { $eof$, }
===============================================================================

SHIFT <61> by '(' to <62>
From Condition <62> get package:
createDefinition := 'ID' (^)dataType $__ann_32 , { ,, ), }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := (^)expressionAtom mathOperator expressionAtom , { FROM, *, /, %, +, ,, -, }
selectElements := (^)expressionAtom $__ann_37 , { FROM, }
selectStatement := 'SELECT' (^)selectElements fromClause , { $eof$, }
columnName := (^)'ID' , { FROM, *, /, %, +, -, ,, }
selectStatement := 'SELECT' (^)selectElements fromClause 'WHERE' expression , { $eof$, }
After tracing, got package:expressionAtom 
:= (^)columnNamedataType  := , { (^)FROM, 'CHAR'* , /'(',  %, positiveNum+ , ,')',  -, }, { 
NOT_NULLselectElements,  DEFAULT:= , PRIMARY_KEY(^), '$'REFERENCES , }, { 
FROMcreateDefinition,  }:= 
'ID'columnName  := (^)dataType(^) 'ID' $__ann_32 '.' , { 'ID', , ), { , }FROM, 
*dataType,  /:= , %(^), 'INT'+ , -, , { ,, NOT_NULL}, 
DEFAULTselectStatement,  PRIMARY_KEY:= , REFERENCES, 'SELECT'} 
(^)dataTypeselectElements  := fromClause (^)'VARCHAR''WHERE'  '('expression  positiveNumorderByClause  ')', {  $eof$, , { }NOT_NULL
, selectElementsDEFAULT , := PRIMARY_KEY, (^)REFERENCESexpressionAtom,  }
, { ===============================================================================FROM
, 
}
selectStatement := 'SELECT' (^)selectElements fromClause orderByClause , { $eof$, }
expressionAtom := (^)'STR_LITERAL' , { FROM, *, /, %, +, ,, -, }
expressionAtom := (^)constantNum , { FROM, *, /, %, +, ,, -, }
constantNum := (^)positiveNum , { FROM, *, /, %, +, -, ,, }
constantNum := (^)'-' positiveNum , { FROM, *, /, %, +, -, ,, }
positiveNum := (^)'NUMBER_CONSTANT' , { FROM, *, /, %, +, ,, -, }
===============================================================================

SHIFT <62> by 'ID' to <63>
From Condition <63> get package:
dataType := 'CHAR' (^)'(' positiveNum ')' , { NOT_NULL, DEFAULT, PRIMARY_KEY, REFERENCES, }
-------------------------------------------------------------------------------

After tracing, got package:
dataType := 'CHAR' (^)'(' positiveNum ')' , { NOT_NULL, DEFAULT, PRIMARY_KEY, REFERENCES, }
===============================================================================

SHIFT <1> by 'SELECT' to <64>
SHIFT <63> by 'CHAR' to <65>
From Condition <64> get package:
selectElements := expressionAtom (^)$__ann_37 , { FROM, }
expressionAtom := expressionAtom (^)mathOperator expressionAtom , { FROM, *, /, %, +, ,, -, }
selectElements := expressionAtom (^), { FROM, }
From Condition <-------------------------------------------------------------------------------
65
> get package:
dataType := 'CHAR' '(' (^)positiveNum ')' , { NOT_NULL, DEFAULT, PRIMARY_KEY, REFERENCES, }
-------------------------------------------------------------------------------

After tracing, got package:
dataType := 'CHAR' '(' (^)positiveNum ')' , { NOT_NULL, DEFAULT, PRIMARY_KEY, REFERENCES, }
positiveNum := (^)'NUMBER_CONSTANT' , { ), }
===============================================================================

SHIFT <65> by '(' to <66>
From Condition <66> get package:
dataType := 'CHAR' '(' positiveNum (^)')' , { NOT_NULL, DEFAULT, PRIMARY_KEY, REFERENCES, }
-------------------------------------------------------------------------------

After tracing, got package:
dataType := 'CHAR' '(' positiveNum (^)')' , { NOT_NULL, DEFAULT, PRIMARY_KEY, REFERENCES, }
===============================================================================

After tracing, got package:
SHIFT <mathOperator66 > by := positiveNum to <67(^)>.'%'
 , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
expressionAtom := expressionAtom (^)mathOperator expressionAtom , { FROM, *, /, %, +, ,, -, }
mathOperator := (^)'-' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
$__ann_37 := (^)$__ann_37 ',' expressionAtom , { FROM, ,, }
selectElements := expressionAtom (^)$__ann_37 , { FROM, }
From Condition <mathOperator := (^)67'/'> get package: 
, { STR_LITERAL, IDdataType,  -:= , NUMBER_CONSTANT, }'CHAR'
 mathOperator := '(' (^)'+'positiveNum  , { ')' STR_LITERAL, ID(^), , { -, NOT_NULLNUMBER_CONSTANT, , DEFAULT}, 
PRIMARY_KEY$__ann_37,  REFERENCES:= , }(^)
','------------------------------------------------------------------------------- 
expressionAtom
 After tracing, got package:, { 
FROM, dataType, , := }
'CHAR'selectElements  := '(' expressionAtom positiveNum (^), { ')' FROM, }(^)
, { mathOperator NOT_NULL:= , DEFAULT(^), '*'PRIMARY_KEY , REFERENCES, , { }STR_LITERAL
, ===============================================================================ID, 
-
, NUMBER_CONSTANT, }
===============================================================================

SHIFT <67> by ')' to <68>
Condition<68>, REDUCE Production by 'NOT_NULL': 
pid <20>: 
dataType := 'CHAR' '(' positiveNum ')' 
Condition<68>, REDUCE Production by 'DEFAULT': 
pid <20>: 
dataType := 'CHAR' '(' positiveNum ')' 
Condition<68>, REDUCE Production by 'PRIMARY_KEY': 
pid <20>: 
dataType := 'CHAR' '(' positiveNum ')' 
Condition<68>, REDUCE Production by 'REFERENCES': 
pid <20>: 
dataType := 'CHAR' '(' positiveNum ')' 
From Condition <66> get package:
positiveNum := 'NUMBER_CONSTANT' (^), { ), }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := 'NUMBER_CONSTANT' (^), { ), }
===============================================================================

SHIFT <64> by expressionAtom to <69>.
SHIFT <66> by 'NUMBER_CONSTANT' to <70>
Condition<70From Condition <>, REDUCE Production by ')': 
69pid <> get package:79
>: 
positiveNum := mathOperator 'NUMBER_CONSTANT':=  
'%' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '%' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

From Condition <63> get package:
createDefinition := 'ID' dataType (^)$__ann_32 , { ,, SHIFT <)69, > by '}%' to <
26>-------------------------------------------------------------------------------

This condition already existed.

From Condition <69> get package:
expressionAtom := expressionAtom mathOperator (^)expressionAtom , { FROM, *, /, %, +, ,, -, }
-------------------------------------------------------------------------------

After tracing, got package:
columnConstraint := (^)'NOT_NULL' , { ,, ), PRIMARY_KEY, NOT_NULL, DEFAULT, REFERENCES, }
columnConstraint := (^)'PRIMARY_KEY' , { ,, ), PRIMARY_KEY, NOT_NULL, DEFAULT, REFERENCES, }
$__ann_32 := (^)columnConstraint , { ,, PRIMARY_KEY, ), NOT_NULL, DEFAULT, REFERENCES, }
createDefinition := 'ID' dataType (^)$__ann_32 , { ,, ), }
columnConstraint := (^)'DEFAULT' expressionAtom , { ,, ), PRIMARY_KEY, NOT_NULL, DEFAULT, REFERENCES, }
columnConstraint := (^)'REFERENCES' tableName , { ,, ), PRIMARY_KEY, NOT_NULL, DEFAULT, REFERENCES, }
$__ann_32 := (^)$__ann_32 columnConstraint , { ,, PRIMARY_KEY, ), NOT_NULL, DEFAULT, REFERENCES, }
===============================================================================

SHIFT <63> by dataType to <71>.
From Condition <71> get package:
columnConstraint := 'NOT_NULL' (^), { ,, ), PRIMARY_KEY, NOT_NULL, DEFAULT, REFERENCES, }
-------------------------------------------------------------------------------

After tracing, got package:
columnConstraint := 'NOT_NULL' (^), { ,, ), PRIMARY_KEY, NOT_NULL, DEFAULT, REFERENCES, }
===============================================================================

SHIFT <71> by 'NOT_NULL' to <72>
Condition<72>, REDUCE Production by ',': 
pid <22>: 
columnConstraint := 'NOT_NULL' 
Condition<72>, REDUCE Production by ')': 
pid <22>: 
columnConstraint := 'NOT_NULL' 
Condition<72>, REDUCE Production by 'PRIMARY_KEY': 
pid <22>: 
columnConstraint := 'NOT_NULL' 
Condition<72>, REDUCE Production by 'NOT_NULL': 
pid <22>: 
columnConstraint := 'NOT_NULL' 
Condition<72>, REDUCE Production by 'DEFAULT': 
pid <22>: 
columnConstraint := 'NOT_NULL' 
Condition<72>, REDUCE Production by 'REFERENCES': 
pid <22>: 
columnConstraint := 'NOT_NULL' 
After tracing, got package:
columnName := (^)'ID' , { FROM, *, /, %, +, ,, -, }
constantNum := (^)positiveNum , { FROM, *, /, %, +, ,, -, }
expressionAtom := (^)'STR_LITERAL' , { FROM, *, /, %, +, -, ,, }
expressionAtom := expressionAtom mathOperator (^)expressionAtom , { FROM, *, /, %, +, ,, -, }
From Condition <expressionAtom := (^)71expressionAtom> get package: 
mathOperator expressionAtom columnConstraint , { := FROM, *, 'PRIMARY_KEY'/ , %, (^)+, { , -,, , ,), , }PRIMARY_KEY
, columnNameNOT_NULL , := DEFAULT, (^)REFERENCES, 'ID'} 
'.'------------------------------------------------------------------------------- 
'ID'
 , { After tracing, got package:FROM
, columnConstraint* , := /, %, 'PRIMARY_KEY'+ , ,, (^)-, { , },, 
)constantNum,  PRIMARY_KEY:= , NOT_NULL(^), '-'DEFAULT , REFERENCESpositiveNum,  }
, { ===============================================================================FROM
, 
*, /, %, +, ,, -, }
expressionAtom := (^)constantNum , { FROM, *, /, %, +, -, ,, }
expressionAtom := (^)columnName , { FROM, *, /, %, +, -, ,, }
positiveNum := (^)'NUMBER_CONSTANT' , { FROM, *, /, %, +, -, ,, }
===============================================================================

SHIFT <71> by 'PRIMARY_KEY' to <73>
Condition<73>, REDUCE Production by ',': 
pid <24>: 
columnConstraint := 'PRIMARY_KEY' 
Condition<73>, REDUCE Production by ')': 
pid <24>: 
columnConstraint := 'PRIMARY_KEY' 
Condition<73>, REDUCE Production by 'PRIMARY_KEY': 
pid <24>: 
columnConstraint := 'PRIMARY_KEY' 
Condition<73>, REDUCE Production by 'NOT_NULL': 
pid <24>: 
columnConstraint := 'PRIMARY_KEY' 
Condition<73>, REDUCE Production by 'DEFAULT': 
pid <24>: 
columnConstraint := 'PRIMARY_KEY' 
Condition<73>, REDUCE Production by 'REFERENCES': 
pid <24>: 
columnConstraint := 'PRIMARY_KEY' 
From Condition <71> get package:
$__ann_32 := columnConstraint (^), { ,, PRIMARY_KEY, ), NOT_NULL, DEFAULT, REFERENCES, }
-------------------------------------------------------------------------------

After tracing, got package:
$__ann_32 := columnConstraint (^), { ,, PRIMARY_KEY, ), NOT_NULL, DEFAULT, REFERENCES, }
===============================================================================

SHIFT <69> by mathOperator to <74>.
SHIFT <71> by columnConstraint to <75>.
From Condition <74> get package:
columnName := 'ID' (^), { FROM, Condition<*75, >, REDUCE Production by '/, ,%': , 
+, pid <,18, >: 
-, $__ann_32} := 
columnConstraintcolumnName  := 
'ID' Condition<75(^)>, REDUCE Production by ''.'PRIMARY_KEY ': 
'ID'pid < 18, { >: 
FROM$__ann_32,  *:= , columnConstraint/ , 
%, Condition<+75, >, REDUCE Production by ',), ': -, 
}
pid <18>: 
-------------------------------------------------------------------------------$__ann_32 
:= columnConstraint
 
After tracing, got package:
Condition<75columnName>, REDUCE Production by ' NOT_NULL:= ': 
'ID'pid < 18(^)>: 
, { $__ann_32 FROM:= , columnConstraint* , 
/, Condition<%75, >, REDUCE Production by '+DEFAULT, ': ,, 
-pid <, 18}>: 

$__ann_32columnName  := := columnConstraint 'ID'
 Condition<(^)75'.'>, REDUCE Production by ' REFERENCES': 'ID'
 pid <18, { >: 
FROM$__ann_32,  *:= , columnConstraint/ , 
%, +, ,, -, }
===============================================================================

From Condition <71> get package:
createDefinition := 'ID' dataType $__ann_32 (^), { ,, ), }
$__ann_32 := $__ann_32 SHIFT <(^)74columnConstraint> by ' ID' to <76, { >
,, PRIMARY_KEY, ), NOT_NULL, DEFAULT, REFERENCES, }
-------------------------------------------------------------------------------
Condition<
76>, REDUCE Production by 'FROM': 
pid <68>: 
columnName := 'ID' 
Condition<76>, REDUCE Production by '*': 
pid <68>: 
columnName := 'ID' 
Condition<76>, REDUCE Production by '/': 
pid <68>: 
columnName := 'ID' 
Condition<76>, REDUCE Production by '%': 
pid <68>: 
columnName := 'ID' 
Condition<76>, REDUCE Production by '+': 
pid <68>: 
columnName := 'ID' 
Condition<76>, REDUCE Production by ',': 
pid <68>: 
columnName := 'ID' 
Condition<76>, REDUCE Production by '-': 
pid <68>: 
columnName := 'ID' 
From Condition <76> get package:
columnName := 'ID' '.' (^)'ID' , { FROM, *, /, %, +, ,, -, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID' '.' (^)'ID' , { FROM, *, /, %, +, ,, -, }
===============================================================================

After tracing, got package:
columnConstraint := (^)'NOT_NULL' , { ,, ), PRIMARY_KEY, NOT_NULL, DEFAULT, REFERENCES, }
columnConstraint := (^)'PRIMARY_KEY' , { ,, ), PRIMARY_KEY, NOT_NULL, DEFAULT, REFERENCES, }
createDefinition := 'ID' dataType $__ann_32 (^), { ,, ), }
columnConstraint := (^)'DEFAULT' expressionAtom , { ,, ), PRIMARY_KEY, NOT_NULL, DEFAULT, REFERENCES, }
columnConstraint := (^)'REFERENCES' tableName , { ,, ), PRIMARY_KEY, NOT_NULL, DEFAULT, REFERENCES, }
$__ann_32 := $__ann_32 (^)columnConstraint , { ,, PRIMARY_KEY, ), NOT_NULL, DEFAULT, REFERENCES, }
===============================================================================

SHIFT <76> by '.' to <77>
From Condition <77> get package:
columnName := 'ID' '.' 'ID' (^), { FROM, *, /, %, +, ,, -, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID' '.' 'ID' (^), { FROM, *, /, %, +, ,, -, }
===============================================================================

SHIFT <71> by $__ann_32 to <78>.
From Condition <78> get package:
columnConstraint := 'NOT_NULL' (^), { ,, ), PRIMARY_KEYSHIFT <, 77NOT_NULL> by ', IDDEFAULT' to <, 79REFERENCES>, 
}
-------------------------------------------------------------------------------

Condition<After tracing, got package:79
>, REDUCE Production by 'columnConstraintFROM ': := 
'NOT_NULL'pid <67 >: 
columnName(^) , { := ,, 'ID') , '.'PRIMARY_KEY , 'ID'NOT_NULL , 
DEFAULT, Condition<79REFERENCES>, REDUCE Production by ', *}': 

pid <===============================================================================67
>: 
columnName
 := 'ID' '.' 'ID' 
Condition<79>, REDUCE Production by '/': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<79>, REDUCE Production by '%': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<79>, REDUCE Production by '+': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<79>, REDUCE Production by ',': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<79>, REDUCE Production by '-': 
pid <67>: 
columnName SHIFT <:= 78'ID'> by ' NOT_NULL'.'' to < 72'ID'> 

This condition already existed.
From Condition <78> get package:
columnConstraint := 'PRIMARY_KEY' (^), { ,, ), PRIMARY_KEY, NOT_NULL, DEFAULT, REFERENCES, }
-------------------------------------------------------------------------------

From Condition <After tracing, got package:
74columnConstraint> get package: := 
'PRIMARY_KEY' constantNum(^) , { := ,, positiveNum) , PRIMARY_KEY, (^)NOT_NULL, { , DEFAULT, FROMREFERENCES, , *}, 
/===============================================================================, 
%, 
+, ,, -, }
-------------------------------------------------------------------------------

After tracing, got package:
constantNum := positiveNum (^), { FROM, *, /, %, +, ,, -, }
===============================================================================

SHIFT <78> by 'PRIMARY_KEY' to <73>
This condition already existed.
Condition<78>, REDUCE Production by ',': 
pid <16>: 
createDefinition := 'ID' dataType $__ann_32 
Condition<78>, REDUCE Production by ')': 
pid <16>: 
createDefinition := 'ID' dataType $__ann_32 
SHIFT <74> by positiveNum to <80>.
Condition<80>, REDUCE Production by 'FROM': 
pid <78>: 
constantNum := positiveNum 
From Condition <Condition<8078>, REDUCE Production by '> get package:*': 

columnConstraintpid < 78:= >: 
constantNum := 'DEFAULT'positiveNum  (^)
expressionAtom Condition<80, { >, REDUCE Production by '/,': , 
)pid <78, >: 
PRIMARY_KEYconstantNum,  NOT_NULL:= , positiveNumDEFAULT , 
REFERENCES, Condition<80}>, REDUCE Production by '%
': 
-------------------------------------------------------------------------------pid <78
>: 
constantNum
 := positiveNum 
Condition<80>, REDUCE Production by '+': 
pid <78>: 
constantNum := positiveNum 
Condition<80>, REDUCE Production by ',': 
pid <78>: 
constantNum := positiveNum 
Condition<80>, REDUCE Production by '-': 
pid <78>: 
constantNum := positiveNum 
From Condition <74> get package:
expressionAtom := 'STR_LITERAL' (^), { FROM, *, /, %, +, -, ,, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := 'STR_LITERAL' (^), { FROM, *, /, %, +, -, ,, }
===============================================================================

SHIFT <74> by 'STR_LITERAL' to <81>
Condition<81>, REDUCE Production by 'FROM': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<81>, REDUCE Production by '*': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<81>, REDUCE Production by '/': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<81>, REDUCE Production by '%': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<81>, REDUCE Production by '+': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<81>, REDUCE Production by '-': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<81>, REDUCE Production by ',': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
From Condition <74> get package:
expressionAtom := expressionAtom (^)mathOperator expressionAtom , { FROM, *, /, %, +, -, ,, }
expressionAtom := expressionAtom mathOperator expressionAtom (^), { FROM, *, /, %, +, ,, -, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := (^)'*' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'%' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'-' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
expressionAtom := expressionAtom (^)mathOperator expressionAtom , { FROM, *, /, %, +, -, ,, }
expressionAtom := expressionAtom mathOperator expressionAtom (^), { FROM, *, /, %, +, ,, -, }
mathOperator := (^)'/' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'+' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <74> by expressionAtom to <82>.
From Condition <82> get package:
mathOperator := '*' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '*' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <82> by '*' to <33>
This condition already existed.
From Condition <After tracing, got package:82
> get package:
columnName := mathOperator (^):= 'ID' '%' '.' (^), { 'ID' STR_LITERAL, , { ID, ,-, , )NUMBER_CONSTANT, , PRIMARY_KEY}, 
NOT_NULL, -------------------------------------------------------------------------------DEFAULT
, 
REFERENCES, *After tracing, got package:, 
/, mathOperator% , := +, -'%',  }
(^), { constantNum STR_LITERAL:= , ID(^), '-'- , NUMBER_CONSTANTpositiveNum,  }
, { ===============================================================================
,
, ), PRIMARY_KEY, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
expressionAtom := (^)constantNum , { ,, PRIMARY_KEY, ), NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
expressionAtom := (^)columnName , { ,, PRIMARY_KEY, ), NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
columnConstraint := 'DEFAULT' (^)expressionAtom , { ,, ), PRIMARY_KEY, NOT_NULL, DEFAULT, REFERENCES, }
columnName := (^)'ID' , { ,, ), PRIMARY_KEY, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
constantNum := (^)positiveNum , { ,, ), PRIMARY_KEY, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
SHIFT <expressionAtom82 > by ':= %' to <26(^)>
'STR_LITERAL'This condition already existed. 
, { ,, PRIMARY_KEY, ), NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
expressionAtom := (^)expressionAtom mathOperator expressionAtom , { ,, PRIMARY_KEY, ), NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
positiveNum := (^)'NUMBER_CONSTANT' , { ,, PRIMARY_KEY, ), NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
===============================================================================

From Condition <82> get package:
mathOperator := '-' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '-' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <78> by 'DEFAULT' to <83>
SHIFT <82From Condition <> by '-' to <3483>> get package:

This condition already existed.
columnName := 'ID' (^)'.' 'ID' , { ,, ), PRIMARY_KEY, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
columnName := 'ID' (^), { ,, ), PRIMARY_KEY, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID' (^)'.' 'ID' , { ,, ), PRIMARY_KEY, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
columnName := 'ID' (^), { ,, ), PRIMARY_KEY, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
From Condition <===============================================================================
82
> get package:
expressionAtom := expressionAtom mathOperator (^)expressionAtom , { FROM, *, /, %, +, -, ,, }
-------------------------------------------------------------------------------

SHIFT <83> by 'ID' to <84>
From Condition <84> get package:
columnName := 'ID' '.' (^)'ID' , { ,, ), PRIMARY_KEY, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID' '.' (^)'ID' , { ,, ), PRIMARY_KEY, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
===============================================================================

SHIFT <84> by '.' to <85>
From Condition <85> get package:
columnName := 'ID' '.' 'ID' (^), { ,, ), PRIMARY_KEY, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID' '.' 'ID' (^), { ,, ), PRIMARY_KEY, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
===============================================================================

SHIFT <85> by 'ID' to <86>
Condition<86>, REDUCE Production by ',': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<86>, REDUCE Production by ')': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<86>, REDUCE Production by 'PRIMARY_KEY': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<86>, REDUCE Production by 'NOT_NULL': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<86>, REDUCE Production by 'DEFAULT': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<86>, REDUCE Production by 'REFERENCES': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<86>, REDUCE Production by '*': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<86>, REDUCE Production by '/': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<86>, REDUCE Production by '%': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<86>, REDUCE Production by '+': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<86>, REDUCE Production by '-': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<84>, REDUCE Production by ',': 
pid <68>: 
columnName := 'ID' 
Condition<84>, REDUCE Production by ')': 
pid <68>: 
columnName := 'ID' 
Condition<84>, REDUCE Production by 'PRIMARY_KEY': 
pid <68>: 
columnName := 'ID' 
Condition<84>, REDUCE Production by 'NOT_NULL': 
pid <68>: 
columnName := 'ID' 
Condition<84>, REDUCE Production by 'DEFAULT': 
pid <68>: 
columnName := 'ID' 
Condition<84>, REDUCE Production by 'REFERENCES': 
pid <68>: 
columnName := 'ID' 
Condition<84>, REDUCE Production by '*': 
pid <68>: 
columnName := 'ID' 
Condition<84>, REDUCE Production by '/': 
pid <68>: 
columnName := 'ID' 
Condition<84>, REDUCE Production by '%': 
pid <68>: 
columnName := 'ID' 
Condition<84>, REDUCE Production by '+': 
pid <68>: 
columnName := 'ID' 
Condition<84>, REDUCE Production by '-': 
pid <68>: 
columnName := 'ID' 
After tracing, got package:
columnName := (^)'ID' , { FROM, *, /, %From Condition <, +, -, 83,> get package:, }

constantNumconstantNum  := := (^)'-'positiveNum  (^)positiveNum, {  FROM, , { *, ,/, , )%, , PRIMARY_KEY+, , NOT_NULL-, , DEFAULT,, , REFERENCES}, 
*, expressionAtom/ , := %, (^)+, 'STR_LITERAL'- , }, { 
FROM-------------------------------------------------------------------------------, 
*
, /, %, +, ,, -, }
expressionAtom := expressionAtom mathOperator (^)expressionAtom , { FROM, *, /, %, +, -, ,, }
expressionAtom := (^)expressionAtom mathOperator expressionAtom , { FROM, *, /, %, +, ,, -, }
columnName := (^)'ID' '.' 'ID' , { FROM, *, /, %, +, -, ,, }
constantNum := (^)'-' positiveNum , { FROM, *, /, %, +, -, ,, }
expressionAtom := (^)constantNum , { FROM, *, /, %, +, ,, -, }
expressionAtom := (^)columnName , { FROM, *, /, %, +, ,, -, }
positiveNum := (^)'NUMBER_CONSTANT' , { FROM, *, /, %, +, ,, -, }
===============================================================================

After tracing, got package:
positiveNum := (^)'NUMBER_CONSTANT' , { ,, PRIMARY_KEY, ), NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
constantNum := '-' (^)positiveNum , { ,, ), PRIMARY_KEY, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
===============================================================================

SHIFT <82> by mathOperator to <87>.
From Condition <87> get package:
columnName := 'ID' (^), { FROM, *, /, %, +, -, ,, }
columnName := 'ID' (^)'.' 'ID' , { FROM, *, /, %, +, SHIFT <-83, > by ',, -}' to <88
>
-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID' (^), { FROM, *, /, %, +, -, ,, }
columnName := 'ID' (^)'.' 'ID' , { FROM, *, /, %, +, -, ,, }
===============================================================================

From Condition <88> get package:
positiveNum := 'NUMBER_CONSTANT' (^), { ,, PRIMARY_KEY, ), NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := 'NUMBER_CONSTANT' (^), { ,, PRIMARY_KEY, ), NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
===============================================================================

SHIFT <87> by 'ID' to <89>
Condition<89>, REDUCE Production by 'FROM': 
pid <68>: 
columnName := 'ID' 
Condition<89>, REDUCE Production by '*': 
pid <68>: 
columnName := 'ID' 
Condition<89>, REDUCE Production by '/': 
pid <68>: 
columnName := 'ID' 
Condition<89>, REDUCE Production by '%': 
SHIFT <pid <6888>: 
> by 'columnNameNUMBER_CONSTANT ' to <90:= >'ID'
 
Condition<89>, REDUCE Production by '+': 
Condition<pid <9068>, REDUCE Production by '>: 
,columnName':  
:= 'ID'pid <79 >: 

positiveNum Condition<:= 89'NUMBER_CONSTANT'>, REDUCE Production by ' -': 

Condition<pid <9068>, REDUCE Production by '>: 
PRIMARY_KEYcolumnName':  := 
'ID'pid < 79
>: 
positiveNumCondition< 89:= >, REDUCE Production by ',': 'NUMBER_CONSTANT'
 
pid <68Condition<>: 
90columnName>, REDUCE Production by ' ):= ': 
'ID'pid < 79
>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<90>, REDUCE Production by 'NOT_NULL': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<90>, REDUCE Production by 'DEFAULT': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<90>, REDUCE Production by 'REFERENCES': 
pid <79From Condition <>: 
positiveNum := 89'NUMBER_CONSTANT'> get package: 

columnNameCondition< 90:= >, REDUCE Production by '*': 
'ID'pid <79 >: 
positiveNum'.'  := (^)'ID''NUMBER_CONSTANT'  
, { Condition<90FROM>, REDUCE Production by ', /*': , 
/pid <79, >: 
%positiveNum,  +:= , -, 'NUMBER_CONSTANT', , 
}
Condition<-------------------------------------------------------------------------------90
>, REDUCE Production by '
%': 
After tracing, got package:pid <79
>: 
columnNamepositiveNum  := := 'ID''NUMBER_CONSTANT'  
'.' Condition<90(^)>, REDUCE Production by ''ID'+ ': 
, { pid <79FROM>: 
, positiveNum* , := /, %'NUMBER_CONSTANT',  +
, -Condition<, 90,>, REDUCE Production by ', -}': 

pid <79===============================================================================>: 

positiveNum
 := 'NUMBER_CONSTANT' 
SHIFT <89From Condition <> by '.' to <9188>> get package:

constantNum := '-' positiveNum (^), { ,, ), PRIMARY_KEY, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
constantNum := '-' positiveNum (^), { ,, ), PRIMARY_KEY, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, From Condition <-, }
91===============================================================================> get package:


columnName := 'ID' '.' 'ID' (^), { FROM, *, /, %, +, -, ,, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID' '.' 'ID' (^), { FROM, *, /, %, +, -, ,, }
===============================================================================

SHIFT <88> by positiveNum to <92>.
Condition<92>, REDUCE Production by ',': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<92>, REDUCE Production by ')': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<92>, REDUCE Production by 'PRIMARY_KEY': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<92>, REDUCE Production by 'NOT_NULL': 
SHIFT <pid <9177> by '>: 
IDconstantNum' to <93 >:= 
'-' positiveNum 
Condition<92>, REDUCE Production by 'DEFAULT': 
Condition<pid <9377>, REDUCE Production by '>: 
FROMconstantNum':  
:= pid <'-'67 >: 
positiveNum columnName
 := Condition<92'ID'>, REDUCE Production by ' REFERENCES'.'':  
'ID'pid < 77
>: 
constantNum := Condition<93'-'>, REDUCE Production by ' positiveNum* ': 

Condition<92pid <>, REDUCE Production by '67*>: 
': columnName 
:= 'ID'pid < 77'.'>: 
 constantNum'ID'  := 
'-' Condition<positiveNum93 >, REDUCE Production by '
/': Condition<92
>, REDUCE Production by 'pid </67': >: 

columnNamepid <77 >: 
:= constantNum 'ID':=  '.''-'  'ID'positiveNum  

Condition<93Condition<>, REDUCE Production by '92%>, REDUCE Production by '': %
': 
pid <67pid <>: 
77columnName>: 
 constantNum:=  := 'ID''-'  '.'positiveNum  'ID'
 Condition<
92Condition<93>, REDUCE Production by '>, REDUCE Production by '++': ': 

pid <77pid <>: 
67constantNum>: 
 columnName:=  := '-' 'ID'positiveNum  '.'
 'ID'Condition< 92
>, REDUCE Production by '-': Condition<
93pid <77>, REDUCE Production by '>: 
-constantNum':  
:= pid <67'-'>: 
 columnNamepositiveNum  := 
'ID' '.' 'ID' 
Condition<93>, REDUCE Production by ',': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
From Condition <83> get package:
expressionAtom := constantNum (^), { ,, PRIMARY_KEY, ), NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
-------------------------------------------------------------------------------

From Condition <After tracing, got package:
87expressionAtom> get package: := 
constantNum (^), { constantNum ,:= , PRIMARY_KEY, positiveNum) , NOT_NULL, (^)DEFAULT, { , REFERENCES, FROM*, , */, , /%, , %+, , +-, , -}, 
,===============================================================================, }


-------------------------------------------------------------------------------

After tracing, got package:
constantNum := positiveNum (^), { FROM, *, /, %, +, -, ,, }
===============================================================================

SHIFT <83> by constantNum to <94>.
Condition<94>, REDUCE Production by ',': 
pid <73>: 
expressionAtom := constantNum 
Condition<94>, REDUCE Production by 'PRIMARY_KEY': 
pid <73>: 
expressionAtom := constantNum 
Condition<94>, REDUCE Production by ')': 
pid <73>: 
expressionAtom := constantNum 
SHIFT <Condition<8794> by >, REDUCE Production by 'positiveNumNOT_NULL to <95': >.

pid <73>: 
expressionAtom := constantNum 
Condition<94>, REDUCE Production by 'DEFAULTCondition<': 95
>, REDUCE Production by 'FROMpid <': 73
>: 
pid <78expressionAtom>: 
 := constantNum constantNum:=  positiveNum
 
Condition<94Condition<95>, REDUCE Production by '>, REDUCE Production by 'REFERENCES*': ': 

pid <73pid <>: 
78expressionAtom>: 
 constantNum:=  := constantNum positiveNum 

Condition<94Condition<95>, REDUCE Production by '>, REDUCE Production by '*/': ': 

pid <pid <7378>: 
>: 
expressionAtomconstantNum  := := constantNumpositiveNum  

Condition<94Condition<>, REDUCE Production by '95/>, REDUCE Production by '': %
': pid <73
>: 
expressionAtompid < 78:= >: 
constantNumconstantNum  
:= positiveNum Condition<94
>, REDUCE Production by 'Condition<95%>, REDUCE Production by '': +': 

pid <pid <7378>: 
>: 
expressionAtomconstantNum  := := constantNumpositiveNum  

Condition<95Condition<>, REDUCE Production by '94->, REDUCE Production by '': +
': 
pid <78pid <>: 
73constantNum>: 
 := expressionAtompositiveNum  := 
constantNum Condition<95
>, REDUCE Production by ',': Condition<
94>, REDUCE Production by 'pid <78->: 
': constantNum
 pid <:= 73positiveNum>: 
 expressionAtom 
:= constantNum 
From Condition <87> get package:
From Condition <expressionAtom := 83> get package:
'STR_LITERAL' expressionAtom (^):= , { FROMcolumnName,  *, (^)/, { , %,, , +PRIMARY_KEY, , ,), , -NOT_NULL, , }DEFAULT, 
REFERENCES-------------------------------------------------------------------------------, 
*
, /, After tracing, got package:%
, +expressionAtom,  -:= , }
'STR_LITERAL'------------------------------------------------------------------------------- 
(^)
, { FROMAfter tracing, got package:, 
*, expressionAtom/ , := %, +columnName,  ,, (^)-, { , },, 
PRIMARY_KEY===============================================================================, 
)
, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
===============================================================================

SHIFT <87> by 'STR_LITERAL' to <96>
Condition<96>, REDUCE Production by 'FROM': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<96>, REDUCE Production by '*': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<96>, REDUCE Production by '/': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<96>, REDUCE Production by '%': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
SHIFT <Condition<8396> by >, REDUCE Production by 'columnName+ to <': 97
>.pid <74
>: 
expressionAtom := 'STR_LITERAL' 
Condition<96>, REDUCE Production by ',': 
Condition<pid <9774>, REDUCE Production by '>: 
,expressionAtom':  := 
'STR_LITERAL'pid <75 >: 

expressionAtom Condition<96:= >, REDUCE Production by 'columnName- ': 

pid <74Condition<97>: 
>, REDUCE Production by 'expressionAtomPRIMARY_KEY ': := 
'STR_LITERAL'pid <75 >: 

expressionAtom := columnName 
Condition<97>, REDUCE Production by ')': 
pid <75>: 
expressionAtom := columnName 
Condition<97>, REDUCE Production by 'NOT_NULL': 
pid <75>: 
expressionAtom := columnName 
Condition<97>, REDUCE Production by 'DEFAULT': 
pid <75>: 
expressionAtom := columnName 
Condition<97>, REDUCE Production by 'REFERENCES': 
pid <75>: 
expressionAtom := columnName 
Condition<97>, REDUCE Production by '*': 
pid <75>: 
expressionAtom := columnName 
Condition<97>, REDUCE Production by '/': 
From Condition <pid <7587>: 
> get package:expressionAtom 
:= columnName 
expressionAtom Condition<:= 97expressionAtom>, REDUCE Production by ' %': (^)
mathOperatorpid < 75expressionAtom>: 
 expressionAtom := , { columnName FROM
, Condition<*97, >, REDUCE Production by '/+, ': %
, pid <+75, >: 
,expressionAtom,  := columnName- , 
}Condition<
97expressionAtom>, REDUCE Production by ' -:= ': 
expressionAtompid < 75mathOperator>: 
 expressionAtom := expressionAtom columnName (^)
, { FROM, *, /, %, +, -, ,, }
-------------------------------------------------------------------------------

From Condition <83> get package:
columnConstraint := 'DEFAULT' expressionAtom (^), { ,, ), PRIMARY_KEY, NOT_NULL, DEFAULT, REFERENCES, }
expressionAtom := expressionAtom (^)mathOperator expressionAtom , { ,, PRIMARY_KEY, ), NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := (^)'*' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'%' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'-' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
expressionAtom := expressionAtom (^)mathOperator expressionAtom , { FROM, *, /, %, +, ,, -, }
expressionAtom := expressionAtom mathOperator expressionAtom (^), { FROM, *, /, %, +, -, ,, }
mathOperator := (^)'/' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'+' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

After tracing, got package:
mathOperator := (^)'/' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'+' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
columnConstraint := 'DEFAULT' expressionAtom (^), { ,, ), PRIMARY_KEY, NOT_NULL, DEFAULT, REFERENCES, }
mathOperator := (^)'*' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'%' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'-' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
expressionAtom := expressionAtom (^)mathOperator expressionAtom , { ,, PRIMARY_KEY, ), NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
===============================================================================

SHIFT <87> by expressionAtom to <98>.
From Condition <98> get package:
mathOperator := '*' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '*' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <83> by expressionAtom to <99>.
From Condition <99> get package:
mathOperator := '/' (^)SHIFT <, { 98STR_LITERAL> by ', *ID' to <, 33->, 
NUMBER_CONSTANTThis condition already existed., 
}
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '/' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

From Condition <98> get package:
mathOperator := '%' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '%' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
SHIFT <===============================================================================99
> by '
/' to <40>
This condition already existed.
SHIFT <98> by '%' to <26From Condition <>
99This condition already existed.> get package:

mathOperator := '+' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '+' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

From Condition <98> get package:
mathOperator := '-' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '-' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <99> by '+' to <41>
This condition already existed.
Condition<99>, REDUCE Production by ',': 
pid <23>: 
columnConstraint := 'DEFAULT' expressionAtom 
Condition<99>, REDUCE Production by ')': 
pid <23SHIFT <>: 
98columnConstraint> by ' -:= ' to <34'DEFAULT'> 
expressionAtomThis condition already existed. 

Condition<99>, REDUCE Production by 'PRIMARY_KEY': 
pid <23>: 
columnConstraint := 'DEFAULT' expressionAtom 
Condition<99>, REDUCE Production by 'NOT_NULL': 
pid <23>: 
columnConstraint := 'DEFAULT' expressionAtom 
Condition<99>, REDUCE Production by 'DEFAULT': 
pid <23>: 
columnConstraint := 'DEFAULT' expressionAtom 
Condition<99>, REDUCE Production by 'REFERENCES': 
pid <23>: 
columnConstraint := 'DEFAULT' From Condition <expressionAtom 
98> get package:
expressionAtom := expressionAtom mathOperator (^)expressionAtom , { FROM, *, /, %, +, ,, -, }
-------------------------------------------------------------------------------

From Condition <99> get package:
mathOperator := '*' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '*' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <99> by '*' to <33>
This condition already existed.
From Condition <99> get package:
mathOperator := '%' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '%' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <99> by '%' to <26>
This condition already existed.
From Condition <99> get package:
mathOperator := '-' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '-' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <99> by '-' to <34>
This condition already existed.
From Condition <99> get package:
expressionAtom := expressionAtom mathOperator (^)expressionAtom , { ,, PRIMARY_KEY, ), NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := (^)'ID' , { FROM, *, /, %, +, ,, -, }
constantNum := (^)positiveNum , { FROM, *, /, %, +, ,, -, }
expressionAtom := (^)'STR_LITERAL' , { FROM, *, /, %, +, -, ,, }
expressionAtom := expressionAtom mathOperator (^)expressionAtom , { FROM, *, /, %, +, ,, -, }
expressionAtom := (^)expressionAtom mathOperator expressionAtom , { FROM, *, /, %, +, -, ,, }
columnName := (^)'ID' '.' 'ID' , { FROM, *, /, %, +, ,, -, }
constantNum := (^)'-' positiveNum , { FROM, *, /, %, +, ,, -, }
expressionAtom := (^)constantNum , { FROM, *, /, %, +, -, ,, }
expressionAtom := (^)columnName , { FROM, *, /, %, +, -, ,, }
positiveNum := (^)'NUMBER_CONSTANT' , { FROM, *, /, %, +, -, ,, }
===============================================================================

SHIFT <98> by mathOperator to <74>.
This condition already existed.
Condition<98>, REDUCE Production by 'FROM': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Already existed SHIFT by symbol'*' :
<33>
Try to set it to: REDUCE to:
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Reset Action[98]['*'] to REDUCE:
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Condition<98>, REDUCE Production by '/': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Already existed SHIFT by symbol'%' :
<26>
Try to set it to: REDUCE to:
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Reset Action[98]['%'] to REDUCE:
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Condition<98>, REDUCE Production by '+': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Already existed SHIFT by symbol'-' :
<34>
Try to set it to: REDUCE to:
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Reset Action[98]['-'] to REDUCE:
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Condition<98>, REDUCE Production by ',': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
From Condition <98> get package:
mathOperator := '/' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '/' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

After tracing, got package:
columnName := (^)'ID' , { ,, PRIMARY_KEY, ), NOT_NULL, DEFAULT, REFERENCES, *, /Already existed REDUCE by symbol ', /%': , +
, -, pid <76}>: 

expressionAtomconstantNum  := := expressionAtom (^)mathOperatorpositiveNum  expressionAtom , { 
,Try to set it to: SHIFT to <, 40PRIMARY_KEY>, 
), NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
expressionAtom Set SHIFT fail in: from condition <:= 98(^)> to condition <40'STR_LITERAL'>. 
, { This condition already existed.,
, ), PRIMARY_KEY, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
expressionAtom := expressionAtom mathOperator (^)expressionAtom , { ,, PRIMARY_KEY, ), NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
expressionAtom := (^)expressionAtom mathOperator expressionAtom , { ,, ), PRIMARY_KEY, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
columnName := (^)'ID' '.' 'ID' , { ,, PRIMARY_KEY, ), NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
From Condition <constantNum := 98(^)> get package:'-' 
positiveNum , { mathOperator, , := PRIMARY_KEY, ), '+'NOT_NULL , DEFAULT, (^)REFERENCES, { , *STR_LITERAL, , /ID, , %-, , +NUMBER_CONSTANT, , -}, }

-------------------------------------------------------------------------------expressionAtom 
:= 
(^)constantNum After tracing, got package:
, { mathOperator, , := ), PRIMARY_KEY'+',  NOT_NULL, DEFAULT(^), , { REFERENCES, STR_LITERAL*, , ID/, , -%, , NUMBER_CONSTANT+, , }-, 
}===============================================================================

expressionAtom
 := (^)columnName , { ,, ), PRIMARY_KEY, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
positiveNum := (^)'NUMBER_CONSTANT' , { ,, ), PRIMARY_KEY, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
===============================================================================

Already existed REDUCE by symbol '+': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Try to set it to: SHIFT to <41>
Set SHIFT fail in: from condition <98> to condition <41>.
This condition already existed.
From Condition <87> get package:
constantNum := '-' (^)positiveNum , { FROM, *, /, %, +, -, ,, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := (^)'NUMBER_CONSTANT' , { FROM, *, /, %, +, ,, -, }
constantNum := '-' (^)positiveNum , { FROM, *, /, %, +, -, ,, }
===============================================================================

SHIFT <99> by mathOperator to <100>.
From Condition <100> get package:
columnName := 'ID' (^), { ,, PRIMARY_KEY, ), NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
SHIFT <columnName87 > by ':= -' to <'ID'101 >(^)
'.' 'ID' , { ,, PRIMARY_KEY, ), NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID' (^), { ,, PRIMARY_KEY, ), NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
columnName := 'ID' (^)'.' 'ID' , { ,, PRIMARY_KEY, From Condition <), NOT_NULL, DEFAULT, 101REFERENCES> get package:, *
, /, %, positiveNum+ , := -, }
'NUMBER_CONSTANT'=============================================================================== 
(^)
, { FROM, *, /, %, +, ,, -, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := 'NUMBER_CONSTANT' (^), { FROM, *, /, %, +, ,, -, }
===============================================================================

SHIFT <100> by 'ID' to <102>
Condition<102>, REDUCE Production by ',': 
pid <68>: 
columnName := 'ID' 
Condition<102>, REDUCE Production by 'PRIMARY_KEY': 
pid <68>: 
columnName := 'ID' 
SHIFT <Condition<101102> by '>, REDUCE Production by 'NUMBER_CONSTANT)' to <103': >

pid <68>: 
columnName := 'ID' 
Condition<103Condition<102>, REDUCE Production by '>, REDUCE Production by 'FROMNOT_NULL': ': 

pid <79pid <>: 
68positiveNum>: 
 := columnName := 'NUMBER_CONSTANT''ID'  

Condition<103Condition<>, REDUCE Production by '102*>, REDUCE Production by '': 
DEFAULT': pid <79
>: 
positiveNum := pid <'NUMBER_CONSTANT'68 >: 

columnNameCondition< 103:= >, REDUCE Production by '/': 'ID'
 pid <
79Condition<>: 
102positiveNum>, REDUCE Production by ' REFERENCES:= ': 
'NUMBER_CONSTANT'pid < 68
>: 
columnName Condition<:= 103'ID'>, REDUCE Production by ' %
': Condition<102
>, REDUCE Production by '*pid <': 79
>: 
pid <68positiveNum>: 
 := columnName := 'NUMBER_CONSTANT''ID'  

Condition<103Condition<>, REDUCE Production by '102+>, REDUCE Production by '': /
': pid <79
>: 
pid <68positiveNum>: 
 columnName:=  := 'NUMBER_CONSTANT''ID'  

Condition<103Condition<102>, REDUCE Production by '>, REDUCE Production by ',%': ': 

pid <pid <7968>: 
>: 
positiveNumcolumnName  := := 'ID''NUMBER_CONSTANT'  

Condition<102Condition<103>, REDUCE Production by '>, REDUCE Production by '+-': ': 

pid <68pid <>: 
79columnName>: 
 positiveNum:=  := 'ID' 'NUMBER_CONSTANT'
 
Condition<102>, REDUCE Production by '-': 
pid <68>: 
columnName := 'ID' 
From Condition <From Condition <101> get package:102
> get package:
constantNum := columnName'-'  := positiveNum 'ID'(^) , { '.'FROM , (^)*'ID',  /, , { %, ,+, , PRIMARY_KEY-, , ),, , NOT_NULL}, 
DEFAULT-------------------------------------------------------------------------------, 
REFERENCES, 
*, /After tracing, got package:, 
%, constantNum+ , := -, }'-' 
positiveNum------------------------------------------------------------------------------- 
(^)
, { FROM, *, /, %, +, After tracing, got package:-, ,, 
}
columnName=============================================================================== 
:= 
'ID' '.' (^)'ID' , { ,, PRIMARY_KEY, ), NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
===============================================================================

SHIFT <101> by positiveNum to <104>.
Condition<104>, REDUCE Production by 'FROM': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<104>, REDUCE Production by '*': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<104>, REDUCE Production by '/': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<104>, REDUCE Production by '%': 
pid <77>: 
constantNum := '-' positiveNum 
SHIFT <Condition<102104> by '>, REDUCE Production by '.+' to <': 105
>pid <77
>: 
constantNum := '-' positiveNum 
Condition<104>, REDUCE Production by '-': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<104>, REDUCE Production by ',': 
pid <77>: 
constantNum := '-' positiveNum 
From Condition <105> get package:
columnName := 'ID' '.' 'ID' (^), { ,, PRIMARY_KEY, ), NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID' '.' 'ID' (^), { ,, PRIMARY_KEY, ), NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
===============================================================================

From Condition <87> get package:
expressionAtom := constantNum (^), { FROM, *, /, %, +, ,, -, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := constantNum (^), { FROM, *, /, %, +, ,, -, }
===============================================================================

SHIFT <105> by 'ID' to <106>
Condition<106>, REDUCE Production by ',': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<106>, REDUCE Production by 'PRIMARY_KEY': 
pid <67SHIFT <>: 
87columnName> by  constantNum:=  to <107'ID'>. 
'.' 'ID' 
Condition<106>, REDUCE Production by ')': 
Condition<pid <10767>, REDUCE Production by '>: 
FROM': columnName 
:= pid <73'ID'>: 
 expressionAtom'.'  := 'ID'constantNum  

Condition<106Condition<>, REDUCE Production by '107NOT_NULL>, REDUCE Production by '': *': 

pid <67pid <>: 
73columnName>: 
 expressionAtom:=  := 'ID'constantNum  '.'
 'ID' Condition<107
>, REDUCE Production by '/': Condition<106
>, REDUCE Production by 'DEFAULTpid <': 73
>: 
expressionAtompid < 67:= >: 
constantNumcolumnName  := 
'ID' Condition<107'.'>, REDUCE Production by ' %': 'ID'
 
pid <73Condition<>: 
106expressionAtom>, REDUCE Production by ' REFERENCES:= ': constantNum
 
pid <67Condition<>: 
107columnName>, REDUCE Production by ' +:= ': 
'ID' pid <73'.'>: 
 expressionAtom'ID'  := 
constantNum Condition<106
>, REDUCE Production by '*': Condition<
107>, REDUCE Production by 'pid <,67': >: 

columnNamepid < 73:= >: 
expressionAtom'ID'  := '.'constantNum  'ID'
 
Condition<107Condition<>, REDUCE Production by '106->, REDUCE Production by '': /': 

pid <73pid <>: 
67expressionAtom>: 
 columnName:=  := constantNum 'ID'
 '.' 'ID' 
Condition<106>, REDUCE Production by '%': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<106>, REDUCE Production by '+': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<106>, REDUCE Production by '-': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
From Condition <87> get package:
expressionAtom := columnName (^), { FROM, *, /, %, +, ,, -, }
-------------------------------------------------------------------------------

After tracing, got package:
From Condition <expressionAtom := 100columnName> get package: 
(^), { FROMconstantNum,  *:= , /, positiveNum %, +(^), , { ,, ,-, , PRIMARY_KEY}, 
)===============================================================================, 
NOT_NULL
, DEFAULT, REFERENCES, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
constantNum := positiveNum (^), { ,, PRIMARY_KEY, ), NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
===============================================================================

SHIFT <87> by columnName to <108>.
Condition<108>, REDUCE Production by 'FROM': 
pid <75>: 
expressionAtom := columnName 
Condition<108>, REDUCE Production by '*': 
pid <75>: 
expressionAtom := columnName 
Condition<108>, REDUCE Production by '/': 
pid <75>: 
expressionAtom := columnName 
Condition<108>, REDUCE Production by '%': 
SHIFT <pid <10075> by >: 
positiveNumexpressionAtom to < 109:= >.columnName
 
Condition<108>, REDUCE Production by '+': 
Condition<pid <10975>, REDUCE Production by '>: 
,': expressionAtom 
:= pid <78columnName>: 
 constantNum
 := Condition<positiveNum108 >, REDUCE Production by '
,': 
Condition<109pid <>, REDUCE Production by '75PRIMARY_KEY>: 
': expressionAtom
 := pid <78columnName>: 
 constantNum
 := Condition<positiveNum108 >, REDUCE Production by '
-': Condition<
109>, REDUCE Production by 'pid <)75': >: 

expressionAtompid < 78:= >: 
columnNameconstantNum  := 
positiveNum 
Condition<109>, REDUCE Production by 'NOT_NULL': 
pid <78>: 
constantNum := positiveNum 
Condition<109>, REDUCE Production by 'DEFAULT': 
pid <78>: 
constantNum := positiveNum 
Condition<109>, REDUCE Production by 'REFERENCES': 
pid <78>: 
constantNum := positiveNum 
Condition<109>, REDUCE Production by '*': 
pid <78>: 
constantNum := positiveNum 
Condition<109>, REDUCE Production by '/': 
pid <78From Condition <>: 
constantNum := positiveNum87 > get package:

Condition<109positiveNum>, REDUCE Production by ' %:= ': 
'NUMBER_CONSTANT'pid < 78(^)>: 
, { constantNum := FROMpositiveNum,  *
, /, Condition<109%>, REDUCE Production by ', +': +
, ,pid <, 78->: 
, constantNum} := 
positiveNum------------------------------------------------------------------------------- 


After tracing, got package:Condition<109
>, REDUCE Production by '-positiveNum':  
:= 'NUMBER_CONSTANT'pid < 78(^)>: 
, { constantNum FROM:= , positiveNum* , 
/, %, +, ,, -, }
===============================================================================

From Condition <100> get package:
expressionAtom := 'STR_LITERAL' (^), { ,, ), PRIMARY_KEY, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
SHIFT <expressionAtom87 > by ':= NUMBER_CONSTANT' to <103'STR_LITERAL'> 
(^)This condition already existed., { 
,, ), PRIMARY_KEY, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
===============================================================================

Condition<82>, REDUCE Production by 'FROM': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Already existed SHIFT by symbol'*' :
<33SHIFT <>100
> by 'STR_LITERALTry to set it to: REDUCE to:' to <110
>
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Condition<110>, REDUCE Production by ',': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Reset Action[82Condition<]['110*>, REDUCE Production by ''] to REDUCE:)': 

pid <76pid <>: 
74expressionAtom>: 
 expressionAtom:=  := expressionAtom mathOperator'STR_LITERAL'  expressionAtom 

Condition<110Condition<>, REDUCE Production by '82PRIMARY_KEY>, REDUCE Production by '': /': 

pid <74pid <>: 
76expressionAtom>: 
 expressionAtom:=  := 'STR_LITERAL'expressionAtom  
mathOperator expressionAtomCondition< 110
>, REDUCE Production by 'NOT_NULL': Already existed SHIFT
 by symbol'%'pid < 74:
>: 
<26expressionAtom> 
:= 'STR_LITERAL'Try to set it to: REDUCE to: 

pid <76Condition<>: 
110expressionAtom>, REDUCE Production by ' DEFAULT:= ': expressionAtom
 pid <74mathOperator>: 
 expressionAtomexpressionAtom  := 
'STR_LITERAL' 
Condition<110>, REDUCE Production by 'REFERENCES': 
Reset Action[pid <8274]['>: 
%'] to REDUCE:expressionAtom
 := pid <76'STR_LITERAL'>: 
 expressionAtom
 := Condition<expressionAtom110 >, REDUCE Production by 'mathOperator* ': expressionAtom
 
pid <74Condition<>: 
82expressionAtom>, REDUCE Production by ' +:= ': 
'STR_LITERAL'pid < 76
>: 
expressionAtom Condition<:= 110expressionAtom>, REDUCE Production by ' /mathOperator':  
expressionAtompid < 74
>: 
expressionAtomCondition< 82:= >, REDUCE Production by ',': 'STR_LITERAL'
 
pid <76Condition<>: 
110expressionAtom>, REDUCE Production by ' %:= ': expressionAtom
 mathOperatorpid < 74expressionAtom>: 
 expressionAtom 
:= 'STR_LITERAL'Already existed  SHIFT by symbol
'-' Condition<:
110<>, REDUCE Production by '34+>': 

Try to set it to: REDUCE to:
pid <74pid <>: 
76expressionAtom>: 
 expressionAtom:=  := 'STR_LITERAL'expressionAtom  
mathOperator Condition<expressionAtom110 >, REDUCE Production by '
-': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Reset Action[82]['-'] to REDUCE:
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
From Condition <82> get package:
mathOperator := '/' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------
From Condition <
100> get package:After tracing, got package:

expressionAtommathOperator  := := expressionAtom'/'  (^)(^)mathOperator, {  STR_LITERALexpressionAtom,  ID, , { -, ,NUMBER_CONSTANT, , )}, 
PRIMARY_KEY, ===============================================================================NOT_NULL
, DEFAULT
, REFERENCES, *, /, %, +, -, }
expressionAtom := expressionAtom mathOperator expressionAtom (^), { ,, PRIMARY_KEY, ), NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
-------------------------------------------------------------------------------

Already existed REDUCE by symbol '/': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Try to set it to: SHIFT to <40>
Set SHIFT fail in: from condition <82> to condition <40>.
This condition already existed.
From Condition <82> get package:
mathOperator := '+' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '+' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

After tracing, got package:
Already existed REDUCE by symbol 'mathOperator+ ': := 
(^)pid <76'*'>: 
 expressionAtom := , { expressionAtom STR_LITERALmathOperator,  IDexpressionAtom,  -
, NUMBER_CONSTANTTry to set it to: SHIFT to <, 41}>

mathOperator := (^)'%' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperatorSet SHIFT fail in: from condition < 82:= > to condition <41(^)>.'-'
 , { This condition already existed.STR_LITERAL, 
ID, -, NUMBER_CONSTANT, }
expressionAtom := expressionAtom (^)mathOperator expressionAtom , { ,, ), PRIMARY_KEY, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
expressionAtom := expressionAtom mathOperator expressionAtom (^), { ,, PRIMARY_KEY, ), NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
mathOperator := (^)'/' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'+' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

From Condition <74> get package:
constantNum := '-' (^)positiveNum , { FROM, *, /, %, +, ,, -, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := (^)'NUMBER_CONSTANT' , { FROM, *, /, %, +, -, ,, }
constantNum := '-' (^)positiveNum , { FROM, *, /, %, +, ,, -, }
===============================================================================

SHIFT <100> by expressionAtom to <111>.
From Condition <111> get package:
mathOperator := '*' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
SHIFT <74mathOperator> by ' -:= ' to <112'*'> 
(^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

From Condition <112> get package:
positiveNum := 'NUMBER_CONSTANT' (^), { FROM, *, /, %, +, -, ,, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := 'NUMBER_CONSTANT' (^), { FROM, *, /, %, +, -, ,, }
===============================================================================

SHIFT <111> by '*' to <33>
This condition already existed.
SHIFT <112> by 'NUMBER_CONSTANT' to <113>
Condition<113>, REDUCE Production by 'FROM': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT'From Condition < 
111Condition<113> get package:>, REDUCE Production by '*
': 
mathOperatorpid < 79:= >: 
positiveNum := '%' 'NUMBER_CONSTANT'(^) , { 
STR_LITERAL, Condition<113ID>, REDUCE Production by ', /-': , 
NUMBER_CONSTANTpid <, 79}>: 

positiveNum------------------------------------------------------------------------------- 
:= 
'NUMBER_CONSTANT'After tracing, got package: 

mathOperator Condition<:= 113'%'>, REDUCE Production by ' %': 
(^)pid <, { 79STR_LITERAL>: 
, positiveNumID , := -, NUMBER_CONSTANT'NUMBER_CONSTANT',  }

Condition<===============================================================================113
>, REDUCE Production by '+
': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<113>, REDUCE Production by '-': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<113>, REDUCE Production by ',': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
SHIFT <111> by '%' to <26>
This condition already existed.
From Condition <112> get package:
constantNum := '-' positiveNum (^), { FROM, *, /, %, +, ,, -, }
-------------------------------------------------------------------------------

After tracing, got package:
constantNum := '-' positiveNum (^), { FROM, From Condition <*, /, %, 111+> get package:, ,
, -, }
mathOperator=============================================================================== 
:= 
'-' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '-' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <112> by positiveNum to <114>.
Condition<114>, REDUCE Production by 'FROM': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<114>, REDUCE Production by '*': 
pid <77>: 
SHIFT <constantNum111 > by ':= -' to <34'-'> 
positiveNumThis condition already existed. 

Condition<114>, REDUCE Production by '/': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<114>, REDUCE Production by '%': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<114>, REDUCE Production by '+': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<114>, REDUCE Production by ',': 
pid <77>: 
constantNum := '-' positiveNum 
From Condition <Condition<114111>, REDUCE Production by '> get package:-': 

expressionAtompid < 77:= >: 
constantNum expressionAtom:=  '-' mathOperatorpositiveNum  (^)
expressionAtom , { ,, ), PRIMARY_KEY, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
-------------------------------------------------------------------------------

From Condition <74> get package:
expressionAtom := constantNum (^), { FROM, *, /, %, +, -, ,, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := constantNum (^), { FROM, *, /, %, +, -, ,, }
===============================================================================

SHIFT <74> by constantNum to <115>.
Condition<115>, REDUCE Production by 'FROM': 
pid <73>: 
expressionAtom := constantNum 
Condition<115>, REDUCE Production by '*': 
pid <73>: 
expressionAtom := constantNum 
Condition<115>, REDUCE Production by '/': 
pid <73>: 
expressionAtom := constantNum 
Condition<115>, REDUCE Production by '%': 
pid <73>: 
expressionAtom := constantNum 
Condition<115>, REDUCE Production by '+': 
pid <73>: 
expressionAtom := constantNum 
Condition<115>, REDUCE Production by '-': 
pid <73>: 
expressionAtom := constantNum 
Condition<115>, REDUCE Production by ',': 
pid <73>: 
expressionAtom := constantNum 
From Condition <74> get package:
expressionAtom := columnName (^), { FROM, *, /, %, +, -, ,, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := columnName (^), { FROM, *, /, %, +, -, ,, }
===============================================================================

SHIFT <74> by columnName to <116>.
Condition<116>, REDUCE Production by 'FROM': 
pid <75>: 
expressionAtom := columnName 
Condition<116>, REDUCE Production by '*': 
pid <75>: 
expressionAtom := columnName 
Condition<116>, REDUCE Production by '/': 
pid <75>: 
expressionAtom := columnName 
Condition<116>, REDUCE Production by '%': 
pid <75>: 
expressionAtom := columnName 
Condition<116>, REDUCE Production by '+': 
pid <75>: 
expressionAtom := columnName 
Condition<116>, REDUCE Production by '-': 
pid <75>: 
expressionAtom := columnName 
Condition<116>, REDUCE Production by ',': 
pid <75>: 
expressionAtom := columnName 
From Condition <74> get package:
positiveNum := 'NUMBER_CONSTANT' (^), { FROM, *, /, %, +, -, ,, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := 'NUMBER_CONSTANT' (^), { FROM, *, /, %, +, -, ,, }
===============================================================================

SHIFT <74> by 'NUMBER_CONSTANT' to <113>
This condition already existed.
From Condition <69> get package:
mathOperator := '-' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '-' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <69> by '-' to <34>
This condition already existed.
From Condition <69> get package:
selectElements := expressionAtom $__ann_37 (^), { FROM, }
$__ann_37 := $__ann_37 (^)',' expressionAtom , { FROM, ,, }
-------------------------------------------------------------------------------

After tracing, got package:
selectElements := expressionAtom $__ann_37 (^), { FROM, }
$__ann_37 := $__ann_37 (^)',' expressionAtom , { FROM, ,, }
===============================================================================

SHIFT <69> by $__ann_37 to <117>.
Condition<117>, REDUCE Production by 'FROM': 
pid <50>: 
selectElements := expressionAtom $__ann_37 
From Condition <117> get package:
$__ann_37 := $__ann_37 ',' (^)expressionAtom , { FROM, ,, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := (^)'ID' , { ,, ), PRIMARY_KEY, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
constantNum := (^)positiveNum , { ,, ), PRIMARY_KEY, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
expressionAtom := (^)'STR_LITERAL' , { ,, PRIMARY_KEY, ), NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
expressionAtom := expressionAtom mathOperator (^)expressionAtom , { ,, ), PRIMARY_KEY, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
expressionAtom := (^)expressionAtom mathOperator expressionAtom , { ,, PRIMARY_KEY, ), NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
columnName := (^)'ID' '.' 'ID' , { ,, ), PRIMARY_KEY, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
constantNum := (^)'-' positiveNum , { ,, ), PRIMARY_KEY, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
expressionAtom := (^)constantNum , { ,, PRIMARY_KEY, ), NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
expressionAtom := (^)columnName , { ,, PRIMARY_KEY, ), NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
positiveNum := (^)'NUMBER_CONSTANT' , { ,, PRIMARY_KEY, ), NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
===============================================================================

SHIFT <111> by mathOperator to <118>.
From Condition <118> get package:
columnName := 'ID' (^), { ,, ), PRIMARY_KEY, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
columnName := 'ID' (^)'.' 'ID' , { ,, ), PRIMARY_KEY, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID' (^), { ,, ), PRIMARY_KEY, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
columnName := 'ID' (^)'.' 'ID' , { ,, ), PRIMARY_KEY, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
===============================================================================

SHIFT <118> by 'ID' to <119>
Condition<119>, REDUCE Production by ',': 
pid <68>: 
columnName := 'ID' 
Condition<119>, REDUCE Production by ')': 
After tracing, got package:pid <68
>: 
columnName := $__ann_37'ID'  := 
$__ann_37 Condition<119','>, REDUCE Production by ' PRIMARY_KEY': (^)
expressionAtompid < 68, { >: 
columnNameFROM , := ,, 'ID'} 

columnNameCondition< 119:= >, REDUCE Production by '(^)'ID' NOT_NULL, { ': FROM
, -, pid <,68, >: 
*, columnName/ , := %, 'ID'+ , }

Condition<constantNum119 >, REDUCE Production by ':= DEFAULT': (^)
positiveNumpid < 68, { >: 
columnNameFROM , := -, 'ID', , 
*, /Condition<, 119%>, REDUCE Production by ', REFERENCES+': , 
}
pid <68expressionAtom>: 
 columnName:=  := (^)'ID''STR_LITERAL'  
, { Condition<FROM119, >, REDUCE Production by '-*, ': ,
, pid <68*>: 
, columnName/ , := %, 'ID'+ , }

Condition<expressionAtom119 >, REDUCE Production by ':= /': (^)
expressionAtom pid <68mathOperator>: 
 columnName expressionAtom:=  'ID', {  FROM
, -, Condition<,119, >, REDUCE Production by '*%, ': /
, pid <68%>: 
, columnName+ , := }'ID'
 columnName 
:= Condition<119(^)>, REDUCE Production by '+'ID'':  
'.'pid < 68'ID'>: 
 columnName , { := FROM'ID',  -, 
,, Condition<*119, >, REDUCE Production by '/-, ': %, 
+pid <68, >: 
}columnName 
:= constantNum 'ID':=  
(^)'-' positiveNum , { FROM, -, ,, *, /, %, +, }
expressionAtom := (^)constantNum , { FROM, -, ,, *, /, %, +, }
expressionAtom := (^)columnName , { FROM, -, ,, *, /, %, +, }
positiveNum := (^)'NUMBER_CONSTANT' , { FROM, -, ,, *, /, %, +, }
===============================================================================

From Condition <119> get package:
columnName := 'ID' '.' (^)'ID' , { ,, ), PRIMARY_KEY, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID' '.' (^)'ID' , { ,, ), PRIMARY_KEY, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
===============================================================================

SHIFT <117> by ',' to <120>
From Condition <120> get package:
expressionAtom := expressionAtom (^)mathOperator expressionAtom , { FROM, -, ,, *, /, %, +, }
$__ann_37 := $__ann_37 ',' expressionAtom (^), { FROM, ,, }
-------------------------------------------------------------------------------

SHIFT <119> by '.' to <85>
This condition already existed.
From Condition <118> get package:
constantNum := positiveNum (^), { ,, ), PRIMARY_KEY, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
constantNum := positiveNum (^), { ,, ), PRIMARY_KEY, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
===============================================================================

After tracing, got package:
SHIFT <mathOperator118 > by := positiveNum to <121(^)>.'*'
 , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'%' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperatorCondition< 121:= >, REDUCE Production by ',(^)': '-'
 pid <78, { >: 
STR_LITERALconstantNum,  ID:= , -positiveNum,  NUMBER_CONSTANT, 
}
Condition<121expressionAtom>, REDUCE Production by ' ):= ': 
expressionAtompid < 78(^)>: 
mathOperator constantNum := expressionAtom positiveNum , { 
FROM, Condition<-121, >, REDUCE Production by ',PRIMARY_KEY, ': *
, pid </78, >: 
%constantNum,  +:= , }positiveNum 

$__ann_37 Condition<:= 121$__ann_37>, REDUCE Production by ' NOT_NULL': ','
 expressionAtompid < 78(^)>: 
, { constantNum := FROMpositiveNum,  ,
, }Condition<
121mathOperator>, REDUCE Production by ' DEFAULT:= ': 
(^)'/'pid < 78, { >: 
constantNumSTR_LITERAL , := IDpositiveNum,  -
, Condition<121NUMBER_CONSTANT>, REDUCE Production by ', REFERENCES}': 

pid <78mathOperator>: 
 constantNum:=  := positiveNum(^) '+'
 Condition<121, { >, REDUCE Production by '*STR_LITERAL': , 
IDpid <, 78->: 
, constantNumNUMBER_CONSTANT , := }positiveNum 

===============================================================================Condition<
121
>, REDUCE Production by '/': 
pid <78>: 
constantNum := positiveNum 
Condition<121>, REDUCE Production by '%': 
pid <78>: 
constantNum := positiveNum 
Condition<121>, REDUCE Production by '+': 
pid <78>: 
constantNum := positiveNum 
Condition<121>, REDUCE Production by '-': 
pid <78>: 
constantNum := positiveNum 
From Condition <118> get package:
expressionAtom := 'STR_LITERAL' (^), { ,, PRIMARY_KEY, ), NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := 'STR_LITERAL' (^), { ,, PRIMARY_KEY, ), NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
SHIFT <===============================================================================120
> by 
expressionAtom to <122>.
From Condition <122> get package:
mathOperator := '*' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
SHIFT <-------------------------------------------------------------------------------118
> by '
STR_LITERAL' to <123After tracing, got package:>

mathOperator := '*' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================
Condition<
123>, REDUCE Production by ',': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<123>, REDUCE Production by 'PRIMARY_KEY': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<123>, REDUCE Production by ')': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<123>, REDUCE Production by 'NOT_NULL': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
SHIFT <122Condition<> by '123*>, REDUCE Production by '' to <33DEFAULT>': 

This condition already existed.
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<123>, REDUCE Production by 'REFERENCES': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<123>, REDUCE Production by '*': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<123>, REDUCE Production by '/': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<123>, REDUCE Production by '%': 
From Condition <pid <74122>: 
> get package:expressionAtom := 
'STR_LITERAL' 
mathOperator Condition<:= 123'%'>, REDUCE Production by ' +': 
(^)pid <74, { >: 
expressionAtomSTR_LITERAL , := ID, 'STR_LITERAL'- , 
NUMBER_CONSTANT, Condition<123}>, REDUCE Production by '-
': 
-------------------------------------------------------------------------------pid <74
>: 
expressionAtom
 := After tracing, got package:'STR_LITERAL'
 
mathOperator := '%' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <122From Condition <> by '%' to <26118>> get package:

This condition already existed.
expressionAtom := expressionAtom (^)mathOperator expressionAtom , { ,, PRIMARY_KEY, ), NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
expressionAtom := expressionAtom mathOperator expressionAtom (^), { ,, ), PRIMARY_KEY, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
-------------------------------------------------------------------------------

From Condition <122> get package:
mathOperator := '-' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '-' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <122> by '-' to <34>
This condition already existed.
From Condition <122> get package:
expressionAtom := expressionAtom mathOperator (^)expressionAtom After tracing, got package:, { 
FROM, mathOperator- , := ,, *(^), '*'/ , %, , { +, STR_LITERAL}, 
ID-------------------------------------------------------------------------------, 
-
, NUMBER_CONSTANT, }
mathOperator := (^)'%' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'-' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
expressionAtom := expressionAtom (^)mathOperator expressionAtom , { ,, PRIMARY_KEY, ), NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
expressionAtom := expressionAtom mathOperator expressionAtom (^), { ,, ), PRIMARY_KEY, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
mathOperator := (^)'/' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'+' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <118> by expressionAtom to <111>.
This condition already existed.
From Condition <118> get package:
constantNum := '-' (^)positiveNum , { ,, ), PRIMARY_KEY, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := (^)'NUMBER_CONSTANT' , { ,, PRIMARY_KEY, ), NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
constantNum := '-' (^)positiveNum , { ,, ), PRIMARY_KEY, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
===============================================================================

After tracing, got package:
columnName := (^)'ID' , { FROM, -, ,, *, /, %, +, }
SHIFT <118constantNum> by ' -:= ' to <88(^)>positiveNum 
, { This condition already existed.FROM
, -, ,, *, /, %, +, }
expressionAtom := (^)'STR_LITERAL' , { FROM, ,, -, *, /, %, +, }
expressionAtom := expressionAtom mathOperator (^)expressionAtom , { FROM, -, ,, *, /, %, +, }
expressionAtom := (^)expressionAtom mathOperator expressionAtom , { FROM, ,, -, *, /, %, +, }
columnName := (^)'ID' '.' 'ID' , { FROM, -, ,, *, /, %, +, }
constantNum := (^)'-' positiveNum , { FROM, -, ,, *, /, %, +, }
expressionAtom := (^)constantNum , { FROM, ,From Condition <, -, *, 118/> get package:, %
, +, }
expressionAtomexpressionAtom  := := (^)constantNumcolumnName  (^), { , { FROM, ,,, , PRIMARY_KEY-, , )*, , NOT_NULL/, , DEFAULT%, , REFERENCES+, , *}, 
/positiveNum,  %:= , +(^), -'NUMBER_CONSTANT',  }
, { FROM-------------------------------------------------------------------------------, 
,, 
-, *After tracing, got package:, 
/, expressionAtom% , := +, }constantNum 
(^)===============================================================================, { 
,
, PRIMARY_KEY, ), NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
===============================================================================

SHIFT <122> by mathOperator to <124>.
From Condition <124> get package:
columnName := 'ID' (^), { FROM, -, ,, *, /, %, +, }
columnName := 'ID' (^)'.' 'ID' , { FROM, -, ,, *, /, %, +, }
-------------------------------------------------------------------------------

SHIFT <After tracing, got package:118
> by constantNumcolumnName to <94 >.:= 
'ID' This condition already existed.
(^), { FROM, -, ,, *, /, %, +, }
columnName := 'ID' (^)'.' 'ID' , { FROM, -, ,, *, /, %, +, }
===============================================================================

From Condition <118> get package:
expressionAtom := columnName (^), { ,, PRIMARY_KEY, ), NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
-------------------------------------------------------------------------------
SHIFT <
124> by 'IDAfter tracing, got package:' to <125
>
expressionAtom := columnName (^), { ,, PRIMARY_KEY, ), NOT_NULL, DEFAULT, REFERENCES, *, /, %, +Condition<, 125->, REDUCE Production by ', FROM}': 

===============================================================================
pid <68
>: 
columnName := 'ID' 
Condition<125>, REDUCE Production by '-': 
pid <68>: 
columnName := 'ID' 
Condition<125>, REDUCE Production by ',': 
pid <68>: 
columnName := 'ID' 
Condition<125>, REDUCE Production by '*': 
pid <68>: 
columnName := 'ID' 
Condition<125>, REDUCE Production by '/': 
pid <68>: 
columnName := 'ID' 
Condition<125>, REDUCE Production by '%': 
pid <68>: 
columnName := 'ID' 
Condition<125>, REDUCE Production by '+': 
pid <68>: 
columnName := 'ID' 
SHIFT <118> by columnName to <97>.
This condition already existed.
From Condition <125> get package:
columnName := 'ID' '.' (^)'ID' , { FROM, -, ,, *, /, %, +, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID' '.' (^)'ID' , { FROM, -, ,, *, /, %, From Condition <+, }
118> get package:===============================================================================


positiveNum := 'NUMBER_CONSTANT' (^), { ,, PRIMARY_KEY, ), NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := 'NUMBER_CONSTANT' (^), { ,, PRIMARY_KEY, ), NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
===============================================================================

SHIFT <125> by '.' to <126>
From Condition <126> get package:
columnName := 'ID' '.' 'ID' (^), { FROM, -, ,, *, /SHIFT <, 118%> by ', NUMBER_CONSTANT' to <90+>, 
}This condition already existed.

-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID' '.' 'ID' (^), { FROM, -, ,, *, /, %, +, }
===============================================================================

Condition<111>, REDUCE Production by ',': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Condition<111>, REDUCE Production by 'PRIMARY_KEY': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Condition<111>, REDUCE Production by ')': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Condition<111>, REDUCE Production by 'NOT_NULL': 
SHIFT <pid <12676> by '>: 
IDexpressionAtom' to < 127:= >expressionAtom
 mathOperator expressionAtom 
Condition<111>, REDUCE Production by 'DEFAULT': 
Condition<pid <12776>, REDUCE Production by '>: 
FROMexpressionAtom':  
:= expressionAtompid < 67mathOperator>: 
 columnNameexpressionAtom  := 
'ID'Condition< 111'.'>, REDUCE Production by ' REFERENCES': 'ID'
 
pid <76Condition<>: 
127expressionAtom := expressionAtom mathOperator expressionAtom>, REDUCE Production by ' -': 

Already existed pid <SHIFT67 by symbol>: 
columnName'*'  := :
<'ID'33 >'.'
 'ID'Try to set it to: REDUCE to: 

pid <76Condition<>: 
127expressionAtom>, REDUCE Production by ' ,:= ': expressionAtom
 mathOperatorpid < 67expressionAtom>: 
 columnName 
:= 'ID' '.' 'ID' 
Condition<127>, REDUCE Production by '*': 
pid <67Reset Action[>: 
111columnName][' *:= '] to REDUCE:
'ID' pid <76'.'>: 
 expressionAtom'ID'  := 
expressionAtom Condition<mathOperator127 >, REDUCE Production by 'expressionAtom/ ': 

pid <Condition<67111>: 
>, REDUCE Production by 'columnName/ ': := 
'ID'pid < 76'.'>: 
 expressionAtom'ID'  := 
expressionAtom Condition<127mathOperator>, REDUCE Production by ' %expressionAtom':  

pid <67Already existed >: 
SHIFT by symbolcolumnName '%':=  :
'ID'< 26'.'> 
'ID'Try to set it to: REDUCE to: 

pid <76Condition<>: 
127expressionAtom>, REDUCE Production by ' +:= ': expressionAtom
 mathOperatorpid < 67expressionAtom>: 
 columnName 
:= 'ID' '.' 'ID' 
Reset Action[111]['%'] to REDUCE:
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Condition<111>, REDUCE Production by '+': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Already existed SHIFT by symbol'-' :
<34>
Try to set it to: REDUCE to:
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Reset Action[111]['-'] to REDUCE:
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
From Condition <124> get package:
constantNum := positiveNum (^), { FROM, -, ,, *, /, %, +, }
-------------------------------------------------------------------------------
From Condition <
111> get package:After tracing, got package:

mathOperator constantNum:=  := '/'positiveNum  (^)(^), { , { FROMSTR_LITERAL, , -ID, , ,-, , *NUMBER_CONSTANT, , /}, 
%, -------------------------------------------------------------------------------+
, }

After tracing, got package:===============================================================================

mathOperator
 := '/' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <124> by positiveNum to <128>.
Condition<128>, REDUCE Production by 'FROM': 
pid <78>: 
constantNum := positiveNum 
Condition<128>, REDUCE Production by '-': 
pid <78>: 
constantNum := positiveNum 
Condition<128>, REDUCE Production by ',': 
pid <78>: 
Already existed REDUCE by symbol 'constantNum /:= ': positiveNum 

Condition<pid <12876>, REDUCE Production by '>: 
*': expressionAtom
 pid <:= 78expressionAtom>: 
 constantNummathOperator  := expressionAtom positiveNum 

Try to set it to: SHIFT to <40Condition<>128
>, REDUCE Production by '/': 
pid <78>: 
constantNum := positiveNum 
Set SHIFT fail in: from condition <Condition<111128> to condition <40>, REDUCE Production by '>.%
': This condition already existed.

pid <78>: 
constantNum := positiveNum 
Condition<128>, REDUCE Production by '+': 
pid <78>: 
constantNum := positiveNum 
From Condition <111> get package:
mathOperator := '+' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

From Condition <After tracing, got package:
124> get package:mathOperator
 := expressionAtom '+':=  (^), { 'STR_LITERAL'STR_LITERAL , ID, (^)-, { , NUMBER_CONSTANTFROM, , },, 
-, ===============================================================================*
, /
, %, +, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := 'STR_LITERAL' (^), { FROM, ,, -, *, /, %, +, }
===============================================================================

Already existed REDUCE by symbol '+': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Try to set it to: SHIFT to <41>
Set SHIFT fail in: from condition <111> to condition <41>.
This condition already existed.
SHIFT <124> by 'STR_LITERAL' to <129>
Condition<129>, REDUCE Production by 'FROM': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<129>, REDUCE Production by ',': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<129>, REDUCE Production by '-': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<129>, REDUCE Production by '*': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<129>, REDUCE Production by '/': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<129>, REDUCE Production by '%': 
From Condition <100pid <> get package:74
>: 
expressionAtom := 'STR_LITERAL'constantNum  
:= Condition<129'-'>, REDUCE Production by ' +': (^)
positiveNumpid < 74, { >: 
expressionAtom ,:= , PRIMARY_KEY'STR_LITERAL',  )
, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
-------------------------------------------------------------------------------

From Condition <124> get package:
expressionAtom := expressionAtom (^)mathOperator expressionAtom , { FROM, ,, -, *, /, %, +, }
expressionAtom := expressionAtom mathOperator expressionAtom (^), { FROM, -, ,, *, /, %, +, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := (^)'NUMBER_CONSTANT' , { ,, ), PRIMARY_KEY, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
constantNum := '-' (^)positiveNum , { ,, PRIMARY_KEY, ), NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
===============================================================================

SHIFT <100> by '-' to <130>
From Condition <130> get package:
positiveNum := 'NUMBER_CONSTANT'After tracing, got package: 
(^), { mathOperator ,:= , )(^), '*'PRIMARY_KEY , NOT_NULL, , { DEFAULT, STR_LITERALREFERENCES, , ID*, , -/, , NUMBER_CONSTANT%, , }+, 
-mathOperator,  }:= 
(^)-------------------------------------------------------------------------------'%'
 
, { STR_LITERALAfter tracing, got package:, 
ID, positiveNum- , := NUMBER_CONSTANT, }'NUMBER_CONSTANT'
 mathOperator := (^), { (^),'-',  ), PRIMARY_KEY, { , NOT_NULLSTR_LITERAL, , DEFAULTID, , REFERENCES-, , *NUMBER_CONSTANT, , /}, 
%expressionAtom,  +:= , -, expressionAtom} 
(^)===============================================================================mathOperator 
expressionAtom
 , { FROM, ,, -, *, /, %, +, }
expressionAtom := expressionAtom mathOperator expressionAtom (^), { FROM, -, ,, *, /, %, +, }
mathOperator := (^)'/' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'+' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <130> by 'NUMBER_CONSTANT' to <131>
Condition<131>, REDUCE Production by ',': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<131>, REDUCE Production by ')': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<131>, REDUCE Production by 'PRIMARY_KEY': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<131>, REDUCE Production by 'NOT_NULL': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<131>, REDUCE Production by 'DEFAULT': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<131>, REDUCE Production by 'REFERENCES': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<131>, REDUCE Production by '*': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<131>, REDUCE Production by '/': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<131>, REDUCE Production by '%': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<131>, REDUCE Production by '+': 
SHIFT <pid <79124>: 
> by positiveNumexpressionAtom  to <:= 132'NUMBER_CONSTANT'>. 

Condition<131>, REDUCE Production by '-': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
From Condition <132> get package:
mathOperator := '*' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '*' From Condition <(^), { STR_LITERAL, ID130, > get package:-, 
NUMBER_CONSTANT, }
constantNum=============================================================================== 
:= 
'-' positiveNum (^), { ,, PRIMARY_KEY, ), NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
constantNum := '-' positiveNum (^), { ,, PRIMARY_KEY, ), NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
===============================================================================

SHIFT <132> by '*' to <33>
This condition already existed.
SHIFT <130> by positiveNum to <133From Condition <>.
132> get package:
mathOperator := '%' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANTCondition<, 133}>, REDUCE Production by '
,-------------------------------------------------------------------------------': 


pid <After tracing, got package:77
>: 
constantNum mathOperator:=  := '-' positiveNum'%'  
(^), { Condition<133STR_LITERAL>, REDUCE Production by ', PRIMARY_KEYID': , 
-pid <, 77NUMBER_CONSTANT>: 
, constantNum} := 
'-'=============================================================================== 
positiveNum
 
Condition<133>, REDUCE Production by ')': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<133>, REDUCE Production by 'NOT_NULL': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<133>, REDUCE Production by 'DEFAULT': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<133>, REDUCE Production by 'REFERENCES': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<133SHIFT <>, REDUCE Production by '132*> by '': %
' to <26pid <>77
>: 
constantNumThis condition already existed. := 
'-' positiveNum 
Condition<133>, REDUCE Production by '/': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<133>, REDUCE Production by '%': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<133>, REDUCE Production by '+': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<133>, REDUCE Production by '-': 
pid <77>: 
constantNum := '-'From Condition < positiveNum 
132> get package:
mathOperator := '-' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '-' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

From Condition <100> get package:
expressionAtom := constantNum (^), { ,, ), PRIMARY_KEY, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
-------------------------------------------------------------------------------

SHIFT <After tracing, got package:132
> by 'expressionAtom- ' to <34:= >
constantNumThis condition already existed. 
(^), { ,, ), PRIMARY_KEY, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
===============================================================================

From Condition <132> get package:
expressionAtom := expressionAtom mathOperator (^)expressionAtom , { FROM, ,, -, *, /, %, +, }
-------------------------------------------------------------------------------

SHIFT <100> by constantNum to <134>.
Condition<134>, REDUCE Production by ',': 
pid <73>: 
expressionAtom := constantNum 
Condition<134>, REDUCE Production by ')': 
pid <73>: 
expressionAtom := constantNum 
Condition<134>, REDUCE Production by 'PRIMARY_KEY': 
pid <73>: 
expressionAtom := constantNum 
Condition<134>, REDUCE Production by 'NOT_NULL': 
pid <73>: 
expressionAtom := constantNum 
Condition<134>, REDUCE Production by 'DEFAULT': 
pid <73>: 
expressionAtom := constantNum 
Condition<134>, REDUCE Production by 'REFERENCES': 
pid <73>: 
expressionAtom := constantNum 
Condition<134>, REDUCE Production by '*': 
pid <73>: 
expressionAtom := constantNum 
Condition<134>, REDUCE Production by '/': 
pid <73>: 
expressionAtom := constantNum 
Condition<134>, REDUCE Production by '%': 
pid <73>: 
expressionAtom := constantNum 
Condition<134>, REDUCE Production by '+': 
pid <73>: 
expressionAtom := constantNum 
Condition<134>, REDUCE Production by '-': 
pid <73>: 
expressionAtom := constantNum 
From Condition <100> get package:
expressionAtom := columnName (^), { ,, ), PRIMARY_KEY, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := columnName (^), { ,, ), PRIMARY_KEY, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
===============================================================================

SHIFT <100> by columnName to <135>.
Condition<135>, REDUCE Production by ',': 
pid <75>: 
expressionAtom := columnName 
Condition<135>, REDUCE Production by ')': 
pid <75>: 
expressionAtom := columnName 
Condition<135>, REDUCE Production by 'PRIMARY_KEY': 
pid <75>: 
expressionAtom := columnName 
Condition<135>, REDUCE Production by 'NOT_NULL': 
pid <75>: 
expressionAtom := columnName 
Condition<135>, REDUCE Production by 'DEFAULT': 
pid <75>: 
expressionAtom := columnName 
Condition<135>, REDUCE Production by 'REFERENCES': 
pid <75>: 
expressionAtom := columnName 
Condition<135>, REDUCE Production by '*': 
pid <75>: 
expressionAtom := columnName 
Condition<135>, REDUCE Production by '/': 
pid <75>: 
expressionAtom := columnName 
Condition<135>, REDUCE Production by '%': 
pid <75>: 
expressionAtom := columnName 
Condition<135>, REDUCE Production by '+': 
pid <75>: 
expressionAtom := columnName 
Condition<135>, REDUCE Production by '-': 
pid <75>: 
expressionAtom := columnName 
From Condition <100> get package:
positiveNum := 'NUMBER_CONSTANT' (^), { ,, ), PRIMARY_KEY, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := 'NUMBER_CONSTANT' (^), { ,, ), PRIMARY_KEY, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
===============================================================================

SHIFT <100> by 'NUMBER_CONSTANT' to <131>
This condition already existed.
After tracing, got package:
columnName := (^)'ID' , { FROM, ,, -, *, /, %, +, }
constantNum := (^)positiveNum , { FROM, ,, -, *, /, %, +, }
expressionAtom := (^)'STR_LITERAL' , { FROM, -, ,, *, /, %, +, }
expressionAtom := expressionAtom mathOperator (^)expressionAtom , { FROM, ,, -, *, /, %, +, }
expressionAtom := (^)expressionAtom mathOperator expressionAtom , { FROM, -, ,, *, /, %, +, }
columnName := (^)'ID' '.' 'ID' , { FROM, ,, -, *, /, %, +, }
constantNum := (^)'-' positiveNum , { FROM, ,, -, *, /, %, +, }
expressionAtom := (^)constantNum , { FROM, -, ,, *, /, %, +, }
expressionAtom := (^)columnName , { FROM, -, ,, *, /, %, +, }
positiveNum := (^)'NUMBER_CONSTANT' , { FROM, -, ,, *, /, %, +, }
===============================================================================

From Condition <83> get package:
constantNum := positiveNum (^), { ,, ), PRIMARY_KEY, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
constantNum := positiveNum (^), { ,, ), PRIMARY_KEY, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
===============================================================================

SHIFT <132> by mathOperator to <136>.
From Condition <136> get package:
columnName := 'ID' (^), { FROM, ,, -, *, /, %, +, }
columnName := 'ID' (^)'.' 'ID' , { FROM, ,, -, *, /, %, +, }
-------------------------------------------------------------------------------
SHIFT <
83> by positiveNum to <121After tracing, got package:>.

columnName := This condition already existed.
'ID' (^), { FROM, ,, -, *, /, %, +, }
columnName := 'ID' (^)'.' 'ID' , { FROM, ,, -, *, /, %, +, }
===============================================================================

From Condition <83> get package:
expressionAtom := 'STR_LITERAL' (^), { ,, PRIMARY_KEY, ), NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
-------------------------------------------------------------------------------
SHIFT <
136> by 'ID' to <137After tracing, got package:>

expressionAtom := 'STR_LITERAL' (^), { ,, PRIMARY_KEY, ), NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
===============================================================================
Condition<
137>, REDUCE Production by 'FROM': 
pid <68>: 
columnName := 'ID' 
Condition<137>, REDUCE Production by ',': 
pid <68>: 
columnName := 'ID' 
Condition<137>, REDUCE Production by '-': 
pid <68>: 
columnName := 'ID' 
Condition<137>, REDUCE Production by '*': 
pid <68>: 
columnName := 'ID' 
Condition<137>, REDUCE Production by '/': 
pid <68>: 
columnName := 'ID' 
Condition<137>, REDUCE Production by '%': 
pid <68>: 
columnName := 'ID' 
Condition<137>, REDUCE Production by '+': 
pid <68>: 
columnName := 'ID' 
SHIFT <83> by 'STR_LITERAL' to <123>
This condition already existed.
From Condition <137> get package:
columnName := 'ID' '.' (^)'ID' , { FROM, ,, -, *, /, %, +, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := From Condition <'ID' '.' 83> get package:(^)'ID'
 , { FROMpositiveNum,  ,:= , -, *, 'NUMBER_CONSTANT'/ , %, (^)+, { , },
, ===============================================================================PRIMARY_KEY
, 
), NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := 'NUMBER_CONSTANT' (^), { ,, PRIMARY_KEY, ), NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
===============================================================================

SHIFT <137> by '.' to <138>
From Condition <138> get package:
columnName := 'ID' '.' 'ID' (^), { FROM, ,, -, *, /, %, +, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID' '.' 'ID' (^), { FROM, ,, -, *SHIFT <, 83/> by ', NUMBER_CONSTANT%' to <90, >+
, }This condition already existed.

===============================================================================

SHIFT <138> by 'ID' to <139>
Condition<139>, REDUCE Production by 'FROM': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
From Condition <Condition<13978>, REDUCE Production by '> get package:,': 

pid <67columnConstraint>: 
 columnName:=  := 'ID''REFERENCES'  '.' (^)'ID'tableName  
, { Condition<139,>, REDUCE Production by ', -': )
, pid <67PRIMARY_KEY>: 
, columnNameNOT_NULL , := DEFAULT, 'ID'REFERENCES , '.'} 
'ID'------------------------------------------------------------------------------- 


Condition<139>, REDUCE Production by '*': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<139>, REDUCE Production by '/': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<139>, REDUCE Production by '%': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<139>, REDUCE Production by '+': 
pid <67After tracing, got package:>: 

columnName columnConstraint:=  := 'ID' '.''REFERENCES'  'ID' (^)
tableName , { ,, ), PRIMARY_KEY, NOT_NULL, DEFAULT, REFERENCES, }
tableName := (^)'ID' , { ,, PRIMARY_KEY, ), NOT_NULL, DEFAULT, REFERENCES, }
===============================================================================

From Condition <136> get package:
constantNum := positiveNum (^), { FROM, ,, -, *, /, %, +, }
SHIFT <-------------------------------------------------------------------------------78
> by '
REFERENCES' to <140After tracing, got package:>

constantNum := positiveNum (^), { FROM, ,, -, *, /, %, +, }
===============================================================================

From Condition <140> get package:
columnConstraint := 'REFERENCES' tableName (^), { ,, ), PRIMARY_KEY, NOT_NULL, DEFAULT, REFERENCES, }
-------------------------------------------------------------------------------

After tracing, got package:
SHIFT <columnConstraint136 > by := positiveNum to <141'REFERENCES'>. 
tableName (^), { ,, ), PRIMARY_KEY, NOT_NULL, DEFAULT, REFERENCES, }
===============================================================================

Condition<141>, REDUCE Production by 'FROM': 
pid <78>: 
constantNum := positiveNum 
Condition<141>, REDUCE Production by ',': 
pid <78>: 
constantNum := positiveNum 
Condition<141>, REDUCE Production by '-': 
pid <78>: 
constantNum := positiveNum 
Condition<141>, REDUCE Production by '*': 
pid <78>: 
constantNum := positiveNum 
Condition<141>, REDUCE Production by '/': SHIFT <
140pid <> by 78tableName>: 
 to <constantNum142 >.:= 
positiveNum 
Condition<141>, REDUCE Production by '%': Condition<
142pid <>, REDUCE Production by '78,>: 
': constantNum
 := pid <25positiveNum>: 
 columnConstraint
 := Condition<141'REFERENCES'>, REDUCE Production by ' +tableName':  

pid <78Condition<>: 
142constantNum>, REDUCE Production by ' ):= ': positiveNum
 pid <25
>: 
columnConstraint := 'REFERENCES' tableName 
Condition<142>, REDUCE Production by 'PRIMARY_KEY': 
pid <25>: 
columnConstraint := 'REFERENCES' tableName 
Condition<142>, REDUCE Production by 'NOT_NULL': 
pid <25>: 
columnConstraint := 'REFERENCES' tableName 
Condition<142>, REDUCE Production by 'DEFAULT': 
pid <25>: 
columnConstraint := 'REFERENCES' tableName 
Condition<142>, REDUCE Production by 'REFERENCES': 
pid <25From Condition <>: 
columnConstraint := 136'REFERENCES'> get package: tableName
 
expressionAtom := 'STR_LITERAL' (^), { FROM, -, ,, *, /, %, +, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := 'STR_LITERAL' (^), { FROM, -, ,, *, /, %, +, }
===============================================================================

From Condition <140> get package:
tableName := 'ID' (^), { ,, PRIMARY_KEY, ), NOT_NULL, DEFAULT, REFERENCES, }
-------------------------------------------------------------------------------

After tracing, got package:
tableName := 'ID' (^), { ,, PRIMARY_KEY, ), NOT_NULL, DEFAULT, REFERENCES, }
SHIFT <===============================================================================136
> by '
STR_LITERAL' to <143>
Condition<143>, REDUCE Production by 'FROM': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<143>, REDUCE Production by '-': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<143>, REDUCE Production by ',': 
pid <74SHIFT <>: 
140expressionAtom> by ' ID:= ' to <144'STR_LITERAL'> 

Condition<143>, REDUCE Production by '*': 
Condition<pid <74144>: 
>, REDUCE Production by 'expressionAtom, ': := 
'STR_LITERAL'pid <66 >: 

tableName Condition<:= 143'ID'>, REDUCE Production by ' /': 

Condition<144pid <>, REDUCE Production by '74PRIMARY_KEY>: 
': expressionAtom 
:= 'STR_LITERAL'pid < 66
>: 
tableNameCondition< 143:= >, REDUCE Production by '%'ID'':  

pid <74Condition<>: 
144expressionAtom>, REDUCE Production by ' ):= ': 
'STR_LITERAL'pid < 66
>: 
tableName Condition<:= 143'ID'>, REDUCE Production by ' +': 

Condition<pid <14474>, REDUCE Production by '>: 
NOT_NULLexpressionAtom':  
:= pid <66'STR_LITERAL'>: 
 tableName := 'ID' 

Condition<144>, REDUCE Production by 'DEFAULT': 
pid <66>: 
tableName := 'ID' 
Condition<144>, REDUCE Production by 'REFERENCES': 
pid <66>: 
tableName := 'ID' 
From Condition <136> get package:
expressionAtom := expressionAtom (^)mathOperator expressionAtom , { FROM, -, ,, *, /, %, +, }
expressionAtom := expressionAtom mathOperator expressionAtom (^), { FROM, ,, -From Condition <, *, /, 78%> get package:, +
, }
$__ann_32------------------------------------------------------------------------------- 
:= $__ann_32
 columnConstraint (^), { ,, PRIMARY_KEY, ), NOT_NULL, DEFAULT, REFERENCES, }
-------------------------------------------------------------------------------

After tracing, got package:
$__ann_32 := $__ann_32 columnConstraint (^), { ,, PRIMARY_KEY, ), NOT_NULL, DEFAULT, REFERENCES, }
===============================================================================

SHIFT <78> by columnConstraint to <145>.
Condition<145>, REDUCE Production by ',': 
pid <17>: 
$__ann_32 := $__ann_32 columnConstraint 
Condition<145>, REDUCE Production by 'PRIMARY_KEY': 
pid <17>: 
$__ann_32 := $__ann_32 columnConstraint 
Condition<145>, REDUCE Production by ')': 
pid <17>: 
$__ann_32 := $__ann_32 columnConstraint 
Condition<145>, REDUCE Production by 'NOT_NULL': 
pid <17>: 
$__ann_32 := $__ann_32 columnConstraint 
Condition<145>, REDUCE Production by 'DEFAULT': 
pid <17>: 
$__ann_32 := $__ann_32 columnConstraint 
Condition<145>, REDUCE Production by 'REFERENCES': 
pid <17>: 
$__ann_32 := $__ann_32 columnConstraint 
After tracing, got package:
mathOperator := (^)'*' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'%' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'-' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
expressionAtom := expressionAtom (^)mathOperator expressionAtom , { FROM, -, ,, *, /, %, +, }
expressionAtom := expressionAtom mathOperator expressionAtom (^), { FROM, ,, -, *, /, %, +, }
mathOperator := (^)'/' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'+' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

From Condition <71> get package:
columnConstraint := 'DEFAULT' (^)expressionAtom , { ,, ), PRIMARY_KEY, NOT_NULL, DEFAULT, REFERENCES, }
-------------------------------------------------------------------------------

SHIFT <136> by expressionAtom to <146>.
From Condition <146> get package:
mathOperator := '*' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '*' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <146> by '*' to <33>
This condition already existed.
From Condition <146> get package:
mathOperator := '%' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '%' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <146> by '%' to <26>
This condition already existed.
From Condition <146> get package:
mathOperator := '-' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '-' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <146> by '-' to <34>
This condition already existed.
From Condition <146> get package:
expressionAtom := expressionAtom mathOperator (^)expressionAtom , { FROM, -, ,, *, /, %, +, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := (^)'ID' '.' 'ID' , { ,, ), PRIMARY_KEY, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
constantNum := (^)'-' positiveNum , { ,, ), PRIMARY_KEY, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
expressionAtom := (^)constantNum , { ,, PRIMARY_KEY, ), NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
expressionAtom := (^)columnName , { ,, PRIMARY_KEY, ), NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
columnConstraint := 'DEFAULT' (^)expressionAtom , { ,, ), PRIMARY_KEY, NOT_NULL, DEFAULT, REFERENCES, }
columnName := (^)'ID' , { ,, ), PRIMARY_KEY, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
constantNum := (^)positiveNum , { ,, ), PRIMARY_KEY, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
expressionAtom := (^)'STR_LITERAL' , { ,, PRIMARY_KEY, ), NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
expressionAtom := (^)expressionAtom mathOperator expressionAtom , { ,, PRIMARY_KEY, ), NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
positiveNum := (^)'NUMBER_CONSTANT' , { ,, PRIMARY_KEY, ), NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
===============================================================================

After tracing, got package:
columnName := (^)'ID' , { FROM, -, ,, *, /, %, +, }
constantNum := (^)positiveNum , { FROM, -, ,, *, /, %, +, }
expressionAtom := (^)'STR_LITERAL' , { FROM, ,, -, *, /, %, +, }
expressionAtom := expressionAtom mathOperator (^)expressionAtom , { FROM, -, ,, *, /, %, +, }
expressionAtom := (^)expressionAtom mathOperator expressionAtom , { FROM, ,, -, *, /, %, +, }
columnName := (^)'ID' '.' 'ID' , { FROM, -, ,, *, /, %, +, }
constantNum := (^)'-' positiveNum , { FROM, -, ,, *, /, %, +, }
expressionAtom := (^)constantNum , { FROM, ,, -, *, /, %, +, }
expressionAtom := (^)columnName , { FROM, ,, -, *, /, %, +, }
positiveNum := (^)'NUMBER_CONSTANT' , { FROM, ,, -, *, /, %, +, }
===============================================================================

SHIFT <71> by 'DEFAULT' to <83>
This condition already existed.
From Condition <71> get package:
columnConstraint := 'REFERENCES' (^)tableName , { ,, ), PRIMARY_KEY, NOT_NULL, DEFAULT, REFERENCES, }
-------------------------------------------------------------------------------

After tracing, got package:
columnConstraint := 'REFERENCES' (^)tableName , { ,, ), PRIMARY_KEY, NOT_NULL, DEFAULT, REFERENCES, }
tableName := (^)'ID' , { ,, PRIMARY_KEY, ), NOT_NULL, DEFAULT, REFERENCES, }
===============================================================================

SHIFT <146> by mathOperator to <124>.
This condition already existed.
Condition<146>, REDUCE Production by 'FROM': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Condition<146>, REDUCE Production by ',': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Already existed SHIFT by symbol'-' :
<34>
Try to set it to: REDUCE to:
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
SHIFT <71> by 'REFERENCES' to <140>
Reset Action[This condition already existed.146
]['-'] to REDUCE:
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Already existed SHIFT by symbol'*' :
<33>
Try to set it to: REDUCE to:
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Reset Action[146]['*'] to REDUCE:
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Condition<146>, REDUCE Production by '/': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Already existed SHIFT by symbol'%' :
<26>
Try to set it to: REDUCE to:
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
From Condition <63> get package:
Reset Action[146dataType][' %:= '] to REDUCE:
'INT'pid < 76(^)>: 
, { expressionAtom := NOT_NULLexpressionAtom,  DEFAULTmathOperator,  PRIMARY_KEYexpressionAtom,  REFERENCES
, }Condition<146
>, REDUCE Production by '-------------------------------------------------------------------------------+': 


pid <76After tracing, got package:>: 

expressionAtom dataType:=  expressionAtom:=  mathOperator 'INT'expressionAtom  
(^), { NOT_NULL, DEFAULT, PRIMARY_KEY, REFERENCES, }
===============================================================================

From Condition <146> get package:
mathOperator := '/' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

SHIFT <After tracing, got package:63
> by 'INT' to <147mathOperator> 
:= '/' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================
Condition<147
>, REDUCE Production by 'NOT_NULL': 
pid <19>: 
dataType := 'INT' 
Condition<147>, REDUCE Production by 'DEFAULT': 
pid <19>: 
dataType := 'INT' 
Condition<147>, REDUCE Production by 'PRIMARY_KEY': 
pid <19>: 
dataType := 'INT' 
Condition<147>, REDUCE Production by 'REFERENCES': 
pid <19>: 
dataType := 'INT' 
Already existed REDUCE by symbol '/': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Try to set it to: SHIFT to <40>
Set SHIFT fail in: from condition <146> to condition <40>.
This condition already existed.
From Condition <63> get package:
dataType := 'VARCHAR' (^)'(' positiveNum ')' , { NOT_NULL, DEFAULT, PRIMARY_KEY, REFERENCES, }
-------------------------------------------------------------------------------

After tracing, got package:
dataType := 'VARCHAR' (^)'(' positiveNum ')' , { NOT_NULL, DEFAULT, PRIMARY_KEY, REFERENCES, }
===============================================================================

From Condition <146> get package:
mathOperator := '+' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '+' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <63> by 'VARCHAR' to <148>
From Condition <Already existed REDUCE by symbol '148+> get package:': 

dataTypepid < 76:= >: 
expressionAtom := 'VARCHAR'expressionAtom  mathOperator'('  expressionAtom (^)
positiveNumTry to set it to: SHIFT to < 41')'> 
, { NOT_NULL, DEFAULT, PRIMARY_KEY, REFERENCES, }
-------------------------------------------------------------------------------
Set SHIFT fail in: from condition <
146> to condition <41>.
This condition already existed.
After tracing, got package:
positiveNum := (^)'NUMBER_CONSTANT' , { ), }
dataType := 'VARCHAR' '(' (^)positiveNum ')' , { NOT_NULL, DEFAULT, PRIMARY_KEY, REFERENCES, }
===============================================================================

From Condition <136> get package:
constantNum := '-' (^)positiveNum , { FROM, ,, -, *, /, %, +, }
-------------------------------------------------------------------------------
SHIFT <
148> by '(' to <149>
From Condition <149> get package:
After tracing, got package:
positiveNum positiveNum:=  := (^)'NUMBER_CONSTANT''NUMBER_CONSTANT'  (^), { , { FROM, )-, , },, 
*-------------------------------------------------------------------------------, 
/, 
%, +After tracing, got package:, 
}
positiveNumconstantNum  := := '-''NUMBER_CONSTANT'  (^)positiveNum(^) , { , { ), FROM}, 
,, ===============================================================================-, 
*
, /, %, +, }
===============================================================================

SHIFT <149> by 'NUMBER_CONSTANT' to <70>
This condition already existed.
From Condition <149> get package:
SHIFT <dataType136 > by ':= -' to <150'VARCHAR'> 
'(' positiveNum (^)')' , { NOT_NULL, DEFAULT, PRIMARY_KEY, REFERENCES, }
-------------------------------------------------------------------------------

After tracing, got package:
dataType := 'VARCHAR' '(' positiveNum (^)')' , { NOT_NULL, DEFAULT, PRIMARY_KEY, REFERENCES, }
===============================================================================

From Condition <150> get package:
positiveNum := 'NUMBER_CONSTANT' (^), { FROM, -, ,, *, /, %, +, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := 'NUMBER_CONSTANT' (^), { FROM, -, ,, *, /, %, +, }
===============================================================================

SHIFT <149> by positiveNum to <151>.
From Condition <151> get package:SHIFT <
150dataType> by ' NUMBER_CONSTANT:= ' to <152'VARCHAR'> 
'(' positiveNum ')' (^), { NOT_NULL, DEFAULT, PRIMARY_KEY, REFERENCES, }
Condition<-------------------------------------------------------------------------------152
>, REDUCE Production by '
FROM': 
After tracing, got package:pid <
79>: 
dataType positiveNum:=  := 'VARCHAR''NUMBER_CONSTANT'  
'(' Condition<152positiveNum>, REDUCE Production by ' -': ')'
 pid <79(^)>: 
, { positiveNum NOT_NULL:= , DEFAULT, 'NUMBER_CONSTANT'PRIMARY_KEY , 
REFERENCES, }Condition<152
>, REDUCE Production by '===============================================================================,': 


pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<152>, REDUCE Production by '*': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<152>, REDUCE Production by '/': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<152>, REDUCE Production by '%': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' SHIFT <
151Condition<> by '152)>, REDUCE Production by '' to <+153': >

pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<153>, REDUCE Production by 'NOT_NULL': 
pid <21>: 
dataType := 'VARCHAR' '(' positiveNum ')' 
Condition<153>, REDUCE Production by 'DEFAULT': 
pid <21>: 
dataType := 'VARCHAR' '(' positiveNum ')' 
Condition<153>, REDUCE Production by 'PRIMARY_KEY': 
pid <21>: 
dataType := 'VARCHAR' '(' positiveNum ')' 
Condition<153>, REDUCE Production by 'REFERENCES': 
From Condition <pid <21150>: 
> get package:dataType 
:= 'VARCHAR' constantNum'('  := positiveNum ')' '-'
 positiveNum (^), { FROM, ,, -, *, /, %, +, }
-------------------------------------------------------------------------------

After tracing, got package:
constantNum := '-' positiveNum (^), { FROM, ,, -, *, /, %, +, }
===============================================================================

SHIFT <150> by positiveNum to <154>.
Condition<154>, REDUCE Production by 'FROM': 
pid <77>: 
constantNum := '-' positiveNum 
From Condition <Condition<15462>, REDUCE Production by '> get package:,': 

createDefinitionspid < 77:= >: 
constantNum := '(' '-' createDefinitionpositiveNum  (^)
$__ann_31 Condition<154')'>, REDUCE Production by ' -': 
, { pid <77$eof$>: 
, constantNum} := 
'-'createDefinitions  positiveNum:=  
'('Condition< 154createDefinition>, REDUCE Production by ' *': (^)
')'pid < 77, { >: 
constantNum$eof$ , := }'-'
 positiveNum------------------------------------------------------------------------------- 


Condition<154>, REDUCE Production by '/': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<154>, REDUCE Production by '%': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<154>, REDUCE Production by '+': 
pid <77>: 
constantNum := '-' positiveNum 
From Condition <136> get package:
After tracing, got package:expressionAtom 
:= constantNum$__ann_31  := (^), { (^)$__ann_31FROM , -, ',', , *createDefinition,  /, %, { , +), , },, 
}
-------------------------------------------------------------------------------createDefinitions 
:= 
'(' After tracing, got package:createDefinition
 expressionAtom(^) $__ann_31:=  constantNum')'  (^), { , { $eof$FROM, , }-, 
,$__ann_31,  *:= , /(^), ','% , +createDefinition,  }
, { ===============================================================================)
, ,
, }
createDefinitions := '(' createDefinition (^)')' , { $eof$, }
===============================================================================

SHIFT <136> by constantNum to <155>.
Condition<155>, REDUCE Production by 'FROM': 
pid <73>: 
expressionAtom := constantNum 
Condition<155>, REDUCE Production by '-': 
pid <73>: 
expressionAtom := constantNum 
Condition<155>, REDUCE Production by ',': 
pid <73>: 
expressionAtom := constantNum 
Condition<155>, REDUCE Production by '*': 
pid <73>: 
expressionAtom := constantNum 
Condition<155>, REDUCE Production by '/': 
pid <73SHIFT <>: 
62expressionAtom> by  := createDefinitionconstantNum to < 156
>.Condition<155
>, REDUCE Production by '%': 
pid <73>: 
expressionAtom := constantNum 
Condition<155>, REDUCE Production by '+': 
pid <73>: 
expressionAtom := constantNum 
From Condition <156> get package:
createDefinitions := '(' createDefinition $__ann_31 (^)')' , { $eof$, }
$__ann_31 := $__ann_31 (^)',' createDefinition , { ), ,, }
-------------------------------------------------------------------------------

After tracing, got package:
From Condition <createDefinitions := '('136 > get package:createDefinition
 $__ann_31 expressionAtom (^):= ')' columnName , { (^)$eof$, { , }FROM, 
-$__ann_31,  ,:= , *, $__ann_31 /, (^)%, ','+ , }createDefinition 
, { -------------------------------------------------------------------------------)
, 
,, }After tracing, got package:

===============================================================================expressionAtom
 
:= columnName (^), { FROM, -, ,, *, /, %, +, }
===============================================================================

SHIFT <156> by $__ann_31 to <157>.
From Condition <157> get package:
SHIFT <createDefinitions136 > by := columnName to <158'('>. 
createDefinition $__ann_31 ')' (^), { $eof$, }
-------------------------------------------------------------------------------
Condition<
158After tracing, got package:>, REDUCE Production by '
FROM': createDefinitions 
:= pid <75'('>: 
 expressionAtom createDefinition:=  columnName $__ann_31 
')' Condition<158(^)>, REDUCE Production by ', { -': $eof$
, pid <75}>: 

expressionAtom=============================================================================== 
:= 
columnName 
Condition<158>, REDUCE Production by ',': 
pid <75>: 
expressionAtom := columnName 
Condition<158>, REDUCE Production by '*': 
pid <75>: 
expressionAtom := columnName 
Condition<158>, REDUCE Production by '/': 
SHIFT <pid <75157>: 
> by 'expressionAtom) ' to <159:= >columnName
 
Condition<158>, REDUCE Production by '%': 
Condition<pid <15975>, REDUCE Production by '>: 
$eof$expressionAtom':  
:= pid <columnName12 >: 

createDefinitions Condition<:= 158'('>, REDUCE Production by ' +createDefinition':  
$__ann_31pid <75 >: 
')'expressionAtom  := 
columnName 
From Condition <157> get package:
From Condition <$__ann_31 := 136> get package:$__ann_31 
',' (^)positiveNumcreateDefinition  := , { )'NUMBER_CONSTANT',  ,, }(^), { 
FROM-------------------------------------------------------------------------------, 
-
, ,, *, /, %, +, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := 'NUMBER_CONSTANT' (^), { FROM, -, ,, *, /, %, +, }
===============================================================================
After tracing, got package:

createDefinition := (^)'ID' dataType $__ann_32 , { ), ,, }
$__ann_31 := $__ann_31 ',' (^)createDefinition , { ), ,, }
===============================================================================

SHIFT <136> by 'NUMBER_CONSTANT' to <152>
This condition already existed.
SHIFT <157> by ',' to <160>
Condition<132>, REDUCE Production by 'FROM': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Already existed SHIFT by symbol'-' :
<34>
Try to set it to: REDUCE to:
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
From Condition <160> get package:
Reset Action[132createDefinition][' -:= '] to REDUCE:
'ID'pid < 76(^)>: 
dataTypeexpressionAtom  := $__ann_32 expressionAtom mathOperator, {  expressionAtom )
, ,Condition<, 132}>, REDUCE Production by ',
': -------------------------------------------------------------------------------

pid <76
>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Already existed SHIFT by symbol'*' :
<33>
Try to set it to: REDUCE to:
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Reset Action[132]['*'] to REDUCE:
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Condition<132>, REDUCE Production by '/': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Already existed SHIFT by symbol'%' :
<26>
Try to set it to: REDUCE to:
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Reset Action[132]['%'] to REDUCE:
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Condition<132>, REDUCE Production by '+': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
After tracing, got package:
dataType := (^)'CHAR' '(' positiveNum ')' , { NOT_NULL, DEFAULT, PRIMARY_KEY, REFERENCES, }
createDefinition := 'ID' (^)dataType $__ann_32 , { ), ,, }
dataType := (^)'INT' , { From Condition <NOT_NULL, DEFAULT, PRIMARY_KEY132, > get package:REFERENCES, 
}
mathOperatordataType  := := (^)'/' 'VARCHAR'(^) , { '('STR_LITERAL , IDpositiveNum,  -, ')'NUMBER_CONSTANT , }, { 
NOT_NULL-------------------------------------------------------------------------------, 
DEFAULT
, PRIMARY_KEY, REFERENCESAfter tracing, got package:, 
}
mathOperator=============================================================================== 
:= 
'/' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <160> by 'ID' to <161>
From Condition <161> get package:
dataType := 'CHAR' (^)'(' positiveNum ')' , { NOT_NULL, DEFAULT, Already existed REDUCE by symbol 'PRIMARY_KEY, /REFERENCES': , }

pid <-------------------------------------------------------------------------------76
>: 

expressionAtom := After tracing, got package:expressionAtom
 dataTypemathOperator  := expressionAtom 
'CHAR'Try to set it to: SHIFT to < 40(^)>'('
 positiveNum ')' , { NOT_NULL, DEFAULT, PRIMARY_KEY, REFERENCES, }
Set SHIFT fail in: from condition <===============================================================================132
> to condition <40
>.
This condition already existed.
From Condition <132> get package:
mathOperator := '+' SHIFT <(^)161, { > by 'CHARSTR_LITERAL' to <, 65ID>, 
-This condition already existed., 
NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '+' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

From Condition <161> get package:
createDefinition := 'ID' dataType (^)$__ann_32 , { ), ,, }
-------------------------------------------------------------------------------

Already existed REDUCE by symbol '+': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Try to set it to: SHIFT to <41>
Set SHIFT fail in: from condition <132> to condition <41>.
This condition already existed.
From Condition <124> get package:
constantNum := '-' (^)positiveNum , { FROM, -, ,, *, /, %, +, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := (^)'NUMBER_CONSTANT' , { FROM, ,, -, *, /, %, +, }
constantNum := '-' (^)positiveNum , { FROM, -, ,, *, /, %, +, }
===============================================================================

SHIFT <124> by '-' to <162>
From Condition <After tracing, got package:
162> get package:
columnConstraint := positiveNum (^):= 'NOT_NULL' 'NUMBER_CONSTANT', {  )(^), , { PRIMARY_KEY, FROM,, , ,NOT_NULL, , -DEFAULT, , *REFERENCES, , /}, %
, +columnConstraint,  }:= 
(^)-------------------------------------------------------------------------------
'PRIMARY_KEY' 
, { )After tracing, got package:, 
PRIMARY_KEY, positiveNum, , := NOT_NULL, DEFAULT, 'NUMBER_CONSTANT'REFERENCES , }(^)
, { FROM$__ann_32,  ,:= , -(^), columnConstraint* , /, , { %, PRIMARY_KEY+, , )}, 
,, ===============================================================================NOT_NULL, 
DEFAULT
, REFERENCES, }
createDefinition := 'ID' dataType (^)$__ann_32 , { ), ,, }
columnConstraint := (^)'DEFAULT' expressionAtom , { ), PRIMARY_KEY, ,, NOT_NULL, DEFAULT, REFERENCES, }
columnConstraint := (^)'REFERENCES' tableName , { ), PRIMARY_KEY, ,, NOT_NULL, DEFAULT, REFERENCES, }
$__ann_32 := (^)$__ann_32 columnConstraint , { PRIMARY_KEY, ), ,, NOT_NULL, DEFAULT, REFERENCES, }
===============================================================================

SHIFT <162> by 'NUMBER_CONSTANT' to <163>
Condition<163>, REDUCE Production by 'FROM': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<163>, REDUCE Production by ',': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<163>, REDUCE Production by '-': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<163>, REDUCE Production by '*': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<163>, REDUCE Production by '/': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<163>, REDUCE Production by '%': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<163>, REDUCE Production by '+': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
SHIFT <161> by dataType to <164>.
From Condition <162> get package:
constantNum := '-' positiveNum (^), { FROM, -, ,, *, /, %, +, }
-------------------------------------------------------------------------------

After tracing, got package:
constantNum := '-' positiveNum (^), { FROM, -, ,, *, /, %, +, }
===============================================================================

From Condition <164> get package:
columnConstraint := 'NOT_NULL' (^), { ), PRIMARY_KEY, ,, NOT_NULL, DEFAULT, REFERENCES, }
-------------------------------------------------------------------------------

After tracing, got package:
columnConstraint := 'NOT_NULL' (^), { ), PRIMARY_KEY, ,, NOT_NULL, DEFAULT, REFERENCES, }
===============================================================================

SHIFT <162> by positiveNum to <165>.
Condition<165>, REDUCE Production by 'FROM': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<165>, REDUCE Production by '-': 
pid <77>: 
constantNum := '-' positiveNum 
SHIFT <Condition<165164>, REDUCE Production by '> by ',NOT_NULL': ' to <166
>
pid <77>: 
constantNum := '-' positiveNum 
Condition<165>, REDUCE Production by '*': 
Condition<pid <16677>, REDUCE Production by '>: 
)constantNum':  
:= pid <22'-'>: 
 columnConstraintpositiveNum  := 
'NOT_NULL'Condition< 165
>, REDUCE Production by '/': Condition<166
>, REDUCE Production by 'pid <77PRIMARY_KEY>: 
': constantNum
 pid <22:= >: 
'-'columnConstraint  positiveNum:=  
'NOT_NULL' Condition<
165Condition<>, REDUCE Production by '166%>, REDUCE Production by '': ,
': pid <77
>: 
pid <constantNum22 >: 
:= columnConstraint '-':=  positiveNum'NOT_NULL'  

Condition<165Condition<>, REDUCE Production by '166+>, REDUCE Production by '': NOT_NULL
': pid <77
>: 
pid <22constantNum>: 
 columnConstraint:=  := '-' 'NOT_NULL'positiveNum  

Condition<166>, REDUCE Production by 'DEFAULT': 
pid <22>: 
columnConstraint := 'NOT_NULL' 
Condition<166>, REDUCE Production by 'REFERENCES': 
pid <22>: 
columnConstraint := 'NOT_NULL' 
From Condition <124> get package:
From Condition <expressionAtom := 164> get package:constantNum 
(^), { FROMcolumnConstraint,  ,:= , -, *, 'PRIMARY_KEY'/ , %, (^)+, { , }), 
PRIMARY_KEY-------------------------------------------------------------------------------, 
,, 
NOT_NULL, DEFAULTAfter tracing, got package:, 
REFERENCES, expressionAtom} := 
constantNum------------------------------------------------------------------------------- 
(^)
, { FROM, ,After tracing, got package:, 
-, columnConstraint* , := /, %, 'PRIMARY_KEY'+ , }(^)
, { ===============================================================================)
, 
PRIMARY_KEY, ,, NOT_NULL, DEFAULT, REFERENCES, }
===============================================================================

SHIFT <124> by constantNum to <167>.
Condition<167>, REDUCE Production by 'FROM': 
pid <73>: 
expressionAtom := constantNum 
Condition<167>, REDUCE Production by ',': 
pid <73>: 
expressionAtom := constantNum 
Condition<167>, REDUCE Production by '-': 
pid <73>: 
expressionAtom := constantNum 
Condition<167SHIFT <>, REDUCE Production by '164*> by '': PRIMARY_KEY
' to <168pid <>73
>: 
expressionAtom := constantNum 
Condition<167>, REDUCE Production by '/': 
Condition<pid <16873>, REDUCE Production by '>: 
)expressionAtom':  := 
constantNum pid <24
>: 
Condition<columnConstraint167 >, REDUCE Production by ':= %': 
'PRIMARY_KEY'pid < 73
>: 
expressionAtom Condition<:= 168constantNum>, REDUCE Production by ' PRIMARY_KEY': 

Condition<pid <24167>: 
>, REDUCE Production by 'columnConstraint+ ': := 
'PRIMARY_KEY'pid <73 >: 

expressionAtom := Condition<168constantNum>, REDUCE Production by ' ,
': 
pid <24>: 
columnConstraint := 'PRIMARY_KEY' 
Condition<168>, REDUCE Production by 'NOT_NULL': 
pid <24>: 
columnConstraint := 'PRIMARY_KEY' 
Condition<168>, REDUCE Production by 'DEFAULT': 
pid <24>: 
columnConstraint := 'PRIMARY_KEY' 
Condition<168>, REDUCE Production by 'REFERENCES': 
pid <24>: 
columnConstraint := 'PRIMARY_KEY' 
From Condition <124> get package:
expressionAtom := columnName (^), { FROM, ,, -, *, /, %, +, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := From Condition <columnName 164> get package:(^), { 
FROM, ,, -$__ann_32,  *:= , /, columnConstraint% , +, (^)}, { 
PRIMARY_KEY===============================================================================, 
)
, ,, NOT_NULL, DEFAULT, REFERENCES, }
-------------------------------------------------------------------------------

After tracing, got package:
$__ann_32 := columnConstraint (^), { PRIMARY_KEY, ), ,, NOT_NULL, DEFAULT, REFERENCES, }
===============================================================================

SHIFT <124> by columnName to <169>.
Condition<169>, REDUCE Production by 'FROM': 
pid <75>: 
expressionAtom := columnName 
Condition<169>, REDUCE Production by ',': 
pid <75>: 
expressionAtom := columnName SHIFT <
164Condition<> by 169columnConstraint>, REDUCE Production by ' to <-170': >.

pid <75>: 
expressionAtom := columnName 
Condition<169>, REDUCE Production by '*': Condition<
170pid <75>, REDUCE Production by '>: 
PRIMARY_KEYexpressionAtom':  
:= pid <18columnName>: 
 $__ann_32
 := Condition<169columnConstraint>, REDUCE Production by ' /': 

Condition<170pid <>, REDUCE Production by '75)>: 
': expressionAtom 
:= columnNamepid <18 >: 

$__ann_32 Condition<169:= >, REDUCE Production by '%columnConstraint':  

pid <75Condition<>: 
170expressionAtom>, REDUCE Production by ' ,:= ': columnName
 
pid <18Condition<>: 
169$__ann_32>, REDUCE Production by ' +:= ': columnConstraint
 pid <75
>: 
expressionAtomCondition< 170:= >, REDUCE Production by 'columnNameNOT_NULL ': 

pid <18>: 
$__ann_32 := columnConstraint 
Condition<170>, REDUCE Production by 'DEFAULT': 
pid <18>: 
$__ann_32 := columnConstraint 
Condition<170>, REDUCE Production by 'REFERENCES': 
pid <18>: 
$__ann_32 := columnConstraint 
From Condition <124> get package:
positiveNum := 'NUMBER_CONSTANT' (^), { FROM, ,, -, *, /, %, +, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := 'NUMBER_CONSTANT' (^), { From Condition <FROM, ,, -164, > get package:*, 
/, %, +, createDefinition} 
:= 'ID'=============================================================================== 
dataType
 $__ann_32 (^), { ), ,, }
$__ann_32 := $__ann_32 (^)columnConstraint , { PRIMARY_KEY, ), ,, NOT_NULL, DEFAULT, REFERENCES, }
-------------------------------------------------------------------------------

SHIFT <124> by 'NUMBER_CONSTANT' to <163>
This condition already existed.
Condition<122>, REDUCE Production by 'FROM': 
pid <52>: 
$__ann_37 := $__ann_37 ',' expressionAtom 
Condition<122>, REDUCE Production by ',': 
pid <52>: 
$__ann_37 := $__ann_37 ',' expressionAtom 
After tracing, got package:
columnConstraint := (^)'NOT_NULL' , { ), PRIMARY_KEY, ,, NOT_NULL, DEFAULT, REFERENCES, }
columnConstraint := (^)'PRIMARY_KEY' , { ), PRIMARY_KEY, ,, NOT_NULL, DEFAULT, REFERENCES, }
From Condition <createDefinition := 'ID'122 > get package:dataType
 $__ann_32 mathOperator(^) , { := ), ,'/',  }
(^)columnConstraint, {  := STR_LITERAL, (^)ID, 'DEFAULT'- , NUMBER_CONSTANTexpressionAtom,  }
, { )-------------------------------------------------------------------------------, 
PRIMARY_KEY
, ,, After tracing, got package:NOT_NULL
, mathOperatorDEFAULT , := REFERENCES, }'/'
 columnConstraint := (^), { (^)STR_LITERAL, 'REFERENCES'ID , -tableName,  NUMBER_CONSTANT, }, { 
)===============================================================================, 
PRIMARY_KEY
, ,, NOT_NULL, DEFAULT, REFERENCES, }
$__ann_32 := $__ann_32 (^)columnConstraint , { PRIMARY_KEY, ), ,, NOT_NULL, DEFAULT, REFERENCES, }
===============================================================================

SHIFT <122> by '/' to <40>
This condition already existed.
From Condition <122> get package:
mathOperator := '+' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '+' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <164> by $__ann_32 to <171>.
From Condition <171> get package:
columnConstraint SHIFT <:= 122'NOT_NULL'> by ' +' to <41(^)>, { 
)This condition already existed., 
PRIMARY_KEY, ,, NOT_NULL, DEFAULT, REFERENCES, }
-------------------------------------------------------------------------------

After tracing, got package:
columnConstraint := 'NOT_NULL' (^), { ), PRIMARY_KEY, ,, NOT_NULL, DEFAULT, REFERENCES, }
===============================================================================

SHIFT <From Condition <171120> by '> get package:NOT_NULL' to <166
>
columnNameThis condition already existed. 
:= 'ID' (^), { FROM, -, ,, *, /, %, +, }
columnName := 'ID' (^)'.' 'ID' , { FROM, -, ,, *, /, %, +, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID' (^), { FROM, -, ,, *, /, %, +, }
columnName := 'ID' (^)'.' 'ID' , { FROM, -, ,, *, /, %, +, }
===============================================================================
From Condition <
171> get package:
columnConstraint := 'PRIMARY_KEY' (^), { ), PRIMARY_KEY, ,, NOT_NULL, DEFAULT, REFERENCES, }
-------------------------------------------------------------------------------

After tracing, got package:
columnConstraint := 'PRIMARY_KEY' (^), { ), PRIMARY_KEY, ,, NOT_NULL, DEFAULT, REFERENCES, }
===============================================================================

SHIFT <120> by 'ID' to <125>
This condition already existed.
From Condition <120SHIFT <> get package:171
> by 'PRIMARY_KEY' to <168constantNum> 
:= This condition already existed.
positiveNum (^), { FROM, -, ,, *, /, %, +, }
-------------------------------------------------------------------------------

After tracing, got package:
Condition<constantNum171 >, REDUCE Production by ':= )': positiveNum
 pid <16(^)>: 
, { createDefinitionFROM , := -, ,'ID',  *dataType,  /$__ann_32,  %, 
+, }Condition<171
>, REDUCE Production by '===============================================================================,
': 

pid <16>: 
createDefinition := 'ID' dataType $__ann_32 
From Condition <171> get package:
columnConstraint := 'DEFAULT' (^)expressionAtom , { ), PRIMARY_KEY, ,, NOT_NULL, DEFAULT, REFERENCES, }
-------------------------------------------------------------------------------
SHIFT <
120> by positiveNum to <128>.
This condition already existed.
From Condition <120> get package:
expressionAtom := 'STR_LITERAL' (^), { FROM, -, ,, *, /, %, +, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := 'STR_LITERAL' (^), { FROM, -, ,, *, /, %, +, }
===============================================================================

SHIFT <120> by 'STR_LITERAL' to <143>
This condition already existed.
From Condition <120> get package:
constantNum := '-' (^)positiveNum , { FROM, -, ,, *, /, %, +, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := (^)'NUMBER_CONSTANT' , { FROM, ,, -, *, /, %, +, }
constantNum := '-' (^)positiveNum , { FROM, -, ,, *, /, %, +, }
===============================================================================

SHIFT <120> by '-' to <162>
This condition already existed.
From Condition <120> get package:
expressionAtom := constantNum (^), { FROM, -, ,, *, /, %, +, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := constantNum (^), { FROM, -, ,, *, /, %, +, }
===============================================================================

SHIFT <120> by constantNum to <155>.
This condition already existed.
From Condition <120> get package:
expressionAtom := columnName (^), { FROM, -, ,, *, /, %, +, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := columnName (^), { FROM, -, ,, *, /, %, +, }
===============================================================================

SHIFT <120> by columnName to <158>.
This condition already existed.
From Condition <120> get package:
positiveNum := 'NUMBER_CONSTANT' (^), { FROM, -, ,, *, /, %, +, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := 'NUMBER_CONSTANT' (^), { FROM, -, ,, *, /, %, +, }
===============================================================================

After tracing, got package:
columnName := (^)'ID' '.' 'ID' , { ), PRIMARY_KEY, ,, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
constantNum := (^)'-' positiveNum , { ), PRIMARY_KEY, ,, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
expressionAtom := (^)constantNum , { PRIMARY_KEY, ), ,, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
expressionAtom := (^)columnName , { PRIMARY_KEY, ), ,, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
columnConstraint := 'DEFAULT' (^)expressionAtom , { ), PRIMARY_KEY, ,, NOT_NULL, DEFAULT, REFERENCES, }
SHIFT <columnName120 > by ':= NUMBER_CONSTANT' to <152(^)>'ID'
 , { This condition already existed.)
, PRIMARY_KEY, ,, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
constantNum := (^)positiveNum , { ), PRIMARY_KEY, ,, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
expressionAtom := (^)'STR_LITERAL' , { PRIMARY_KEY, ), ,, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
expressionAtom := (^)expressionAtom mathOperator expressionAtom , { PRIMARY_KEY, ), ,, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
positiveNum := (^)'NUMBER_CONSTANT' , { PRIMARY_KEY, ), ,, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
===============================================================================

From Condition <69> get package:
mathOperator := '/' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '/' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <171> by 'DEFAULT' to <172>
SHIFT <69From Condition <> by '/' to <40172>> get package:

This condition already existed.
columnName := 'ID' (^)'.' 'ID' , { ), PRIMARY_KEY, ,, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
columnName := 'ID' (^), { ), PRIMARY_KEY, ,, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID' (^)'.' 'ID' , { ), PRIMARY_KEY, ,, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
columnName := 'ID' (^), { ), PRIMARY_KEY, ,, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
From Condition <===============================================================================
69
> get package:
mathOperator := '+' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '+' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <172> by 'ID' to <173>
From Condition <173> get package:
columnName := 'ID' '.' (^)'ID' SHIFT <, { 69)> by ', +PRIMARY_KEY' to <41, >,, 
NOT_NULLThis condition already existed., 
DEFAULT, REFERENCES, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID' '.' (^)'ID' , { ), PRIMARY_KEY, ,, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
===============================================================================

From Condition <69> get package:
$__ann_37 := ',' (^)expressionAtom , { FROM, ,, }
-------------------------------------------------------------------------------

SHIFT <173> by '.' to <174>
From Condition <174> get package:
columnName := 'ID' '.' 'ID' (^), { ), PRIMARY_KEY, ,, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID' '.' 'ID' (^), { ), PRIMARY_KEY, ,, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
===============================================================================

SHIFT <174> by 'ID' to <175>
Condition<175>, REDUCE Production by ')': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<175>, REDUCE Production by 'PRIMARY_KEY': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<175>, REDUCE Production by ',': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<175>, REDUCE Production by 'NOT_NULL': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<175>, REDUCE Production by 'DEFAULT': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<175>, REDUCE Production by 'REFERENCES': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<175>, REDUCE Production by '*': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<175>, REDUCE Production by '/': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<175>, REDUCE Production by '%': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<175>, REDUCE Production by '+': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<175>, REDUCE Production by '-': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<173>, REDUCE Production by ')': 
pid <68>: 
columnName := 'ID' 
Condition<173>, REDUCE Production by 'PRIMARY_KEY': 
pid <68>: 
columnName := 'ID' 
Condition<173>, REDUCE Production by ',': 
pid <68>: 
columnName := 'ID' 
Condition<173>, REDUCE Production by 'NOT_NULL': 
pid <68>: 
columnName := 'ID' 
Condition<173>, REDUCE Production by 'DEFAULT': 
pid <68>: 
columnName := 'ID' 
Condition<173>, REDUCE Production by 'REFERENCES': 
pid <68>: 
columnName := 'ID' 
Condition<173>, REDUCE Production by '*': 
pid <68>: 
columnName := 'ID' 
Condition<173>, REDUCE Production by '/': 
pid <68>: 
columnName := 'ID' 
Condition<173>, REDUCE Production by '%': 
pid <68>: 
columnName := 'ID' 
Condition<173>, REDUCE Production by '+': 
pid <68>: 
columnName := 'ID' 
Condition<173>, REDUCE Production by '-': 
pid <68>: 
columnName := 'ID' 
From Condition <172> get package:
constantNum := '-' (^)positiveNum , { ), PRIMARY_KEY, ,, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
-------------------------------------------------------------------------------
After tracing, got package:

columnName := (^)'ID' '.' 'ID' , { FROM, ,, -, *, /, %, +, }
constantNum := (^)'-' positiveNum , { FROM, ,, -, *, /, %, +, }
expressionAtom := (^)constantNum , { FROM, -, ,, *, /, %, +, }
expressionAtom := (^)columnName , { FROM, -, ,, *, /, %, +, }
$__ann_37 := ',' (^)expressionAtom , { FROM, ,, }
After tracing, got package:columnName
 := positiveNum := (^)(^)'ID''NUMBER_CONSTANT'  , { , { PRIMARY_KEY, )FROM, , ,, ,NOT_NULL, , DEFAULT-, , REFERENCES, **, , //, , %, %+, , -, }+
, constantNum} := 
'-'constantNum  := (^)positiveNum (^)positiveNum, {  ), , { PRIMARY_KEY, FROM,, , ,NOT_NULL, , -DEFAULT, , *REFERENCES, , /*, , %/, , +%, , }+, 
-expressionAtom,  }:= 
(^)===============================================================================
'STR_LITERAL'
 , { FROM, -, ,, *, /, %, +, }
expressionAtom := (^)expressionAtom mathOperator expressionAtom , { FROM, -, ,, *, /, %, +, }
positiveNum := (^)'NUMBER_CONSTANT' , { FROM, -, ,, *, /, %, +, }
===============================================================================

SHIFT <172> by '-' to <176>
From Condition <176> get package:
positiveNum := 'NUMBER_CONSTANT' (^), { PRIMARY_KEY, ), ,, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := 'NUMBER_CONSTANT' (^), { PRIMARY_KEY, ), ,, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
===============================================================================

SHIFT <69> by ',' to <177>
From Condition <177> get package:
columnNameSHIFT < 176:= > by 'NUMBER_CONSTANT' to <178'ID'> 
(^)'.' 'ID' , { FROM, ,, -, *, /, %, +, }
Condition<columnName178 >, REDUCE Production by ':= PRIMARY_KEY': 
'ID' pid <79(^)>: 
, { positiveNumFROM , := ,, -, 'NUMBER_CONSTANT'* , 
/, %Condition<178, >, REDUCE Production by '+), ': }

pid <79------------------------------------------------------------------------------->: 

positiveNum
 := After tracing, got package:'NUMBER_CONSTANT'
 
columnName := Condition<178'ID'>, REDUCE Production by ' ,': (^)
'.' 'ID'pid < 79, { >: 
positiveNumFROM := , 'NUMBER_CONSTANT', , -
, *, /, %, Condition<+178, >, REDUCE Production by '}NOT_NULL': 

pid <79columnName>: 
 := positiveNum := 'ID''NUMBER_CONSTANT'  
(^), { Condition<178FROM>, REDUCE Production by ', DEFAULT,': , 
-pid <79, >: 
*positiveNum,  /:= , %, 'NUMBER_CONSTANT'+ , 
}
Condition<178===============================================================================>, REDUCE Production by 'REFERENCES
': 

pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<178>, REDUCE Production by '*': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<178>, REDUCE Production by '/': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<178>, REDUCE Production by '%': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<178>, REDUCE Production by '+': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<178>, REDUCE Production by '-': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
SHIFT <177> by 'ID' to <179>
From Condition <179> get package:
From Condition <columnName := 176> get package:'ID'
 '.' constantNum(^) 'ID':=  , { '-' FROM, positiveNum, , -, (^)*, { , /), , %PRIMARY_KEY, , +,, , }NOT_NULL, 
DEFAULT-------------------------------------------------------------------------------, 
REFERENCES, 
*, /, After tracing, got package:%
, columnName+ , := -, }'ID' 
'.'------------------------------------------------------------------------------- 
(^)
'ID' After tracing, got package:
, { constantNum FROM:= , ,, '-'- , *positiveNum,  /, %(^), , { +, )}, 
PRIMARY_KEY, ===============================================================================,, 
NOT_NULL
, DEFAULT, REFERENCES, *, /, %, +, -, }
===============================================================================

SHIFT <179> by '.' to <138>
This condition already existed.
Condition<179>, REDUCE Production by 'FROM': 
pid <68>: 
columnName := 'ID' 
Condition<179>, REDUCE Production by ',': 
pid <68>: 
columnName := 'ID' 
Condition<179>, REDUCE Production by '-': 
pid <68>: 
columnName := 'ID' 
Condition<179SHIFT <>, REDUCE Production by '176*> by ': positiveNum
 to <180pid <>.68
>: 
columnName := 'ID' 
Condition<179>, REDUCE Production by '/': 
pid <68>: 
columnName := 'ID' 
Condition<Condition<179180>, REDUCE Production by '>, REDUCE Production by '%)': ': 

pid <68>: 
pid <columnName77 >: 
:= constantNum'ID'  := 
'-'Condition<179 >, REDUCE Production by 'positiveNum+ ': 

Condition<pid <68180>: 
>, REDUCE Production by 'columnNamePRIMARY_KEY ': := 
'ID'pid < 77
>: 
constantNum := '-' positiveNum 
Condition<180>, REDUCE Production by ',': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<180>, REDUCE Production by 'NOT_NULL': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<180>, REDUCE Production by 'DEFAULT': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<180>, REDUCE Production by 'REFERENCES': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<180>, REDUCE Production by '*': 
From Condition <pid <77177>: 
> get package:constantNum 
:= '-' positiveNum constantNum
 := Condition<180'-'>, REDUCE Production by ' /': (^)
positiveNumpid < 77, { >: 
constantNumFROM , := ,, '-'- , positiveNum* , 
/, Condition<180%>, REDUCE Production by ', %+': , 
}pid <77
>: 
-------------------------------------------------------------------------------constantNum 
:= 
'-' positiveNum 
Condition<180>, REDUCE Production by '+': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<180>, REDUCE Production by '-': 
pid <77>: 
constantNum := '-' positiveNum 
After tracing, got package:
positiveNum := (^)'NUMBER_CONSTANT' , { FROM, -, ,, *, /, %, +, }
constantNum := '-' (^)positiveNum , { FROM, ,, -, *, /, %, +, }
===============================================================================

From Condition <172> get package:
expressionAtom := constantNum (^), { PRIMARY_KEY, ), ,, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := constantNum (^), { PRIMARY_KEY, ), ,, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
===============================================================================

SHIFT <177> by '-' to <150>
This condition already existed.
SHIFT <From Condition <172177> by > get package:constantNum to <
181expressionAtom>. 
:= constantNum (^), { FROM, -, ,, *, /, %, +, }
-------------------------------------------------------------------------------Condition<
181
>, REDUCE Production by 'PRIMARY_KEYAfter tracing, got package:': 

expressionAtom pid <:= 73constantNum>: 
 expressionAtom (^):= , { constantNum FROM, 
-, ,Condition<, 181*>, REDUCE Production by ', )/': , 
%, pid <+73, >: 
}expressionAtom 
:= ===============================================================================constantNum
 

Condition<181>, REDUCE Production by ',': 
pid <73>: 
expressionAtom := constantNum 
Condition<181>, REDUCE Production by 'NOT_NULL': 
pid <73>: 
expressionAtom := constantNum 
Condition<181>, REDUCE Production by 'DEFAULT': 
pid <73>: 
expressionAtom := constantNum 
Condition<181>, REDUCE Production by 'REFERENCES': 
pid <73>: 
expressionAtom := constantNum 
Condition<181>, REDUCE Production by '*': 
pid <73>: 
expressionAtom := constantNum 
Condition<181>, REDUCE Production by '/': 
pid <SHIFT <73177>: 
> by expressionAtomconstantNum  to <:= 155constantNum>. 

This condition already existed.Condition<181
>, REDUCE Production by '%': 
pid <73>: 
expressionAtom := constantNum 
Condition<181>, REDUCE Production by '+': 
pid <73>: 
expressionAtom := constantNum 
Condition<181>, REDUCE Production by '-': 
pid <73>: 
expressionAtom := constantNum 
From Condition <177> get package:
expressionAtom := columnName (^), { FROM, -, ,, *, /, %, +, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := columnName (^), { FROM, -, ,, *, /, %, +, }
===============================================================================

From Condition <172> get package:
expressionAtom := columnName (^), { PRIMARY_KEY, ), ,, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := columnName (^), { PRIMARY_KEY, ), ,, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
===============================================================================

SHIFT <177> by columnName to <158>.
This condition already existed.
From Condition <SHIFT <172177> by > get package:columnName to <182
>.
$__ann_37 := ',' expressionAtom (^), { FROM, ,, }
expressionAtom Condition<:= 182expressionAtom>, REDUCE Production by ' PRIMARY_KEY': (^)
mathOperator pid <expressionAtom75 >: 
expressionAtom, {  := FROM, columnName- , 
,, *Condition<, 182/>, REDUCE Production by ', )%': , 
+pid <, 75}>: 

expressionAtom------------------------------------------------------------------------------- 
:= 
columnName 
Condition<182>, REDUCE Production by ',': 
pid <75>: 
expressionAtom := columnName 
Condition<182>, REDUCE Production by 'NOT_NULL': 
pid <75>: 
expressionAtom := columnName 
Condition<182>, REDUCE Production by 'DEFAULT': 
pid <75>: 
expressionAtom := columnName 
Condition<182>, REDUCE Production by 'REFERENCES': 
pid <75>: 
expressionAtom := columnName 
Condition<182>, REDUCE Production by '*': 
pid <75>: 
expressionAtom := columnName 
Condition<182>, REDUCE Production by '/': 
pid <75>: 
expressionAtom := columnName 
Condition<182>, REDUCE Production by '%': 
pid <75>: 
expressionAtom := columnName 
Condition<182>, REDUCE Production by '+': 
pid <75>: 
expressionAtom := columnName 
Condition<182>, REDUCE Production by '-': 
pid <75>: 
expressionAtom := columnName 
After tracing, got package:
From Condition <mathOperator := (^)172> get package:'/' 
, { STR_LITERAL, IDcolumnConstraint,  -:= , NUMBER_CONSTANT, }'DEFAULT'
 expressionAtommathOperator  := (^), { (^)'+') , PRIMARY_KEY, { , ,STR_LITERAL, , NOT_NULLID, , DEFAULT-, , REFERENCESNUMBER_CONSTANT, , }}

$__ann_37expressionAtom  := := ','expressionAtom  expressionAtom(^) mathOperator (^), { expressionAtom FROM, , { ,, PRIMARY_KEY}, 
)mathOperator,  ,:= , NOT_NULL(^), '*'DEFAULT , REFERENCES, { , *STR_LITERAL, , /ID, , %-, , +NUMBER_CONSTANT, , -}, }

mathOperator------------------------------------------------------------------------------- 
:= 
(^)'%' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'-' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
expressionAtom := expressionAtom (^)mathOperator expressionAtom , { FROM, -, ,, *, /, %, +, }
===============================================================================

SHIFT <177> by expressionAtom to <183>.
After tracing, got package:
mathOperator := (^)'/' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'+' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
columnConstraint := 'DEFAULT' expressionAtom (^), { ), PRIMARY_KEY, ,, NOT_NULL, DEFAULT, REFERENCES, }
From Condition <mathOperator := (^)183'*'> get package: 
, { STR_LITERAL, ID, mathOperator- , := NUMBER_CONSTANT, }'/'
 mathOperator := (^), { (^)STR_LITERAL'%',  ID, -, { , NUMBER_CONSTANTSTR_LITERAL, , }ID, 
--------------------------------------------------------------------------------, 
NUMBER_CONSTANT
, }After tracing, got package:

mathOperator mathOperator:=  := (^)'-''/'  , { (^), { STR_LITERAL, STR_LITERALID, , ID-, , -NUMBER_CONSTANT, , NUMBER_CONSTANT}, 
}expressionAtom 
:= ===============================================================================
expressionAtom
 (^)mathOperator expressionAtom , { PRIMARY_KEY, ), ,, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
===============================================================================

SHIFT <183> by '/' to <40>
This condition already existed.
From Condition <183> get package:
mathOperator := '+' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '+' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <172> by expressionAtom to <184>.
From Condition <184> get package:
SHIFT <mathOperator183 > by ':= +' to <41'/'> 
(^)This condition already existed., { 
STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '/' (^)Condition<, { 183STR_LITERAL>, REDUCE Production by ', FROMID': , 
-, pid <NUMBER_CONSTANT53, >: 
}$__ann_37
 ===============================================================================:= 
','
 expressionAtom 
Condition<183>, REDUCE Production by ',': 
pid <53>: 
$__ann_37 := ',' expressionAtom 
SHIFT <184From Condition <> by '/' to <40183>> get package:

This condition already existed.
mathOperator := '*' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '*' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

From Condition <184> get package:
mathOperator := '+' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '+' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================
SHIFT <183
> by '*' to <33>
This condition already existed.
SHIFT <184> by '+' to <41>
From Condition <This condition already existed.
183> get package:
mathOperator := '%' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

Condition<After tracing, got package:184
>, REDUCE Production by 'mathOperator) ': := 
'%'pid < 23(^)>: 
, { columnConstraintSTR_LITERAL , := ID, -'DEFAULT',  NUMBER_CONSTANTexpressionAtom,  }

Condition<===============================================================================184
>, REDUCE Production by '
PRIMARY_KEY': 
pid <23>: 
columnConstraint := 'DEFAULT' expressionAtom 
Condition<184>, REDUCE Production by ',': 
pid <23>: 
columnConstraint := 'DEFAULT' expressionAtom 
Condition<184>, REDUCE Production by 'NOT_NULL': 
pid <23>: 
columnConstraint := 'DEFAULT' expressionAtom 
Condition<184>, REDUCE Production by 'DEFAULT': 
pid <23>: 
columnConstraint := 'DEFAULT' expressionAtom 
Condition<184>, REDUCE Production by 'REFERENCES': 
SHIFT <pid <23183>: 
> by 'columnConstraint% ' to <26:= >
'DEFAULT'This condition already existed. 
expressionAtom 
From Condition <184> get package:
From Condition <mathOperator := 183> get package:'*' 
(^), { STR_LITERAL, mathOperatorID , := -, NUMBER_CONSTANT, '-'} 
(^)-------------------------------------------------------------------------------, { 
STR_LITERAL
, ID, -After tracing, got package:, 
NUMBER_CONSTANT, mathOperator} := 
'*'------------------------------------------------------------------------------- 
(^)
, { STR_LITERALAfter tracing, got package:, 
ID, mathOperator- , := NUMBER_CONSTANT, }'-'
 ===============================================================================
(^)
, { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <184> by '*' to <33>
This condition already existed.
From Condition <184> get package:
mathOperator := SHIFT <'%'183 > by '-(^)' to <34, { >
STR_LITERALThis condition already existed., 
ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '%' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

From Condition <183> get package:
expressionAtom := expressionAtom mathOperator (^)expressionAtom , { FROM, -, ,, *, /, %, +, }
-------------------------------------------------------------------------------

SHIFT <184> by '%' to <26>
This condition already existed.
From Condition <184> get package:
mathOperator := '-' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '-' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <184> by '-' to <34>
This condition already existed.
From Condition <184> get package:
expressionAtom := expressionAtom mathOperator (^)expressionAtom , { PRIMARY_KEY, ), ,, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := (^)'ID' , { FROM, -, ,, *, /, %, +, }
constantNum := (^)positiveNum , { FROM, -, ,, *, /, %, +, }
expressionAtom := (^)'STR_LITERAL' , { FROM, ,, -, *, /, %, +, }
expressionAtom := expressionAtom mathOperator (^)expressionAtom , { FROM, -, ,, *, /, %, +, }
expressionAtom := (^)expressionAtom mathOperator expressionAtom , { FROM, ,, -, *, /, %, +, }
columnName := (^)'ID' '.' 'ID' , { FROM, -, ,, *, /, %, +, }
constantNum := (^)'-' positiveNum , { FROM, -, ,, *, /, %, +, }
expressionAtom := (^)constantNum , { FROM, ,, -, *, /, %, +, }
expressionAtom := (^)columnName , { FROM, ,, -, *, /, %, +, }
positiveNum := (^)'NUMBER_CONSTANT' , { FROM, ,, -, *, /, %, +, }
===============================================================================

SHIFT <183> by mathOperator to <124>.
This condition already existed.
After tracing, got package:
columnName := (^)'ID' , { PRIMARY_KEY, ), ,, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
constantNum := (^)positiveNum , { PRIMARY_KEY, ), ,, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
expressionAtom := (^)'STR_LITERAL' , { ), PRIMARY_KEY, ,, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
From Condition <expressionAtom := 177expressionAtom> get package: 
mathOperator (^)expressionAtomconstantNum  := , { PRIMARY_KEYpositiveNum,  ), ,(^), , { NOT_NULL, FROMDEFAULT, , ,REFERENCES, , -*, , */, , /%, , %+, , +-, , }}

-------------------------------------------------------------------------------expressionAtom 
:= 
(^)expressionAtom After tracing, got package:
mathOperator constantNum expressionAtom:=  positiveNum, {  ), (^)PRIMARY_KEY, { , ,FROM, , NOT_NULL,, , DEFAULT-, , REFERENCES*, , */, , /%, , %+, , +}, 
-===============================================================================, 
}

columnName := (^)'ID' '.' 'ID' , { PRIMARY_KEY, ), ,, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
constantNum := (^)'-' positiveNum , { PRIMARY_KEY, ), ,, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
expressionAtom := (^)constantNum , { ), PRIMARY_KEY, ,, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
expressionAtom := (^)columnName , { ), PRIMARY_KEY, ,, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
positiveNum := (^)'NUMBER_CONSTANT' , { ), PRIMARY_KEY, ,, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
===============================================================================

SHIFT <177> by positiveNum to <141>.
This condition already existed.
From Condition <177> get package:
expressionAtom := 'STR_LITERAL' (^), { FROM, -, ,, *, /, %, +, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := 'STR_LITERAL' (^), { FROM, -, ,, *, /, %, +, }
===============================================================================

SHIFT <184> by mathOperator to <185>.
From Condition <185> get package:
columnName := 'ID' (^), { PRIMARY_KEY, ), ,, NOT_NULL, DEFAULTSHIFT <, 177REFERENCES> by ', STR_LITERAL*' to <, 143/>, 
%, This condition already existed.+
, -, }
columnName := 'ID' (^)'.' 'ID' , { PRIMARY_KEY, ), ,, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID' (^), { PRIMARY_KEY, ), ,, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
columnName := 'ID' (^)'.' 'ID' , { PRIMARY_KEY, ), ,, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
===============================================================================

From Condition <177> get package:
positiveNum := 'NUMBER_CONSTANT' (^), { FROM, -, ,, *, /, %, +, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := 'NUMBER_CONSTANT' (^), { FROM, -, ,, *, /, %, +, }
===============================================================================

SHIFT <185> by 'ID' to <186>
Condition<186>, REDUCE Production by 'PRIMARY_KEY': 
pid <68>: 
columnName := 'ID' 
Condition<186>, REDUCE Production by ')': 
pid <68>: 
columnName := 'ID' 
Condition<186>, REDUCE Production by ',': 
pid <68>: 
columnName := 'ID' 
Condition<186SHIFT <>, REDUCE Production by '177NOT_NULL> by '': NUMBER_CONSTANT
' to <pid <15268>>: 

columnNameThis condition already existed. 
:= 'ID' 
Condition<186>, REDUCE Production by 'DEFAULT': 
pid <68>: 
columnName := 'ID' 
Condition<186>, REDUCE Production by 'REFERENCES': 
pid <68>: 
columnName := 'ID' 
Condition<186>, REDUCE Production by '*': 
pid <68>: 
columnName := 'ID' 
Condition<186>, REDUCE Production by '/': 
pid <68>: 
columnName := 'ID' 
Condition<Condition<69186>, REDUCE Production by '>, REDUCE Production by 'FROM%': ': 

pid <68pid <>: 
51columnName>: 
 := selectElements 'ID':=  expressionAtom
 
Condition<186>, REDUCE Production by '+': 
pid <68>: 
columnName := 'ID' 
Condition<186>, REDUCE Production by '-': 
pid <68>: 
columnName := 'ID' 
From Condition <69> get package:
From Condition <mathOperator := 186> get package:'*'
 (^), { columnName STR_LITERAL:= , ID, -'ID',  NUMBER_CONSTANT, '.'} 
(^)-------------------------------------------------------------------------------'ID'
 
, { PRIMARY_KEYAfter tracing, got package:, 
), mathOperator, , := NOT_NULL, DEFAULT'*',  REFERENCES, *(^), , { /, STR_LITERAL%, , ID, +-, , -NUMBER_CONSTANT, , }}

-------------------------------------------------------------------------------===============================================================================



After tracing, got package:
columnName := 'ID' '.' (^)'ID' , { PRIMARY_KEY, ), ,, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
===============================================================================

SHIFT <69> by '*' to <33>
This condition already existed.
SHIFT <186> by '.' to <187>
From Condition <187> get package:
columnName := 'ID' '.' 'ID' (^), { PRIMARY_KEY, ), ,, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
-------------------------------------------------------------------------------

From Condition <After tracing, got package:
64columnName> get package: := 
'ID' '.' selectStatement'ID' :=  (^), { 'SELECT'PRIMARY_KEY , )selectElements,  ,, (^)NOT_NULLfromClause,  DEFAULT'WHERE',  REFERENCES, expression* , /, , { %, +$eof$, , -}, }

selectStatement ===============================================================================:= 
'SELECT'
 selectElements (^)fromClause , { $eof$, }
selectStatement := 'SELECT' selectElements (^)fromClause orderByClause , { $eof$, }
selectStatement := 'SELECT' selectElements (^)fromClause 'WHERE' expression orderByClause , { $eof$, }
-------------------------------------------------------------------------------

SHIFT <187> by 'ID' to <188>
Condition<188>, REDUCE Production by 'PRIMARY_KEY': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<188>, REDUCE Production by ')': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<188>, REDUCE Production by ',': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<188>, REDUCE Production by 'NOT_NULL': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<188>, REDUCE Production by 'DEFAULT': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<188>, REDUCE Production by 'REFERENCES': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<188>, REDUCE Production by '*': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<188>, REDUCE Production by '/': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<188>, REDUCE Production by '%': 
pid <67>: 
columnName := 'ID' '.' After tracing, got package:'ID' 

fromClauseCondition< 188:= >, REDUCE Production by '+': (^)
'FROM'pid < 67tableName>: 
 columnName := , { 'ID'WHERE , '.'$eof$ , 'ID'ORDERBY , 
}
Condition<selectStatement188 >, REDUCE Production by ':= -': 
'SELECT'pid <67 >: 
columnNameselectElements  := (^)'ID'fromClause  '.' 'WHERE''ID'  
expression , { $eof$, }
selectStatement := 'SELECT' selectElements (^)fromClause , { $eof$, }
fromClause := (^)'FROM' tableName $__ann_39 , { WHERE, $eof$, ORDERBY, }
fromClause := (^)'FROM' tableName 'JOIN' tableName , { WHERE, $eof$, ORDERBY, }
selectStatement := 'SELECT' selectElements (^)fromClause orderByClause , { $eof$, }
selectStatement := 'SELECT' selectElements (^)fromClause 'WHERE' expression orderByClause , { $eof$, }
===============================================================================

From Condition <185> get package:
constantNum := positiveNum (^), { PRIMARY_KEY, ), ,, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
constantNum := positiveNum (^), { PRIMARY_KEY, ), ,, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
===============================================================================

SHIFT <64> by selectElements to <189>.
SHIFT <185> by positiveNum to <190>.
From Condition <189Condition<> get package:190
>, REDUCE Production by 'PRIMARY_KEY': 
fromClausepid <78 >: 
:= constantNum := 'FROM'positiveNum  (^)
tableName Condition<190, { >, REDUCE Production by ')WHERE': , 
$eof$pid <78, >: 
ORDERBYconstantNum,  }:= 
positiveNum fromClause 
:= Condition<190'FROM'>, REDUCE Production by ' ,': (^)
tableName pid <78'JOIN'>: 
 constantNum tableName:=  positiveNum , { 
WHERE, $eof$Condition<, 190ORDERBY>, REDUCE Production by ', NOT_NULL}': 

pid <fromClause78 >: 
:= constantNum := 'FROM'positiveNum  (^)
tableName Condition<190$__ann_39>, REDUCE Production by ' DEFAULT': , { 
WHEREpid <, 78$eof$>: 
, constantNumORDERBY , := }positiveNum
 -------------------------------------------------------------------------------

Condition<
190>, REDUCE Production by 'REFERENCES': 
pid <78>: 
constantNum := positiveNum 
Condition<190>, REDUCE Production by '*': 
pid <78>: 
constantNum := positiveNum 
Condition<190>, REDUCE Production by '/': 
pid <78>: 
constantNum := positiveNum 
Condition<190>, REDUCE Production by '%': 
pid <78>: 
constantNum := positiveNum 
Condition<190>, REDUCE Production by '+': 
pid <78>: 
constantNum := positiveNum 
Condition<190>, REDUCE Production by '-': 
pid <78>: 
constantNum := positiveNum 
After tracing, got package:
tableName := (^)'ID' , { WHERE, $eof$, ORDERBY, ,, JOIN, }
fromClause := 'FROM' (^)tableName , { WHERE, $eof$, ORDERBY, }
fromClause := 'FROM' (^)tableName 'JOIN' tableName , { WHERE, $eof$, ORDERBY, }
fromClause := 'FROM' (^)tableName $__ann_39 , { WHERE, $eof$, ORDERBY, }
===============================================================================

From Condition <185> get package:
expressionAtom := 'STR_LITERAL' (^), { ), PRIMARY_KEY, ,, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := 'STR_LITERAL' (^), { ), PRIMARY_KEY, ,, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
===============================================================================

SHIFT <189> by 'FROM' to <191>
From Condition <191> get package:
tableName := 'ID' (^), { WHERE, $eof$, ORDERBY, ,, JOIN, }
-------------------------------------------------------------------------------

After tracing, got package:
tableName SHIFT <:= 185'ID'> by ' STR_LITERAL' to <192(^)>, { 
WHERE, $eof$, ORDERBY, ,, JOIN, }
===============================================================================
Condition<
192>, REDUCE Production by ')': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<192>, REDUCE Production by 'PRIMARY_KEY': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<192>, REDUCE Production by ',': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<192>, REDUCE Production by 'NOT_NULL': 
pid <74>: 
expressionAtom := 'STR_LITERAL'SHIFT <191 > by '
IDCondition<192' to <193>, REDUCE Production by '>DEFAULT
': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<193Condition<>, REDUCE Production by '192WHERE>, REDUCE Production by '': REFERENCES
': pid <66
>: 
pid <74tableName>: 
 expressionAtom:=  := 'ID' 'STR_LITERAL'
 
Condition<193Condition<192>, REDUCE Production by '>, REDUCE Production by '$eof$*': ': 

pid <66>: 
pid <tableName74 >: 
:= expressionAtom 'ID':=  
'STR_LITERAL'Condition< 193
>, REDUCE Production by 'ORDERBYCondition<': 192
>, REDUCE Production by '/pid <': 66
>: 
pid <74tableName>: 
 expressionAtom:=  := 'ID' 'STR_LITERAL'
 
Condition<192Condition<>, REDUCE Production by '193%>, REDUCE Production by '': ,': 

pid <pid <7466>: 
>: 
expressionAtomtableName  := := 'STR_LITERAL''ID'  

Condition<192Condition<>, REDUCE Production by '193+>, REDUCE Production by '': JOIN': 

pid <74pid <66>: 
>: 
expressionAtomtableName  := := 'ID''STR_LITERAL'  

Condition<192>, REDUCE Production by '-': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
From Condition <191> get package:
From Condition <fromClause := 185'FROM'> get package: 
tableName (^), { expressionAtom WHERE:= , $eof$, expressionAtomORDERBY , }(^)
mathOperatorfromClause  := expressionAtom 'FROM', {  )tableName,  PRIMARY_KEY, (^),$__ann_39,  NOT_NULL, , { DEFAULT, WHEREREFERENCES, , $eof$*, , ORDERBY/, , }%
, fromClause+ , := -, }'FROM'
 expressionAtom := tableName expressionAtom(^) 'JOIN'mathOperator  tableNameexpressionAtom  , { (^), { WHERE, PRIMARY_KEY$eof$, , )ORDERBY, , ,}, 
NOT_NULL-------------------------------------------------------------------------------, 
DEFAULT
, REFERENCES, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
$__ann_39 := (^)',' tableName , { WHERE, $eof$, ORDERBY, ,, }
fromClause := 'FROM' tableName (^), { WHERE, $eof$, ORDERBY, }
$__ann_39 := (^)$__ann_39 ',' tableName , { WHERE, $eof$, ORDERBY, ,, }
fromClause := 'FROM' tableName (^)$__ann_39 , { WHERE, $eof$, ORDERBY, }
fromClause := 'FROM' tableName (^)'JOIN' tableName , { WHERE, $eof$, ORDERBY, }
===============================================================================

After tracing, got package:
mathOperator := (^)'*' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'%' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'-' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
expressionAtom := expressionAtom (^)mathOperator expressionAtom , { ), PRIMARY_KEY, ,, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
expressionAtom := expressionAtom mathOperator expressionAtom (^), { PRIMARY_KEY, ), ,, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
mathOperator := (^)'/' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'+' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <191> by tableName to <194>.
From Condition <194> get package:
$__ann_39 := ',' (^)tableName , { WHERE, $eof$, ORDERBY, ,, }
-------------------------------------------------------------------------------

After tracing, got package:
tableName := (^)'ID' , { WHERE, $eof$, ORDERBY, ,, }
$__ann_39 := ',' (^)tableName , { WHERE, $eof$, ORDERBY, ,, }
===============================================================================

SHIFT <185> by expressionAtom to <195>.
From Condition <195> get package:
SHIFT <194mathOperator> by ' ,:= ' to <196'*'> 
(^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '*' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

From Condition <196> get package:
tableName := 'ID' (^), { WHERE, $eof$, ORDERBY, ,, }
-------------------------------------------------------------------------------

After tracing, got package:
tableName := 'ID' (^), { WHERE, $eof$, ORDERBY, ,, }
===============================================================================

SHIFT <195> by '*' to <33>
This condition already existed.
SHIFT <196> by 'ID' to <197>
Condition<197>, REDUCE Production by 'WHERE': 
From Condition <pid <66195>: 
> get package:tableName 
:= 'ID' mathOperator
 := Condition<197'%'>, REDUCE Production by ' $eof$': 
(^)pid <, { 66STR_LITERAL>: 
, tableNameID , := -, 'ID'NUMBER_CONSTANT , 
}
Condition<197------------------------------------------------------------------------------->, REDUCE Production by '
ORDERBY
': 
After tracing, got package:pid <66
>: 
mathOperatortableName  := := 'ID''%'  
(^), { Condition<197STR_LITERAL>, REDUCE Production by ', ,': ID
, pid <-66, >: 
NUMBER_CONSTANTtableName,  }:= 
'ID'=============================================================================== 


From Condition <196> get package:
SHIFT <195$__ann_39> by ' %:= ' to <26','> 
tableNameThis condition already existed. 
(^), { WHERE, $eof$, ORDERBY, ,, }
-------------------------------------------------------------------------------

After tracing, got package:
$__ann_39 := ',' tableName (^), { WHERE, $eof$, ORDERBY, ,, }
===============================================================================

From Condition <195> get package:
mathOperator := '-' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

SHIFT <196After tracing, got package:> by 
tableName to <mathOperator198 >.:= 
'-' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

Condition<198>, REDUCE Production by 'WHERE': 
pid <64>: 
$__ann_39 := ',' tableName 
Condition<198>, REDUCE Production by '$eof$': 
pid <64>: 
$__ann_39 := ',' tableName 
Condition<198>, REDUCE Production by 'ORDERBY': 
pid <64>: 
$__ann_39 := ',' tableName 
Condition<198>, REDUCE Production by ',': 
pid <64>: 
$__ann_39 := ',' tableName 
SHIFT <195> by '-' to <34>
This condition already existed.
Condition<194>, REDUCE Production by 'WHERE': 
pid <62>: 
fromClause := 'FROM' tableName 
Condition<194>, REDUCE Production by '$eof$': 
pid <62>: 
fromClause := 'FROM' tableName 
Condition<194>, REDUCE Production by 'ORDERBY': 
From Condition <pid <62195>: 
> get package:fromClause 
:= 'FROM' tableName expressionAtom
 := expressionAtom mathOperator (^)expressionAtom , { ), PRIMARY_KEY, ,, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
-------------------------------------------------------------------------------

From Condition <194> get package:
fromClause := 'FROM' tableName $__ann_39 (^), { WHERE, $eof$, ORDERBY, }
$__ann_39 := $__ann_39 (^)',' tableName , { WHERE, $eof$, ORDERBY, ,, }
-------------------------------------------------------------------------------

After tracing, got package:
fromClause := 'FROM' tableName $__ann_39 (^), { WHERE, $eof$, ORDERBY, }
$__ann_39 := $__ann_39 (^)',' tableName , { WHERE, $eof$, ORDERBY, ,, }
===============================================================================

SHIFT <194> by $__ann_39 to <199>.
Condition<199>, REDUCE Production by 'WHERE': 
pid <61>: 
fromClause := 'FROM' tableName $__ann_39 
Condition<199>, REDUCE Production by '$eof$': 
pid <61>: 
fromClause := 'FROM' tableName $__ann_39 
Condition<199>, REDUCE Production by 'ORDERBY': 
pid <61>: 
fromClause := 'FROM' tableName $__ann_39 
From Condition <199> get package:
$__ann_39 := $__ann_39 ',' (^)tableName , { WHERE, $eof$, ORDERBY, ,, }
-------------------------------------------------------------------------------

After tracing, got package:
$__ann_39 := $__ann_39 ',' (^)tableName , { WHERE, $eof$, ORDERBY, ,, }
tableName := (^)'ID' , { WHERE, $eof$, ORDERBY, ,, }
===============================================================================

SHIFT <199> by ',' to <200>
From Condition <200> get package:
$__ann_39 := $__ann_39 ',' tableName (^), { WHERE, $eof$, ORDERBY, ,, }
-------------------------------------------------------------------------------

After tracing, got package:
$__ann_39 := $__ann_39 ',' tableName (^), { WHERE, $eof$, ORDERBY, ,, }
===============================================================================

SHIFT <200> by tableName to <201>.
Condition<201>, REDUCE Production by 'WHERE': 
pid <63>: 
$__ann_39 := $__ann_39 ',' tableName 
Condition<201>, REDUCE Production by '$eof$': 
pid <63>: 
$__ann_39 := $__ann_39 ',' tableName 
Condition<201>, REDUCE Production by 'ORDERBY': 
pid <63>: 
$__ann_39 := $__ann_39 ',' tableName 
Condition<201>, REDUCE Production by ',': 
pid <63>: 
$__ann_39 := $__ann_39 ',' tableName 
From Condition <200> get package:
tableName := 'ID' (^), { WHERE, $eof$, ORDERBY, ,, }
-------------------------------------------------------------------------------

After tracing, got package:
tableName := 'ID' (^), { WHERE, $eof$, ORDERBY, ,, }
===============================================================================

SHIFT <200> by 'ID' to <197>
This condition already existed.
From Condition <194> get package:
fromClause := 'FROM' tableName 'JOIN' (^)tableName , { WHERE, $eof$, ORDERBY, }
-------------------------------------------------------------------------------

After tracing, got package:
fromClause := 'FROM' tableName 'JOIN' (^)tableName , { WHERE, $eof$, ORDERBY, }
tableName := (^)'ID' , { WHERE, $eof$, ORDERBY, }
===============================================================================

SHIFT <194> by 'JOIN' to <202>
From Condition <202> get package:
fromClause := 'FROM' tableName 'JOIN' tableName (^), { WHERE, $eof$, ORDERBY, }
-------------------------------------------------------------------------------

After tracing, got package:
fromClause := 'FROM' tableName 'JOIN' tableName (^), { WHERE, $eof$, ORDERBY, }
===============================================================================

SHIFT <202> by tableName to <203>.
Condition<203>, REDUCE Production by 'WHERE': 
pid <65>: 
fromClause := 'FROM' tableName 'JOIN' tableName 
Condition<203>, REDUCE Production by '$eof$': 
pid <65>: 
fromClause := 'FROM' tableName 'JOIN' tableName 
Condition<203>, REDUCE Production by 'ORDERBY': 
pid <65>: 
fromClause := 'FROM' tableName 'JOIN' tableName 
After tracing, got package:
columnName := (^)'ID' , { ), PRIMARY_KEY, ,, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
constantNum := (^)positiveNum , { ), PRIMARY_KEY, ,, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
expressionAtom := (^)'STR_LITERAL' , { PRIMARY_KEY, ), ,, NOT_NULL, DEFAULT, REFERENCES, *, /, From Condition <%, +, -202, > get package:}

expressionAtom := tableName expressionAtom:=  mathOperator 'ID'(^) expressionAtom (^), { , { WHERE), , $eof$PRIMARY_KEY, , ORDERBY,, , }NOT_NULL, 
DEFAULT-------------------------------------------------------------------------------, 
REFERENCES, 
*, /After tracing, got package:, 
%, tableName+ , := -, }'ID'
 expressionAtom := (^), { (^)WHEREexpressionAtom,  $eof$, mathOperatorORDERBY , }expressionAtom 
, { ===============================================================================PRIMARY_KEY
, 
), ,, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
columnName := (^)'ID' '.' 'ID' , { ), PRIMARY_KEY, ,, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
constantNum := (^)'-' positiveNum , { ), PRIMARY_KEY, ,, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
expressionAtom := (^)constantNum , { PRIMARY_KEY, ), ,, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
expressionAtom := (^)columnName , { PRIMARY_KEY, ), ,, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }SHIFT <
202> by 'positiveNumID ' to <204:= >
(^)'NUMBER_CONSTANT' , { PRIMARY_KEY, ), ,, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
Condition<===============================================================================204
>, REDUCE Production by '
WHERE': 
pid <66>: 
tableName := 'ID' 
Condition<204>, REDUCE Production by '$eof$': 
pid <66>: 
tableName := 'ID' 
Condition<204>, REDUCE Production by 'ORDERBY': 
pid <66>: 
tableName := 'ID' 
From Condition <189> get package:
selectStatement := 'SELECT' selectElements fromClause (^), { $eof$, }
selectStatement := 'SELECT' selectElements fromClause (^)'WHERE' expression , { $eof$, }
selectStatement := 'SELECT' selectElements fromClause (^)'WHERE' expression orderByClause , { $eof$, }
selectStatement := 'SELECT' selectElements fromClause (^)orderByClause , { $eof$, }
-------------------------------------------------------------------------------

After tracing, got package:
orderByClause := (^)'ORDERBY' orderByExpression $__ann_38 , { $eof$, }
selectStatement := 'SELECT' selectElements fromClause (^), { $eof$, }
selectStatement := 'SELECT' selectElements fromClause (^)'WHERE' expression , { $eof$, }
orderByClause := (^)'ORDERBY' orderByExpression , { $eof$, }
selectStatement := 'SELECT' selectElements fromClause (^)'WHERE' expression orderByClause , { $eof$, }
selectStatement := 'SELECT' selectElements fromClause (^)orderByClause , { $eof$, }
===============================================================================

SHIFT <195> by mathOperator to <205>.
From Condition <205> get package:
columnName := 'ID' (^), { ), PRIMARY_KEY, ,, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
columnName := 'ID' (^)'.' 'ID'SHIFT < 189, { > by )fromClause,  to <PRIMARY_KEY206, >.,
, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID' (^), { ), PRIMARY_KEY, ,, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
columnName := 'ID' (^)'.' 'ID' , { ), PRIMARY_KEY, ,, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
From Condition <===============================================================================
206
> get package:
orderByClause := 'ORDERBY' (^)orderByExpression $__ann_38 , { $eof$, }
orderByClause := 'ORDERBY' (^)orderByExpression , { $eof$, }
-------------------------------------------------------------------------------

SHIFT <205> by 'ID' to <207>
Condition<207>, REDUCE Production by ')': 
pid <68>: 
columnName := 'ID' 
Condition<207>, REDUCE Production by 'PRIMARY_KEY': 
pid <68>: 
columnName := 'ID' 
Condition<207>, REDUCE Production by ',': 
pid <68>: 
columnName := 'ID' 
Condition<207>, REDUCE Production by 'NOT_NULL': 
pid <68>: 
columnName := 'ID' 
Condition<207>, REDUCE Production by 'DEFAULT': 
pid <68>: 
columnName := 'ID' 
Condition<207>, REDUCE Production by 'REFERENCES': 
pid <68>: 
columnName := 'ID' 
Condition<207>, REDUCE Production by '*': 
pid <68>: 
columnName := 'ID' 
Condition<207>, REDUCE Production by '/': 
pid <68>: 
columnName := 'ID' 
Condition<207>, REDUCE Production by '%': 
pid <68>: 
columnName := 'ID' 
Condition<207>, REDUCE Production by '+': 
pid <68>: 
columnName := 'ID' 
Condition<207>, REDUCE Production by '-': 
pid <68>: 
columnName := 'ID' 
From Condition <207> get package:
columnName := 'ID' '.' (^)'ID' , { ), PRIMARY_KEY, ,, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID' '.' (^)'ID' , { ), PRIMARY_KEY, ,, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
===============================================================================

SHIFT <207> by '.' to <174>
This condition already existed.
From Condition <205> get package:
constantNum := positiveNum (^), { ), PRIMARY_KEY, ,, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
constantNum := positiveNum (^), { ), PRIMARY_KEY, ,, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
===============================================================================

SHIFT <205> by positiveNum to <208>.
Condition<208>, REDUCE Production by ')': 
pid <78>: 
constantNum := positiveNum 
Condition<208>, REDUCE Production by 'PRIMARY_KEY': 
pid <78>: 
constantNum := positiveNum 
Condition<208>, REDUCE Production by ',': 
pid <78>: 
constantNum := positiveNum 
Condition<208>, REDUCE Production by 'NOT_NULL': 
pid <78>: 
constantNum := positiveNum 
Condition<208>, REDUCE Production by 'DEFAULT': 
pid <78>: 
constantNum := positiveNum 
Condition<208>, REDUCE Production by 'REFERENCES': 
pid <78>: 
constantNum := positiveNum 
Condition<208>, REDUCE Production by '*': 
pid <78>: 
constantNum := positiveNum 
Condition<208>, REDUCE Production by '/': 
pid <78>: 
constantNum := positiveNum 
Condition<208>, REDUCE Production by '%': 
pid <78>: 
constantNum := positiveNum 
Condition<208>, REDUCE Production by '+': 
pid <78>: 
constantNum := positiveNum 
Condition<208>, REDUCE Production by '-': 
pid <78>: 
constantNum := positiveNum 
From Condition <205> get package:
expressionAtom := 'STR_LITERAL' (^), { PRIMARY_KEY, ), ,, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := 'STR_LITERAL' (^), { PRIMARY_KEY, ), ,, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
===============================================================================

SHIFT <205> by 'STR_LITERAL' to <209>
Condition<209>, REDUCE Production by 'PRIMARY_KEY': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<209>, REDUCE Production by ')': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<209>, REDUCE Production by ',': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<209>, REDUCE Production by 'NOT_NULL': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<209>, REDUCE Production by 'DEFAULT': 
pid <74>: 
After tracing, got package:expressionAtom := 
'STR_LITERAL'orderByExpression  
:= Condition<209(^)>, REDUCE Production by 'expressionAtomREFERENCES ': 
'ASC'pid < 74, { >: 
expressionAtom, , := $eof$, }'STR_LITERAL'
 
expressionAtom := Condition<209(^)>, REDUCE Production by '*'STR_LITERAL'':  
, { pid <74%>: 
, expressionAtomDESC , := /, 'STR_LITERAL'ASC , 
-, Condition<209,>, REDUCE Production by ', /$eof$': , 
*pid <74, >: 
+expressionAtom,  }:= 
'STR_LITERAL'orderByExpression  := 
(^)expressionAtomCondition<209 >, REDUCE Production by '%': , { 
,pid <74, >: 
$eof$expressionAtom,  }:= 
'STR_LITERAL'expressionAtom  
:= (^)expressionAtomCondition< 209mathOperator>, REDUCE Production by ' +': expressionAtom
 pid <74, { >: 
%expressionAtom,  DESC:= , /'STR_LITERAL',  ASC
, -Condition<, 209,>, REDUCE Production by ', -$eof$': , 
*pid <, 74+>: 
, expressionAtom} := 
'STR_LITERAL'orderByClause  := 
'ORDERBY' (^)orderByExpression $__ann_38 , { $eof$, }
expressionAtom := (^)constantNum , { %, DESC, /, ASC, -, ,, $eof$, *, +, }
orderByExpression := (^)expressionAtom 'DESC' , { ,, $eof$, }
expressionAtom := (^)columnName , { %, DESC, /, ASC, -, ,, $eof$, *, +, }
orderByClause := 'ORDERBY' (^)orderByExpression , { $eof$, }
columnName := (^)'ID' , { %, DESC, ASC, /, ,, -, $eof$, *, +, }
columnName := (^)'ID' '.' 'ID' , { %, DESC, ASC, /, ,, -, $eof$, *, +, }
constantNum := (^)positiveNum , { DESC, %, ASC, /, ,, -, $eof$, *, +, }
constantNum := (^)'-' positiveNum From Condition <, { DESC, %, 205ASC> get package:, /
, ,, -, expressionAtom$eof$ , := *, +, expressionAtom} 
(^)positiveNummathOperator  := expressionAtom (^), { 'NUMBER_CONSTANT'PRIMARY_KEY , ), { , ,%, , NOT_NULLDESC, , DEFAULT/, , REFERENCESASC, , *-, , /,, , %$eof$, , +*, , -+, , }}

expressionAtom ===============================================================================:= 
expressionAtom
 mathOperator expressionAtom (^), { ), PRIMARY_KEY, ,, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := (^)'*' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'%' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'-' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
expressionAtom := expressionAtom (^)mathOperator expressionAtom , { PRIMARY_KEY, ), ,, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
expressionAtom := expressionAtom mathOperator expressionAtom (^), { ), PRIMARY_KEY, ,, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
mathOperator := (^)'/' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'+' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <206> by 'ORDERBY' to <210>
From Condition <210> get package:
expressionAtom := expressionAtom (^)mathOperator expressionAtom , { %, DESC, /, ASC, -, ,, $eof$, *, +, }
orderByExpression := expressionAtom (^), { ,, $eof$, }
orderByExpression := expressionAtom (^)'ASC' , { ,, $eof$, }
orderByExpression := expressionAtom (^)'DESC' , { ,, $eof$, }
-------------------------------------------------------------------------------

SHIFT <205> by expressionAtom to <195>.
This condition already existed.
After tracing, got package:
mathOperator := (^)'*' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
orderByExpression := expressionAtom (^)'ASC' , { ,, $eof$, }
mathOperator := (^)'%' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
orderByExpression := expressionAtom (^), { ,, $eof$, }
expressionAtom := expressionAtom (^)mathOperator expressionAtom , { %, DESC, /, ASC, -, ,, $eof$, *, +, }
From Condition <mathOperator := (^)205'-'> get package: 
, { STR_LITERAL, IDconstantNum,  -:= , NUMBER_CONSTANT, }'-'
 mathOperator (^):= positiveNum (^), { '/' ), , { PRIMARY_KEY, STR_LITERAL,, , IDNOT_NULL, , -DEFAULT, , NUMBER_CONSTANTREFERENCES, , }*, 
/orderByExpression,  %:= , +, expressionAtom- , }(^)
'DESC' -------------------------------------------------------------------------------
, { 
,, $eof$, }
mathOperator := (^)'+' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

After tracing, got package:
positiveNum := (^)'NUMBER_CONSTANT' , { PRIMARY_KEY, ), ,, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
constantNum := '-' (^)positiveNum , { ), PRIMARY_KEY, ,, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
===============================================================================

SHIFT <210> by expressionAtom to <211>.
From Condition <211> get package:
mathOperator := '*' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '*' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <205> by '-' to <176>
This condition already existed.
SHIFT <211> by '*' to <33>
This condition already existed.
From Condition <205> get package:
expressionAtom := constantNum (^), { PRIMARY_KEY, ), ,, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := constantNum (^), { PRIMARY_KEY, ), ,, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
===============================================================================

From Condition <211> get package:
orderByExpression := expressionAtom 'ASC' (^), { ,, $eof$, }
-------------------------------------------------------------------------------

After tracing, got package:
orderByExpression := expressionAtom 'ASC' (^), { ,, $eof$, }
===============================================================================

SHIFT <205> by constantNum to <181>.
This condition already existed.
SHIFT <211> by 'ASC' to <212>
Condition<212>, REDUCE Production by ',': 
pid <58>: 
orderByExpression := expressionAtom 'ASC' 
From Condition <Condition<212205>, REDUCE Production by '> get package:$eof$': 

expressionAtompid < 58:= >: 
orderByExpression columnName:=  expressionAtom (^)'ASC', {  
PRIMARY_KEY, ), ,, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := columnName (^), { PRIMARY_KEY, ), ,, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
===============================================================================

From Condition <211> get package:
mathOperator := '%' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '%' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <205> by columnName to <182>.
This condition already existed.
SHIFT <From Condition <211205> by '> get package:%' to <26
>
positiveNumThis condition already existed. 
:= 'NUMBER_CONSTANT' (^), { PRIMARY_KEY, ), ,, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
Condition<positiveNum211 >, REDUCE Production by ':= ,': 
'NUMBER_CONSTANT'pid <60 >: 
orderByExpression(^) , { := PRIMARY_KEYexpressionAtom,  ), 
,, Condition<NOT_NULL211, >, REDUCE Production by 'DEFAULT$eof$, ': REFERENCES
, pid <*60, >: 
/orderByExpression,  %:= , expressionAtom+ , 
-, }
===============================================================================

From Condition <211> get package:
expressionAtom := expressionAtom mathOperator (^)expressionAtom , { %, DESC, /, ASC, -, ,, $eof$, *, +, }
-------------------------------------------------------------------------------

SHIFT <205> by 'NUMBER_CONSTANT' to <178>
This condition already existed.
Condition<195>, REDUCE Production by 'PRIMARY_KEY': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Condition<195>, REDUCE Production by ')': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Condition<195>, REDUCE Production by ',': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Condition<195>, REDUCE Production by 'NOT_NULL': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Condition<195>, REDUCE Production by 'DEFAULT': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Condition<195>, REDUCE Production by 'REFERENCES': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Already existed SHIFT by symbol'*' :
<33>
Try to set it to: REDUCE to:
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Reset Action[195]['*'] to REDUCE:
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Condition<195>, REDUCE Production by '/': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Already existed SHIFT by symbol'%' :
<26>
Try to set it to: REDUCE to:
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Reset Action[195]['%'] to REDUCE:
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Condition<195>, REDUCE Production by '+': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Already existed SHIFT by symbol'-' :
<34>
Try to set it to: REDUCE to:
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Reset Action[195]['-'] to REDUCE:
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
From Condition <195> get package:
mathOperator := '/' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '/' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

Already existed REDUCE by symbol '/': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Try to set it to: SHIFT to <40>
Set SHIFT fail in: from condition <195> to condition <40>.
This condition already existed.
From Condition <195> get package:
mathOperator := '+' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '+' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

Already existed REDUCE by symbol '+': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Try to set it to: SHIFT to <41>
Set SHIFT fail in: from condition <195> to condition <41>.
This condition already existed.
From Condition <185> get package:
constantNum := '-' (^)positiveNum , { PRIMARY_KEY, ), ,, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := (^)'NUMBER_CONSTANT' , { ), PRIMARY_KEY, ,, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
constantNum := '-' (^)positiveNum , { PRIMARY_KEY, ), ,, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
===============================================================================

SHIFT <185> by '-' to <213>
From Condition <213> get package:
positiveNum := 'NUMBER_CONSTANT' (^), { ), PRIMARY_KEY, ,, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
-------------------------------------------------------------------------------
After tracing, got package:

After tracing, got package:
columnNamepositiveNum  := := (^)'NUMBER_CONSTANT''ID'  (^), { , { ), %PRIMARY_KEY, , DESC,, , /NOT_NULL, , ASCDEFAULT, , -REFERENCES, , ,*, , $eof$/, , *%, , ++, , }-, 
}constantNum 
:= ===============================================================================
(^)
positiveNum , { %, DESC, /, ASC, -, ,, $eof$, *, +, }
expressionAtom := (^)'STR_LITERAL' , { DESC, %, ASC, /, ,, -, $eof$, *, +, }
expressionAtom := expressionAtom mathOperator (^)expressionAtom , { %, DESC, /, ASC, -, ,, $eof$, *, +, }
expressionAtom := (^)expressionAtom mathOperator expressionAtom , { DESC, %, ASC, /, ,, -, $eof$, *, +, }
columnName := (^)'ID' '.' 'ID' , { %, DESC, /, ASC, -, ,, $eof$, *, +, }
constantNum := (^)'-' positiveNum , { %, DESC, /, ASC, -, ,, $eof$, *, +, }
expressionAtom := (^)constantNum , { DESC, SHIFT <%213, > by 'ASCNUMBER_CONSTANT, ' to <214/>, 
,, -, $eof$, *, +, }
expressionAtom := (^)columnName , { Condition<214DESC>, REDUCE Production by ', )%': , 
ASC, pid <79/>: 
, positiveNum, , := -, $eof$, 'NUMBER_CONSTANT'* , 
+, }Condition<
214positiveNum>, REDUCE Production by ' PRIMARY_KEY:= ': 
(^)pid <79'NUMBER_CONSTANT'>: 
 positiveNum := , { DESC'NUMBER_CONSTANT',  %
, ASCCondition<, 214/>, REDUCE Production by ', ,,': , 
-pid <, 79$eof$>: 
, positiveNum* , := +, }'NUMBER_CONSTANT'
 ===============================================================================

Condition<
214>, REDUCE Production by 'NOT_NULL': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<214>, REDUCE Production by 'DEFAULT': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<214>, REDUCE Production by 'REFERENCES': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<214>, REDUCE Production by '*': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<214>, REDUCE Production by '/': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<214>, REDUCE Production by '%': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<214>, REDUCE Production by '+': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<214>, REDUCE Production by '-': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
From Condition <213> get package:
constantNum := '-' positiveNum (^), { PRIMARY_KEY, ), ,, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
constantNum := '-' positiveNum (^), { PRIMARY_KEY, ), ,, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
===============================================================================

SHIFT <211> by mathOperator to <215>.
From Condition <215> get package:
SHIFT <columnName213 > by := positiveNum to <216'ID'>. 
(^), { %, DESC, /, ASC, -, ,, $eof$, *, +, }
columnName := 'ID' Condition<(^)216'.'>, REDUCE Production by ' PRIMARY_KEY': 'ID'
 pid <77, { >: 
%constantNum,  DESC:= , /'-',  ASCpositiveNum,  -, 
,, $eof$Condition<, 216*>, REDUCE Production by ', )+': , 
}
pid <-------------------------------------------------------------------------------77
>: 

constantNum := '-'After tracing, got package: 
positiveNum columnName
 := Condition<216'ID'>, REDUCE Production by ' ,': 
(^), { pid <77%>: 
, constantNumDESC , := /, '-'ASC , positiveNum- , 
,, Condition<$eof$216, >, REDUCE Production by '*NOT_NULL, ': +
, pid <77}>: 

constantNumcolumnName  := := '-' 'ID'positiveNum  (^)
'.' Condition<216'ID'>, REDUCE Production by ' DEFAULT': 
, { pid <77%>: 
, constantNumDESC , := /, '-'ASC , positiveNum- , 
,, Condition<$eof$216, >, REDUCE Production by '*REFERENCES, ': +
, pid <77}>: 

constantNum ===============================================================================:= 
'-'
 positiveNum 
Condition<216>, REDUCE Production by '*': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<216>, REDUCE Production by '/': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<216>, REDUCE Production by '%': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<216>, REDUCE Production by '+': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<216>, REDUCE Production by '-': 
pid <77>: 
constantNum := '-' positiveNum 
SHIFT <215> by 'ID' to <217>
Condition<217>, REDUCE Production by '%': 
pid <68>: 
columnName := 'ID' 
Condition<217>, REDUCE Production by 'DESC': 
pid <68>: 
columnName := 'ID' 
From Condition <Condition<217185>, REDUCE Production by '> get package:/': 

pid <68expressionAtom>: 
 columnName:=  := 'ID'constantNum  
(^), { Condition<217)>, REDUCE Production by ', ASCPRIMARY_KEY': , 
,pid <, 68NOT_NULL>: 
, columnNameDEFAULT , := REFERENCES, 'ID'* , 
/, Condition<%217, >, REDUCE Production by '+-, ': -
, pid <68}>: 

columnName------------------------------------------------------------------------------- 
:= 
'ID' After tracing, got package:

Condition<217expressionAtom>, REDUCE Production by ' ,:= ': 
constantNumpid < 68(^)>: 
, { columnName ):= , 'ID'PRIMARY_KEY 
, Condition<217,>, REDUCE Production by ', $eof$': NOT_NULL
, DEFAULTpid <68, >: 
REFERENCEScolumnName,  *:= , /'ID',  %
, Condition<+217, >, REDUCE Production by '-*, ': }

pid <68===============================================================================>: 

columnName := 'ID'
 
Condition<217>, REDUCE Production by '+': 
pid <68>: 
columnName := 'ID' 
From Condition <217> get package:
columnName := 'ID' '.' (^)'ID' , { %, DESC, /, ASC, -, ,, $eof$, *, +, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID' '.' (^)'ID' , { %, DESC, /, ASC, -, ,, $eof$, *, +, }
SHIFT <===============================================================================185
> by constantNum
 to <218>.
Condition<218>, REDUCE Production by ')': 
pid <73>: 
expressionAtom := constantNum 
Condition<218>, REDUCE Production by 'PRIMARY_KEY': 
pid <73>: 
expressionAtom := constantNum 
SHIFT <217Condition<> by '218.>, REDUCE Production by '' to <219,>': 

pid <73>: 
expressionAtom := constantNum 
Condition<218>, REDUCE Production by 'NOT_NULL': 
pid <73>: 
expressionAtom := constantNum 
Condition<218>, REDUCE Production by 'DEFAULT': 
pid <From Condition <73219>: 
> get package:expressionAtom
 := constantNum columnName 
:= 'ID' Condition<'.'218 >, REDUCE Production by ''ID'REFERENCES ': 
(^)pid <, { 73%>: 
, expressionAtomDESC , := /, constantNumASC , -
, ,, Condition<$eof$218, >, REDUCE Production by '**, ': +, 
}pid <
73------------------------------------------------------------------------------->: 

expressionAtom
 := constantNumAfter tracing, got package: 

columnName := Condition<218'ID'>, REDUCE Production by ' /': '.'
 pid <'ID'73 >: 
expressionAtom(^) , { := constantNum% , DESC
, /, Condition<ASC218, >, REDUCE Production by '-%, ': ,
, $eof$pid <, 73*>: 
, expressionAtom+ , := }constantNum 

===============================================================================
Condition<
218>, REDUCE Production by '+': 
pid <73>: 
expressionAtom := constantNum 
Condition<218>, REDUCE Production by '-': 
pid <73>: 
expressionAtom := constantNum 
SHIFT <219> by 'ID' to <220>
Condition<220>, REDUCE Production by '%': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<220>, REDUCE Production by 'DESC': 
From Condition <pid <67>: 
185columnName> get package: := 
'ID' '.'expressionAtom  'ID':=  
columnName Condition<220(^)>, REDUCE Production by ', { /': )
, pid <67PRIMARY_KEY>: 
, columnName, , := NOT_NULL, 'ID'DEFAULT , '.'REFERENCES , 'ID'* , 
/, %Condition<, 220+>, REDUCE Production by ', ASC': -
, }pid <67
>: 
columnName------------------------------------------------------------------------------- 
:= 'ID'
 '.' 'ID'After tracing, got package: 

expressionAtom Condition<:= 220columnName>, REDUCE Production by ' -': 
(^), { pid <67)>: 
, columnNamePRIMARY_KEY , := ,, 'ID'NOT_NULL , '.'DEFAULT , 'ID'REFERENCES , 
*, Condition</220, >, REDUCE Production by '%,, ': +
, -pid <, 67}>: 

columnName=============================================================================== 
:= 
'ID' '.' 'ID' 
Condition<220>, REDUCE Production by '$eof$': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<220>, REDUCE Production by '*': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<220>, REDUCE Production by '+': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
SHIFT <185> by columnName to <221>.
Condition<221>, REDUCE Production by ')': 
pid <75>: 
expressionAtom := columnName 
Condition<221>, REDUCE Production by 'PRIMARY_KEY': 
pid <75>: 
expressionAtom := columnName 
Condition<221>, REDUCE Production by ',': 
pid <75>: 
expressionAtom := columnName 
Condition<221>, REDUCE Production by 'NOT_NULL': 
pid <75>: 
expressionAtom := columnName 
Condition<221>, REDUCE Production by 'DEFAULT': 
From Condition <pid <75215>: 
> get package:expressionAtom 
:= columnName 
constantNum Condition<:= 221positiveNum>, REDUCE Production by ' REFERENCES': 
(^)pid <, { 75%>: 
, expressionAtomDESC , := /columnName,  ASC
, -, Condition<221,>, REDUCE Production by ', *': $eof$
, *pid <, 75+>: 
, expressionAtom} := 
columnName------------------------------------------------------------------------------- 


Condition<221After tracing, got package:>, REDUCE Production by '
/': constantNum
 := pid <75positiveNum>: 
 expressionAtom := (^), { columnName %
, DESC, Condition<221/>, REDUCE Production by ', %': ASC
, -pid <, 75,>: 
, expressionAtom$eof$ , := *, columnName +, 
}Condition<
221>, REDUCE Production by '===============================================================================+': 


pid <75>: 
expressionAtom := columnName 
Condition<221>, REDUCE Production by '-': 
pid <75>: 
expressionAtom := columnName 
SHIFT <215> by positiveNum to <222>.
From Condition <185> get package:
positiveNum := 'NUMBER_CONSTANT'Condition< 222(^)>, REDUCE Production by ', { %': )
, PRIMARY_KEYpid <, 78,>: 
, constantNumNOT_NULL , := DEFAULT, positiveNum REFERENCES, 
*, Condition</222, >, REDUCE Production by '%DESC, ': +
, -pid <, 78}>: 

constantNum -------------------------------------------------------------------------------:= 
positiveNum
 
After tracing, got package:
Condition<222positiveNum>, REDUCE Production by ' /:= ': 
'NUMBER_CONSTANT'pid < 78(^)>: 
, { constantNum ):= , positiveNumPRIMARY_KEY , 
,, Condition<NOT_NULL222, >, REDUCE Production by 'DEFAULTASC, ': REFERENCES
, *pid <, 78/>: 
, constantNum% , := +, positiveNum- , 
}
Condition<===============================================================================222
>, REDUCE Production by '-
': 
pid <78>: 
constantNum := positiveNum 
Condition<222>, REDUCE Production by ',': 
pid <78>: 
constantNum := positiveNum 
Condition<222>, REDUCE Production by '$eof$': 
pid <78>: 
constantNum := positiveNum 
Condition<222>, REDUCE Production by '*': 
pid <78>: 
constantNum := positiveNum 
Condition<222>, REDUCE Production by '+': 
pid <78>: 
constantNum := positiveNum 
SHIFT <185> by 'NUMBER_CONSTANT' to <214>
This condition already existed.
From Condition <215> get package:
expressionAtom := 'STR_LITERAL' (^), { DESC, %, ASC, /, ,, -, $eof$, *, +, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := 'STR_LITERAL' (^), { DESC, %, ASC, /, ,, -, $eof$, *, +, }
===============================================================================

SHIFT <215> by 'STR_LITERAL' to <223>
Condition<223>, REDUCE Production by 'DESC': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<223>, REDUCE Production by '%': 
From Condition <pid <74172>: 
> get package:expressionAtom 
:= 'STR_LITERAL' constantNum 
:= Condition<223positiveNum>, REDUCE Production by ' ASC': 
(^)pid <, { 74)>: 
, expressionAtomPRIMARY_KEY , := ,, 'STR_LITERAL'NOT_NULL , 
DEFAULT, Condition<223REFERENCES>, REDUCE Production by ', /': *
, /pid <, 74%>: 
, expressionAtom+ , := -, 'STR_LITERAL'} 

-------------------------------------------------------------------------------
Condition<223
>, REDUCE Production by ',': 
After tracing, got package:
pid <74constantNum>: 
 expressionAtom:=  := positiveNum 'STR_LITERAL'(^) , { 
), Condition<223PRIMARY_KEY>, REDUCE Production by ', -': ,
, NOT_NULLpid <, 74DEFAULT>: 
, expressionAtomREFERENCES , := *, 'STR_LITERAL'/ , 
%, +Condition<, 223->, REDUCE Production by ', $eof$}': 

===============================================================================pid <74
>: 
expressionAtom
 := 'STR_LITERAL' 
Condition<223>, REDUCE Production by '*': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<223>, REDUCE Production by '+': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
SHIFT <172> by positiveNum to <208>.
From Condition <This condition already existed.
215> get package:
expressionAtom := expressionAtom (^)mathOperator expressionAtom , { DESC, %, ASC, /, ,, -, $eof$, *, +, }
expressionAtom := expressionAtom mathOperator expressionAtom (^), { %, DESC, /, ASC, -, ,, $eof$, *, +, }
-------------------------------------------------------------------------------

From Condition <172> get package:
expressionAtom := 'STR_LITERAL' (^), { PRIMARY_KEY, ), ,, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := 'STR_LITERAL' (^), { PRIMARY_KEY, ), ,, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
===============================================================================

SHIFT <172> by 'STR_LITERAL' to <209>
After tracing, got package:This condition already existed.

mathOperator := (^)'*' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'%' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'-' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
expressionAtom := expressionAtom (^)mathOperator expressionAtom , { DESC, %, ASC, /, ,, -, $eof$, *, +, }
expressionAtom := expressionAtom mathOperator expressionAtom (^), { %, DESC, /, ASC, -, ,, $eof$, *, +, }
mathOperator := (^)'/' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator From Condition <:= (^)'+' 172> get package:, { 
STR_LITERAL, ID, -, positiveNumNUMBER_CONSTANT , := }
'NUMBER_CONSTANT'=============================================================================== 
(^)
, { PRIMARY_KEY, ), ,, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := 'NUMBER_CONSTANT' (^), { PRIMARY_KEY, ), ,, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
===============================================================================

SHIFT <215> by expressionAtom to <224>.
From Condition <224> get package:
mathOperator := '*' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '*' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <172> by 'NUMBER_CONSTANT' to <178>
This condition already existed.
SHIFT <224> by '*' to <33>
This condition already existed.
From Condition <224> get package:
From Condition <mathOperator := 171> get package:'%' 
(^), { STR_LITERAL, columnConstraintID , := -, NUMBER_CONSTANT, }'REFERENCES'
 -------------------------------------------------------------------------------(^)
tableName
 After tracing, got package:, { 
)mathOperator,  PRIMARY_KEY:= , ,, '%'NOT_NULL , DEFAULT(^), , { REFERENCES, STR_LITERAL}, 
ID, --------------------------------------------------------------------------------, 
NUMBER_CONSTANT
, }
===============================================================================

After tracing, got package:
columnConstraint := 'REFERENCES' (^)tableName , { ), PRIMARY_KEY, ,, NOT_NULL, DEFAULT, REFERENCES, }
tableName := (^)'ID' , { PRIMARY_KEY, ), ,, NOT_NULLSHIFT <, 224DEFAULT> by ', %REFERENCES' to <, 26}>

===============================================================================This condition already existed.


From Condition <224> get package:
mathOperator := '-' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

SHIFT <After tracing, got package:171
> by 'mathOperatorREFERENCES ' to <225:= >
'-' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

From Condition <225> get package:
columnConstraint := 'REFERENCES' tableName (^), { ), PRIMARY_KEY, ,, NOT_NULL, DEFAULT, REFERENCES, }
-------------------------------------------------------------------------------

After tracing, got package:
columnConstraintSHIFT < 224:= > by '-' to <34'REFERENCES'> 
tableNameThis condition already existed. 
(^), { ), PRIMARY_KEY, ,, NOT_NULL, DEFAULT, REFERENCES, }
===============================================================================

From Condition <224> get package:
expressionAtom := expressionAtom mathOperator (^)expressionAtom , { DESC, %, ASC, /, ,, -, $eof$, *, +, SHIFT <}225
> by -------------------------------------------------------------------------------tableName to <
226
>.
Condition<226>, REDUCE Production by ')': 
pid <25>: 
columnConstraint := 'REFERENCES' tableName 
Condition<226>, REDUCE Production by 'PRIMARY_KEY': 
pid <25>: 
columnConstraint := 'REFERENCES' tableName 
Condition<226>, REDUCE Production by ',': 
pid <25>: 
columnConstraint := 'REFERENCES' tableName 
Condition<226>, REDUCE Production by 'NOT_NULL': 
pid <25>: 
columnConstraint := 'REFERENCES' tableName 
Condition<226>, REDUCE Production by 'DEFAULT': 
pid <25>: 
columnConstraint := 'REFERENCES' tableName 
Condition<226>, REDUCE Production by 'REFERENCES': 
pid <25>: 
columnConstraint := 'REFERENCES' tableName 
From Condition <225> get package:
tableName := 'ID' (^), { PRIMARY_KEY, ), ,, NOT_NULL, DEFAULT, REFERENCES, }
-------------------------------------------------------------------------------

After tracing, got package:
tableName := 'ID' (^), { PRIMARY_KEY, ), ,, NOT_NULL, DEFAULT, REFERENCES, }
===============================================================================

SHIFT <225> by 'ID' to <227>
Condition<227>, REDUCE Production by 'PRIMARY_KEY': 
pid <66>: 
tableName := 'ID' 
Condition<227>, REDUCE Production by ')': 
pid <66>: 
tableName := 'ID' 
Condition<227>, REDUCE Production by ',': 
pid <66>: 
tableName := 'ID' 
Condition<227>, REDUCE Production by 'NOT_NULL': 
pid <66>: 
tableName := 'ID' 
Condition<227>, REDUCE Production by 'DEFAULT': 
pid <66>: 
tableName := 'ID' 
Condition<227>, REDUCE Production by 'REFERENCES': 
pid <66>: 
tableName := 'ID' 
From Condition <171> get package:
$__ann_32 := $__ann_32 columnConstraint (^), { PRIMARY_KEY, ), ,, NOT_NULL, DEFAULT, REFERENCES, }
-------------------------------------------------------------------------------

After tracing, got package:
$__ann_32 := $__ann_32 columnConstraint (^), { PRIMARY_KEY, ), ,, NOT_NULL, DEFAULT, REFERENCES, }
===============================================================================

SHIFT <171> by columnConstraint to <228>.
Condition<228>, REDUCE Production by 'PRIMARY_KEY': 
pid <17>: 
$__ann_32 := $__ann_32 columnConstraint 
Condition<228>, REDUCE Production by ')': 
pid <17>: 
$__ann_32 := $__ann_32 columnConstraint 
Condition<228>, REDUCE Production by ',': 
pid <17>: 
$__ann_32 := $__ann_32 columnConstraint 
Condition<228>, REDUCE Production by 'NOT_NULL': 
pid <17>: 
$__ann_32 := $__ann_32 columnConstraint 
Condition<228>, REDUCE Production by 'DEFAULT': 
pid <17>: 
$__ann_32 := $__ann_32 columnConstraint 
Condition<228>, REDUCE Production by 'REFERENCES': 
pid <17>: 
$__ann_32 := $__ann_32 columnConstraint 
From Condition <164> get package:
columnConstraint := 'DEFAULT' (^)expressionAtom , { ), PRIMARY_KEY, ,, NOT_NULL, DEFAULT, REFERENCES, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := (^)'ID' , { DESC, %, ASC, /, ,, -, $eof$, *, +, }
constantNum := (^)positiveNum , { DESC, %, ASC, /, ,, -, $eof$, *, +, }
expressionAtom := (^)'STR_LITERAL' , { %, DESC, /, ASC, -, ,, $eof$, *, +, }
expressionAtom := expressionAtom mathOperator (^)expressionAtom , { DESC, %, ASC, /, ,, -, $eof$, *, +, }
expressionAtom := (^)expressionAtom mathOperator expressionAtom , { %, DESC, /, ASC, -, ,, $eof$, *, +, }
columnName := (^)'ID' '.' 'ID' , { DESC, %, ASC, /, ,, -, $eof$, *, +, }
constantNum := (^)'-' positiveNum , { DESC, %, ASC, /, ,, -, $eof$, *, +, }
expressionAtom := (^)constantNum , { %, DESC, /, ASC, -, ,, $eof$, *, +, }
expressionAtom := (^)columnName , { %, DESC, /, ASC, -, ,, $eof$, *, +, }
positiveNum := (^)'NUMBER_CONSTANT' , { %, DESC, /, ASC, -, ,, $eof$, *, +, }
===============================================================================

SHIFT <224> by mathOperator to <229>.
From Condition <229> get package:
columnName := 'ID' (^), { DESC, %, ASC, /, After tracing, got package:,, 
-, $eof$columnName,  *:= , +, (^)}'ID'
 columnName := '.' 'ID''ID'  (^)'.', {  )'ID',  PRIMARY_KEY, , { ,, DESCNOT_NULL, , %DEFAULT, , ASCREFERENCES, , /*, , ,/, , -%, , $eof$+, , *-, , +}, }

constantNum------------------------------------------------------------------------------- 
:= 
(^)'-' After tracing, got package:positiveNum
 columnName , { := ), 'ID'PRIMARY_KEY , ,, (^)NOT_NULL, { , DEFAULTDESC, , REFERENCES%, , ASC*, , //, , ,%, , -+, , $eof$-, , *}, 
+expressionAtom,  }:= 
(^)columnNameconstantNum  := , { 'ID'PRIMARY_KEY , )(^), '.', , NOT_NULL'ID',  DEFAULT, , { REFERENCES, DESC*, , %/, , ASC%, , /+, , ,-, , -}, 
$eof$, expressionAtom* , := +, }(^)
columnName ===============================================================================
, { 
PRIMARY_KEY, ), ,, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
columnConstraint := 'DEFAULT' (^)expressionAtom , { ), PRIMARY_KEY, ,, NOT_NULL, DEFAULT, REFERENCES, }
columnName := (^)'ID' , { ), PRIMARY_KEY, ,, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
constantNum := (^)positiveNum , { ), PRIMARY_KEY, ,, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
expressionAtom := (^)'STR_LITERAL' , { PRIMARY_KEY, ), ,, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
expressionAtom := (^)expressionAtom mathOperator expressionAtom , { PRIMARY_KEY, ), ,, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
positiveNum := (^)'NUMBER_CONSTANT' , { PRIMARY_KEY, ), ,, NOT_NULL, DEFAULT, REFERENCES, *, /, %, +, -, }
===============================================================================

SHIFT <229> by 'ID' to <230>
Condition<230>, REDUCE Production by 'DESC': 
pid <68>: 
columnName := 'ID' 
Condition<230>, REDUCE Production by '%': 
pid <68>: 
columnName := 'ID' 
Condition<230>, REDUCE Production by 'ASC': 
pid <68>: 
columnName := 'ID' 
Condition<230>, REDUCE Production by '/': 
pid <68>: 
columnName := 'ID' 
Condition<230>, REDUCE Production by ',': 
pid <68>: 
columnName := 'ID' 
Condition<230>, REDUCE Production by '-': 
pid <68>: 
columnName := 'ID' 
Condition<230>, REDUCE Production by '$eof$': 
pid <68>: 
columnName := 'ID' 
Condition<230>, REDUCE Production by '*': 
pid <68>: 
columnName := 'ID' 
Condition<230>, REDUCE Production by '+': 
pid <68>: 
columnName := 'ID' 
From Condition <230> get package:
columnName := 'ID' '.' (^)'ID' , { DESC, %, ASC, /, ,, -, $eof$, *, +, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID' '.' (^)'ID' , { DESC, %, ASC, /, ,, -, $eof$, *, +, }
===============================================================================

SHIFT <164> by 'DEFAULT' to <172>
This condition already existed.
SHIFT <From Condition <230164> by '> get package:.' to <
231columnConstraint> 
:= 'REFERENCES' (^)tableName , { ), PRIMARY_KEY, ,, NOT_NULL, DEFAULT, REFERENCES, }
-------------------------------------------------------------------------------

From Condition <231> get package:
columnName := 'ID' '.' 'ID' (^), { DESC, %, ASC, /, ,, -, $eof$, *, +, }
-------------------------------------------------------------------------------
After tracing, got package:

After tracing, got package:columnConstraint
 := columnName := 'REFERENCES''ID'  (^)'.'tableName  'ID', {  ), (^)PRIMARY_KEY, { , ,DESC, , NOT_NULL%, , DEFAULTASC, , REFERENCES/, , },, 
-tableName,  $eof$:= , *(^), 'ID'+ , }, { 
PRIMARY_KEY===============================================================================, 
)
, ,, NOT_NULL, DEFAULT, REFERENCES, }
===============================================================================

SHIFT <231> by 'ID' to <232>
Condition<232>, REDUCE Production by 'DESC': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<232>, REDUCE Production by '%': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<232>, REDUCE Production by 'ASC': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<232>, REDUCE Production by '/': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<232>, REDUCE Production by ',': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<232>, REDUCE Production by '-': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<232>, REDUCE Production by '$eof$': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<232>, REDUCE Production by '*': SHIFT <
164pid <> by '67REFERENCES>: 
' to <columnName225 >:= 
'ID'This condition already existed. 
'.' 'ID' 
Condition<232>, REDUCE Production by '+': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
From Condition <161> get package:
dataType := 'INT' (^), { From Condition <NOT_NULL, DEFAULT, 229PRIMARY_KEY> get package:, REFERENCES
, }
constantNum------------------------------------------------------------------------------- 
:= 
positiveNum After tracing, got package:(^)
, { dataType DESC:= , %, 'INT'ASC , /, (^),, { , -NOT_NULL, , $eof$DEFAULT, , *PRIMARY_KEY, , +REFERENCES, , }}

===============================================================================-------------------------------------------------------------------------------



After tracing, got package:
constantNum := positiveNum (^), { DESC, %, ASC, /, ,, -, $eof$, *, +, }
===============================================================================

SHIFT <161> by 'INT' to <147>
This condition already existed.
From Condition <161> get package:
SHIFT <dataType229 > by := positiveNum to <233'VARCHAR'>. 
(^)'(' positiveNum ')' , { NOT_NULL, DEFAULT, PRIMARY_KEY, REFERENCES, }
-------------------------------------------------------------------------------

Condition<233After tracing, got package:>, REDUCE Production by '
DESC': dataType 
:= pid <78'VARCHAR'>: 
 constantNum(^) '(':=  positiveNum positiveNum 
')' Condition<233, { >, REDUCE Production by '%NOT_NULL': , 
DEFAULTpid <, 78PRIMARY_KEY>: 
, constantNumREFERENCES , := }positiveNum
 ===============================================================================

Condition<
233>, REDUCE Production by 'ASC': 
pid <78>: 
constantNum := positiveNum 
Condition<233>, REDUCE Production by '/': 
pid <78>: 
constantNum := positiveNum 
Condition<233>, REDUCE Production by ',': 
pid <78>: 
constantNum := positiveNum 
Condition<233>, REDUCE Production by '-': 
pid <78>: 
constantNum := positiveNum 
Condition<233>, REDUCE Production by '$eof$': 
pid <78SHIFT <>: 
161constantNum> by ' VARCHAR:= ' to <148positiveNum> 

This condition already existed.Condition<233
>, REDUCE Production by '*': 
pid <78>: 
constantNum := positiveNum 
Condition<233>, REDUCE Production by '+': 
pid <78>: 
constantNum := positiveNum 
From Condition <160> get package:
From Condition <$__ann_31 := 229> get package:$__ann_31 
',' createDefinitionexpressionAtom  := (^), { 'STR_LITERAL') , ,(^), , { }
%-------------------------------------------------------------------------------, 
DESC
, /, After tracing, got package:
ASC, $__ann_31- , := ,, $eof$$__ann_31,  *, ','+ , }createDefinition 
(^)-------------------------------------------------------------------------------, { 
)
, ,, After tracing, got package:}

expressionAtom=============================================================================== 
:= 
'STR_LITERAL' (^), { %, DESC, /, ASC, -, ,, $eof$, *, +, }
===============================================================================

SHIFT <160> by createDefinition to <234>.
Condition<234>, REDUCE Production by ')': 
pid <14>: 
$__ann_31 := $__ann_31 ',' createDefinition 
Condition<234>, REDUCE Production by ',': 
pid <14>: 
$__ann_31 := $__ann_31 ',' createDefinition 
SHIFT <229> by 'STR_LITERAL' to <235>
Condition<235>, REDUCE Production by '%': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<235>, REDUCE Production by 'DESC': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<235>, REDUCE Production by '/': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<235>, REDUCE Production by 'ASC': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<235>, REDUCE Production by '-': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
From Condition <Condition<235156>, REDUCE Production by '> get package:,': 

pid <74$__ann_31>: 
 expressionAtom:=  := ',''STR_LITERAL'  (^)
createDefinition Condition<235, { >, REDUCE Production by '$eof$': )
, ,pid <74, >: 
}expressionAtom 
:= -------------------------------------------------------------------------------
'STR_LITERAL'
 
Condition<235>, REDUCE Production by '*': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<235>, REDUCE Production by '+': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
After tracing, got package:
$__ann_31 := ',' (^)createDefinition , { ), ,, }
createDefinition := (^)'ID' dataType $__ann_32 , { ), ,, }
===============================================================================

From Condition <229> get package:
expressionAtom := expressionAtom (^)mathOperator expressionAtom , { %, DESC, /, SHIFT <ASC156, > by '-, ,,' to <236, >$eof$
, *, +, }
expressionAtom := expressionAtom mathOperator expressionAtom (^), { DESC, %, ASC, /, ,, -, $eof$, *, +, }
-------------------------------------------------------------------------------

From Condition <236> get package:
$__ann_31 := ',' createDefinition (^), { ), ,, }
-------------------------------------------------------------------------------

After tracing, got package:
$__ann_31 := ',' createDefinition (^), { ), ,, }
===============================================================================

SHIFT <236> by createDefinition to <237>.
Condition<237>, REDUCE Production by ')': 
pid <15>: 
$__ann_31 := ',' createDefinition 
Condition<237>, REDUCE Production by ',': 
pid <15>: 
$__ann_31 := ',' createDefinition 
From Condition <After tracing, got package:236
> get package:mathOperator 
:= (^)'*' , { createDefinitionSTR_LITERAL , := ID, -, NUMBER_CONSTANT, }'ID'
 mathOperator := (^)(^)dataType'%'  $__ann_32, {  STR_LITERAL, , { ID, )-, , ,NUMBER_CONSTANT, , }}

mathOperator -------------------------------------------------------------------------------:= 
(^)
'-' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
expressionAtom := expressionAtom (^)mathOperator expressionAtom , { %, DESC, /, ASC, -, ,, $eof$, *, +, }
expressionAtom := expressionAtom mathOperator expressionAtom (^), { DESC, %, ASC, /, ,, -, $eof$, *, +, }
mathOperator := (^)'/' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'+' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

After tracing, got package:
dataType := (^)'CHAR' '(' positiveNum ')' , { NOT_NULL, DEFAULT, PRIMARY_KEY, REFERENCES, }
createDefinition := 'ID' (^)dataType $__ann_32 , { ), ,, }
dataType := (^)'INT' , { NOT_NULL, DEFAULT, PRIMARY_KEY, REFERENCES, }
dataType := (^)'VARCHAR' '(' positiveNum ')' , { NOT_NULL, DEFAULT, PRIMARY_KEY, REFERENCES, }
===============================================================================

SHIFT <229> by expressionAtom to <238>.
From Condition <238> get package:
mathOperator := '*' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '*' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <236> by 'ID' to <161>
This condition already existed.
SHIFT <238> by '*' to <33>
This condition already existed.
From Condition <156> get package:
createDefinitions := '(' createDefinition ')' (^), { $eof$, }
-------------------------------------------------------------------------------

After tracing, got package:
createDefinitions := '(' createDefinition ')' (^), { $eof$, From Condition <}
238===============================================================================> get package:


mathOperator := '%' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '%' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <156> by ')' to <239>
Condition<239>, REDUCE Production by '$eof$': 
pid <13>: 
createDefinitions := '(' createDefinition ')' 
SHIFT <238> by '%' to <26>
This condition already existed.
From Condition <238> get package:
mathOperatorFrom Condition < := 61'-'> get package: 
(^), { STR_LITERAL, createTableID , := -, NUMBER_CONSTANT, 'CREATE'} 
'TABLE'------------------------------------------------------------------------------- 
tableName
 createDefinitionsAfter tracing, got package: 
(^), { mathOperator := $eof$, }'-'
 -------------------------------------------------------------------------------
(^)
, { STR_LITERALAfter tracing, got package:, 
ID, createTable- , := NUMBER_CONSTANT, }'CREATE'
 'TABLE'=============================================================================== 
tableName
 createDefinitions (^), { $eof$, }
===============================================================================

SHIFT <238> by '-' to <34>
This condition already existed.
SHIFT <61> by createDefinitions to <240>.
Condition<From Condition <240238>, REDUCE Production by '> get package:$eof$': 

expressionAtompid < 10:= >: 
createTable expressionAtom:=  'CREATE'mathOperator  'TABLE'(^) expressionAtomtableName  createDefinitions , { 
%, DESC, /, ASC, -, ,, $eof$, *, +, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := (^)'ID' , { %, DESC, /, ASC, -, ,, $eof$, *, +, }
constantNum := (^)positiveNum , { %, DESC, /, ASC, -, ,, $eof$, *, +, }
expressionAtom := (^)'STR_LITERAL' , { DESC, %, ASC, /, ,, -, $eof$, *, +, }
expressionAtom := expressionAtom mathOperator (^)expressionAtom , { %, DESC, /, ASC, -, ,, $eof$, *, +, }
expressionAtom := (^)expressionAtom mathOperator expressionAtom , { DESC, %, ASC, /, ,, -, $eof$, *, +, }
columnName := (^)'ID' '.' 'ID' , { %, DESC, /, ASC, -, ,, $eof$, *, +, }
constantNum := (^)'-' positiveNum , { %, DESC, /, ASC, -, ,, $eof$, *, +, }
expressionAtom := (^)constantNum , { DESC, %, ASC, /, ,, -, $eof$, *, +, }
expressionAtom := (^)columnName , { DESC, %, ASC, /, ,, -, $eof$, *, +, }
positiveNum := (^)'NUMBER_CONSTANT' , { DESC, %, ASC, /, ,, -, $eof$, *, +, }
===============================================================================

SHIFT <238> by mathOperator to <215>.
This condition already existed.
Condition<238>, REDUCE Production by 'DESC': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Already existed SHIFT by symbol'%' :
<26>
Try to set it to: REDUCE to:
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
From Condition <238> get package:
mathOperator := '/' Reset Action[(^)238, { ]['%STR_LITERAL'] to REDUCE:, 
IDpid <, 76->: 
, expressionAtomNUMBER_CONSTANT , := }expressionAtom
 -------------------------------------------------------------------------------mathOperator 
expressionAtom
 
After tracing, got package:
Condition<238mathOperator>, REDUCE Production by ' ASC:= ': 
'/'pid < 76(^)>: 
, { expressionAtom STR_LITERAL:= , expressionAtomID , mathOperator- , expressionAtom NUMBER_CONSTANT
, }Condition<
238>, REDUCE Production by '===============================================================================/': 


pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Condition<238>, REDUCE Production by ',': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Already existed SHIFT by symbol'-' :
<34>
Try to set it to: REDUCE to:
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Reset Action[238]['-'] to REDUCE:
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtomAlready existed REDUCE by symbol ' /
': Condition<238
>, REDUCE Production by 'pid <$eof$76': >: 

expressionAtompid < 76:= >: 
expressionAtomexpressionAtom  mathOperator:=  expressionAtomexpressionAtom  mathOperator 
expressionAtomTry to set it to: SHIFT to < 40
>
Already existed SHIFT by symbol'*' :
<33>
Try to set it to: REDUCE to:
Set SHIFT fail in: from condition <pid <76238>: 
> to condition <40expressionAtom>. 
:= This condition already existed.expressionAtom 
mathOperator expressionAtom 
Reset Action[238]['*'] to REDUCE:
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Condition<238>, REDUCE Production by '+': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
From Condition <238> get package:
mathOperator := '+' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '+' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

Already existed REDUCE by symbol '+': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Try to set it to: SHIFT to <41>
Set SHIFT fail in: from condition <238> to condition <41>.
This condition already existed.
From Condition <229> get package:
constantNum := '-' (^)positiveNum , { DESC, %, ASC, /, ,, -, $eof$, *, +, }
-------------------------------------------------------------------------------

From Condition <229> get package:
expressionAtom := constantNum (^), { %, DESC, /, ASC, -, ,, $eof$, *, +, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := constantNum (^), { %, DESC, /, ASC, -, ,, $eof$, *, +, }
===============================================================================

After tracing, got package:
positiveNum := (^)'NUMBER_CONSTANT' , { %, DESC, /, ASC, -, ,, $eof$, *, +, }
constantNum := '-' (^)positiveNum , { DESC, %, ASC, /, ,, -, $eof$, *, +, }
===============================================================================

SHIFT <229> by constantNum to <241>.
Condition<241>, REDUCE Production by '%': 
pid <73>: 
expressionAtom := constantNum 
Condition<241>, REDUCE Production by 'DESC': 
pid <73>: 
expressionAtom := constantNum 
Condition<241>, REDUCE Production by '/': 
pid <73>: 
expressionAtom := constantNum 
Condition<241>, REDUCE Production by 'ASC': 
pid <73>: 
expressionAtom := constantNum 
Condition<241>, REDUCE Production by '-': 
pid <73>: 
expressionAtom := constantNum 
Condition<241>, REDUCE Production by ',': 
pid <73>: 
expressionAtom := constantNum 
Condition<241SHIFT <>, REDUCE Production by '229$eof$> by '': -' to <242
>pid <73
>: 
expressionAtom := constantNum 
Condition<241>, REDUCE Production by '*': 
pid <73>: 
expressionAtom := constantNum 
Condition<241>, REDUCE Production by '+': 
pid <73>: 
expressionAtom := constantNum 
From Condition <242> get package:
positiveNum := 'NUMBER_CONSTANT' (^), { %, DESC, /, ASC, -, ,, $eof$, *, +, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := 'NUMBER_CONSTANT' (^), { %, DESC, /, ASC, -, ,, $eof$, *, +, }
===============================================================================

From Condition <229> get package:
expressionAtom := columnName (^), { %, DESC, /, ASC, -, ,, $eof$, *, +, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := columnName (^), { %, DESC, /, ASC, -, ,, $eof$, *, +, }
===============================================================================

SHIFT <242> by 'NUMBER_CONSTANT' to <243>
Condition<243>, REDUCE Production by '%': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<243>, REDUCE Production by 'DESC': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<243>, REDUCE Production by '/': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<243>, REDUCE Production by 'ASC': 
pid <79SHIFT <>: 
229positiveNum> by  := columnName to <244'NUMBER_CONSTANT'>. 

Condition<243>, REDUCE Production by '-': 
Condition<pid <79244>: 
>, REDUCE Production by 'positiveNum% ': := 
'NUMBER_CONSTANT'pid < 75
>: 
expressionAtom Condition<243:= >, REDUCE Production by 'columnName, ': 

pid <79Condition<244>: 
>, REDUCE Production by 'positiveNumDESC ': := 
'NUMBER_CONSTANT'pid < 75
>: 
expressionAtomCondition< 243:= >, REDUCE Production by 'columnName$eof$ ': 

Condition<244pid <>, REDUCE Production by '79/>: 
': positiveNum
 pid <75:= >: 
expressionAtom 'NUMBER_CONSTANT':=  columnName
 
Condition<243>, REDUCE Production by '*Condition<': 244
>, REDUCE Production by 'ASCpid <': 79
>: 
pid <positiveNum75 >: 
:= expressionAtom := 'NUMBER_CONSTANT'columnName  

Condition<243Condition<>, REDUCE Production by '244+>, REDUCE Production by '': -': 

pid <79pid <>: 
75positiveNum>: 
 expressionAtom:=  := 'NUMBER_CONSTANT'columnName  

Condition<244>, REDUCE Production by ',': 
pid <75>: 
expressionAtom := columnName 
Condition<244>, REDUCE Production by '$eof$': 
pid <75>: 
expressionAtom := columnName 
Condition<244>, REDUCE Production by '*': 
pid <75>: 
expressionAtom := columnName 
Condition<244>, REDUCE Production by '+': 
pid <75>: 
expressionAtom := columnName 
From Condition <242> get package:
constantNum := '-' positiveNum (^), { DESC, %, ASC, /, ,, -, $eof$, *, +, }
-------------------------------------------------------------------------------

After tracing, got package:
constantNum := '-' positiveNum (^), { DESC, %, ASC, /, ,, -, $eof$, *, +, }
===============================================================================

From Condition <229> get package:
positiveNum := 'NUMBER_CONSTANT' (^), { %, DESC, /, ASC, -, ,, $eof$, *, +, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := 'NUMBER_CONSTANT' (^), { %, DESC, /, ASC, -, ,, $eof$, *, +, }
===============================================================================

SHIFT <242> by positiveNum to <245>.
Condition<245>, REDUCE Production by 'DESC': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<245>, REDUCE Production by '%': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<245>, REDUCE Production by 'ASC': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<245>, REDUCE Production by '/': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<245>, REDUCE Production by ',': SHIFT <229
> by 'NUMBER_CONSTANTpid <' to <24377>>: 

constantNum This condition already existed.:= 
'-' positiveNum 
Condition<245>, REDUCE Production by '-': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<245>, REDUCE Production by '$eof$': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<245>, REDUCE Production by '*': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<245>, REDUCE Production by '+': 
pid <77>: 
constantNum := '-' positiveNum 
Already existed SHIFT by symbol'%' :
<26>
Try to set it to: REDUCE to:
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Reset Action[224]['%'] to REDUCE:
From Condition <pid <76224>: 
> get package:expressionAtom := 
expressionAtom mathOperator expressionAtom mathOperator
 := Condition<224'/'>, REDUCE Production by ' DESC': (^)
, { pid <76STR_LITERAL>: 
, expressionAtom ID:= , expressionAtom- , mathOperator NUMBER_CONSTANTexpressionAtom,  }

Condition<-------------------------------------------------------------------------------224
>, REDUCE Production by '/
': 
After tracing, got package:pid <76
>: 
mathOperatorexpressionAtom  := := expressionAtom '/'mathOperator  expressionAtom (^)
, { Condition<STR_LITERAL224, >, REDUCE Production by 'IDASC, ': -
, pid <76NUMBER_CONSTANT>: 
, expressionAtom} := 
expressionAtom=============================================================================== 
mathOperator
 expressionAtom 
Already existed SHIFT by symbol'-' :
<34>
Try to set it to: REDUCE to:
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Reset Action[224]['-'] to REDUCE:
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Condition<224>, REDUCE Production by ',': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Already existed REDUCE by symbol 'Condition</224': >, REDUCE Production by '$eof$
': 
pid <pid <7676>: 
>: 
expressionAtomexpressionAtom  := := expressionAtomexpressionAtom  mathOperatormathOperator  expressionAtomexpressionAtom  

Try to set it to: SHIFT to <40Already existed >SHIFT
 by symbol'*' :
<33>
Try to set it to: REDUCE to:
Set SHIFT fail in: from condition <pid <76224>: 
> to condition <40expressionAtom>. 
:= expressionAtomThis condition already existed. 
mathOperator expressionAtom 
Reset Action[224]['*'] to REDUCE:
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Condition<224>, REDUCE Production by '+': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
From Condition <224> get package:
mathOperator := '+' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '+' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

Already existed REDUCE by symbol '+': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Try to set it to: SHIFT to <41>
Set SHIFT fail in: from condition <224> to condition <41>.
This condition already existed.
From Condition <215> get package:
constantNum := '-' (^)positiveNum , { %, DESC, /, ASC, -, ,, $eof$, *, +, }
-------------------------------------------------------------------------------

From Condition <215> get package:
expressionAtom := constantNum (^), { DESC, %, ASC, /, ,, -, $eof$, *, +, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := constantNum (^), { DESC, %, ASC, /, ,, -, $eof$, *, +, }
===============================================================================

After tracing, got package:
positiveNum := (^)'NUMBER_CONSTANT' , { DESC, %, ASC, /, ,, -, $eof$, *, +, }
constantNum := '-' (^)positiveNum , { %, DESC, /, ASC, -, ,, $eof$, *, +, }
===============================================================================

SHIFT <215> by constantNum to <246>.
Condition<246>, REDUCE Production by 'DESC': 
pid <73>: 
expressionAtom := constantNum 
Condition<246>, REDUCE Production by '%': 
pid <73>: 
expressionAtom := constantNum 
Condition<246>, REDUCE Production by 'ASC': 
pid <73>: 
expressionAtom := constantNum 
Condition<246>, REDUCE Production by '/': 
pid <73>: 
expressionAtom := constantNum 
Condition<246>, REDUCE Production by ',': 
pid <73>: 
expressionAtom := constantNum 
SHIFT <Condition<246215>, REDUCE Production by '> by '--': ' to <247
>
pid <73>: 
expressionAtom := constantNum 
Condition<246>, REDUCE Production by '$eof$': 
pid <73>: 
expressionAtom := constantNum 
Condition<246>, REDUCE Production by '*': 
pid <73>: 
expressionAtom := constantNum 
Condition<246>, REDUCE Production by '+': 
pid <73>: 
expressionAtomFrom Condition < := constantNum 
247> get package:
positiveNum := 'NUMBER_CONSTANT' (^), { DESC, %, ASC, /, ,, -, $eof$, *, +, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := 'NUMBER_CONSTANT' (^), { DESC, %, ASC, /, ,, -, $eof$, *, +, }
===============================================================================

From Condition <215> get package:
expressionAtom := columnName (^), { DESC, %, ASC, /, ,, -, $eof$, *, +, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtomSHIFT < 247:= > by 'NUMBER_CONSTANT' to <columnName248 >
(^), { DESC, %, ASC, /, ,, -, $eof$, *, +, }
===============================================================================Condition<248
>, REDUCE Production by 'DESC
': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<248>, REDUCE Production by '%': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<248>, REDUCE Production by 'ASC': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<248>, REDUCE Production by '/': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<248>, REDUCE Production by ',': 
pid <79SHIFT <>: 
215positiveNum> by  columnName:=  to <249'NUMBER_CONSTANT'>. 

Condition<248>, REDUCE Production by '-': 
Condition<pid <24979>, REDUCE Production by '>: 
DESCpositiveNum':  
:= 'NUMBER_CONSTANT'pid <75 >: 

expressionAtom Condition<:= 248columnName>, REDUCE Production by ' $eof$': 

Condition<pid <24979>, REDUCE Production by '>: 
%positiveNum':  
:= 'NUMBER_CONSTANT'pid <75 >: 

expressionAtom Condition<248:= >, REDUCE Production by 'columnName* ': 

pid <79Condition<>: 
249positiveNum>, REDUCE Production by ' ASC:= ': 
'NUMBER_CONSTANT'pid <75 >: 

expressionAtom := Condition<248columnName>, REDUCE Production by ' +': 

Condition<pid <79249>: 
>, REDUCE Production by 'positiveNum/ ': := 
'NUMBER_CONSTANT'pid <75 >: 

expressionAtom := columnName 
Condition<249>, REDUCE Production by ',': 
pid <75>: 
expressionAtom := columnName 
Condition<249>, REDUCE Production by '-': 
pid <75>: 
expressionAtom := columnName 
Condition<249>, REDUCE Production by '$eof$': 
pid <75>: 
expressionAtom := columnName 
Condition<249>, REDUCE Production by '*': 
pid <75>: 
expressionAtom := columnName 
From Condition <Condition<249247>, REDUCE Production by '> get package:+': 

constantNumpid <75 >: 
:= expressionAtom := columnName'-'  
positiveNum (^), { %, DESC, /, ASC, -, ,, $eof$, *, +, }
-------------------------------------------------------------------------------

After tracing, got package:
constantNum := '-' positiveNum (^), { %, DESC, /, ASC, -, ,, $eof$, *, +, }
===============================================================================

From Condition <215> get package:
positiveNum := 'NUMBER_CONSTANT' (^), { DESC, %, ASC, /, ,, -, $eof$, *, +, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := 'NUMBER_CONSTANT' (^), { DESC, %, ASC, /, ,, -, $eof$, *, +, SHIFT <}247
> by ===============================================================================positiveNum to <
250>.

Condition<250>, REDUCE Production by '%': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<250>, REDUCE Production by 'DESC': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<250>, REDUCE Production by '/': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<250>, REDUCE Production by 'ASC': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<250>, REDUCE Production by '-': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<250SHIFT <>, REDUCE Production by '215,> by '': NUMBER_CONSTANT
' to <248pid <>77
>: 
constantNumThis condition already existed. 
:= '-' positiveNum 
Condition<250>, REDUCE Production by '$eof$': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<250>, REDUCE Production by '*': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<250>, REDUCE Production by '+': 
pid <77>: 
constantNum := '-' positiveNum 
From Condition <211> get package:
mathOperator := '-' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '-' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================From Condition <
211
> get package:
mathOperator := '/' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '/' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <211> by '-' to <34>
This condition already existed.
SHIFT <211> by '/' to <40>
This condition already existed.
From Condition <211> get package:
orderByExpression := expressionAtom 'DESC' (^), { ,, $eof$, }
-------------------------------------------------------------------------------

After tracing, got package:
orderByExpression := expressionAtom 'DESC' (^), { ,, $eof$, }
===============================================================================From Condition <
211
> get package:
mathOperator := '+' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '+' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <211> by 'DESC' to <251>
Condition<251>, REDUCE Production by ',': 
pid <59>: 
orderByExpression := expressionAtom 'DESC' 
Condition<251SHIFT <>, REDUCE Production by '211$eof$> by '': +' to <
41>pid <
59This condition already existed.>: 

orderByExpression := expressionAtom 'DESC' 
From Condition <210> get package:
expressionAtom := 'STR_LITERAL' (^), { %, DESC, /, ASC, -, ,, $eof$, *, +, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := 'STR_LITERAL' (^), { %, DESC, /, ASC, -, ,, $eof$, *, +, }
===============================================================================

From Condition <210> get package:
orderByClause := 'ORDERBY' orderByExpression (^)$__ann_38 , { $eof$, }
orderByClause := 'ORDERBY' orderByExpression (^), { $eof$, }
-------------------------------------------------------------------------------

SHIFT <210> by 'STR_LITERAL' to <235>
This condition already existed.
After tracing, got package:
$__ann_38 := (^)$__ann_38 ',' orderByExpression , { $eof$, ,, }
orderByClause := 'ORDERBY' orderByExpression (^)$__ann_38 , { $eof$, }
$__ann_38 := (^)',' orderByExpression , { $eof$, ,, }
orderByClause := 'ORDERBY' orderByExpression (^), { $eof$, }
===============================================================================

SHIFT <210> by orderByExpression to <252>.
From Condition <252> get package:
orderByClause := 'ORDERBY' orderByExpression $__ann_38 (^), { $eof$, }
$__ann_38 := $__ann_38 (^)',' orderByExpression , { $eof$, ,, }
-------------------------------------------------------------------------------

After tracing, got package:
From Condition <orderByClause := 'ORDERBY'252 > get package:orderByExpression
 $__ann_38 (^), { $__ann_38$eof$ , := }
','$__ann_38  := (^)orderByExpression $__ann_38 , { (^)','$eof$ , orderByExpression ,, , { }$eof$
, -------------------------------------------------------------------------------,, 
}

===============================================================================

SHIFT <252> by $__ann_38 to <253>.
Condition<253>, REDUCE Production by '$eof$': 
pid <54>: 
orderByClause := 'ORDERBY' orderByExpression $__ann_38 
From Condition <253> get package:
$__ann_38 := $__ann_38 ',' (^)orderByExpression , { $eof$, ,, }
-------------------------------------------------------------------------------

After tracing, got package:
$__ann_38 := ',' (^)orderByExpression , { $eof$, ,, }
expressionAtom := (^)constantNum , { /, ASC, $eof$, -, ,, %, DESC, *, +, }
orderByExpression := (^)expressionAtom 'DESC' , { $eof$, ,, }
expressionAtom := (^)columnName , { /, ASC, $eof$, -, ,, %, DESC, *, +, }
constantNum := (^)positiveNum , { /, ASC, $eof$, -, ,, DESC, %, *, +, }
orderByExpression := (^)expressionAtom 'ASC' , { $eof$, ,, }
expressionAtom := (^)'STR_LITERAL' , { /, ASC, $eof$, -, ,, %, DESC, *, +, }
orderByExpression := (^)expressionAtom , { $eof$, ,, }
expressionAtom := (^)expressionAtom mathOperator expressionAtom , { /, ASC, $eof$, -, ,, %, DESC, *, +, }
constantNum := (^)'-' positiveNum , { /, ASC, $eof$, -, ,, DESC, %, *, +, }
columnName := (^)'ID' , { /, ASC, $eof$, -, ,, %, DESC, *, +, }
columnName := (^)'ID' '.' 'ID' , { /, ASC, $eof$, -, ,, %, DESC, *, +, }
positiveNum := (^)'NUMBER_CONSTANT' , { /, ASC, $eof$, -, ,, %, DESC, *, +, }
===============================================================================

After tracing, got package:
constantNum := (^)positiveNum , { DESC, %, *, /, ASC, +, -, ,, $eof$, }
orderByExpression := (^)expressionAtom 'ASC' , { $eof$, ,, }
expressionAtom := (^)'STR_LITERAL' , { %, DESC, *, ASC, /, +, ,, -, $eof$, }
orderByExpression := (^)expressionAtom , { $eof$, ,, }
expressionAtom := (^)expressionAtom mathOperator expressionAtom , { %, DESC, *, ASC, /, +, ,, -, $eof$, }
$__ann_38 := $__ann_38 ',' (^)orderByExpression , { $eof$, ,, }
expressionAtom := (^)constantNum , { %, DESC, *, ASC, /, +, ,, -, $eof$, }
orderByExpression := (^)expressionAtom 'DESC' , { $eof$, ,, }
expressionAtom := (^)columnName , { %, DESC, *, ASC, /, +, ,, -, $eof$, }
constantNum := (^)'-' positiveNum , { DESC, %, *, /, ASC, +, -, ,, $eof$, }
columnName := (^)'ID' , { DESC, %, *, /, ASC, +, -, ,, $eof$, }
columnName := (^)'ID' '.' 'ID' , { DESC, %, *, /, ASC, +, -, ,, $eof$, }
positiveNum := (^)'NUMBER_CONSTANT' , { %, DESC, *, ASC, /, +, ,, -, $eof$, }
===============================================================================

SHIFT <252> by ',' to <254>
From Condition <254> get package:
$__ann_38 := ',' orderByExpression (^), { $eof$, ,, }
-------------------------------------------------------------------------------

After tracing, got package:
$__ann_38 := ',' orderByExpression (^), { $eof$, ,, }
===============================================================================

SHIFT <253> by ',' to <255>
SHIFT <254> by orderByExpression to <256>.
From Condition <255> get package:
Condition<256constantNum>, REDUCE Production by ' $eof$:= ': 
positiveNum pid <57(^)>: 
, { $__ann_38 DESC:= , %',',  *orderByExpression,  /, 
ASC, +Condition<256, >, REDUCE Production by '-,, ': ,
, $eof$pid <, 57}>: 
$__ann_38
 -------------------------------------------------------------------------------:= 
','
 orderByExpression After tracing, got package:

constantNum := positiveNum (^), { DESC, %, *, /, ASC, +, -, ,, $eof$, }
===============================================================================

From Condition <254> get package:
expressionAtom := constantNum (^), { /, ASC, $eof$, -, ,, %, DESC, *, +, }
-------------------------------------------------------------------------------

After tracing, got package:
SHIFT <expressionAtom255 > by := positiveNum to <257constantNum>. 
(^), { /, ASC, $eof$, -, ,, %, DESC, *, +, }
===============================================================================
Condition<
257>, REDUCE Production by 'DESC': 
pid <78>: 
constantNum := positiveNum 
Condition<257>, REDUCE Production by '%': 
pid <78>: 
constantNum := positiveNum 
Condition<257>, REDUCE Production by '*': 
pid <78>: 
constantNum := positiveNum 
Condition<257>, REDUCE Production by '/': 
pid <78>: 
constantNum := positiveNum 
Condition<257>, REDUCE Production by 'ASC': 
pid <78>: 
constantNum := positiveNum 
Condition<257>, REDUCE Production by '+': 
SHIFT <pid <25478> by >: 
constantNumconstantNum to < 258:= >.positiveNum
 
Condition<257>, REDUCE Production by '-': 
Condition<pid <25878>, REDUCE Production by '>: 
/constantNum':  
:= positiveNum pid <73
>: 
expressionAtom Condition<257:= >, REDUCE Production by 'constantNum, ': 

Condition<pid <78258>: 
>, REDUCE Production by 'constantNumASC ': := 
positiveNumpid <73 >: 

expressionAtom Condition<257:= >, REDUCE Production by 'constantNum$eof$ ': 

Condition<258pid <78>, REDUCE Production by '>: 
$eof$constantNum':  
:= pid <73positiveNum>: 
 expressionAtom 
:= constantNum 
Condition<258>, REDUCE Production by '-': 
pid <73>: 
expressionAtom := constantNum 
Condition<258>, REDUCE Production by ',': 
pid <73>: 
expressionAtom := constantNum 
Condition<258>, REDUCE Production by '%': 
pid <73>: 
expressionAtom := constantNum 
Condition<258>, REDUCE Production by 'DESC': 
pid <73>: 
expressionAtom := constantNum 
Condition<258>, REDUCE Production by '*': 
pid <73>: 
expressionAtom := constantNum 
Condition<258>, REDUCE Production by '+': 
pid <73>: 
expressionAtom := constantNum 
From Condition <255> get package:
expressionAtom := expressionAtom (^)mathOperator expressionAtom , { %, DESC, *, ASC, /, +, ,, -, $eof$, }
orderByExpression := expressionAtom (^), { $eof$, ,, }
orderByExpression := expressionAtom (^)'ASC' , { $eof$, ,, }
orderByExpression := expressionAtom (^)'DESC' , { $eof$, ,, }
-------------------------------------------------------------------------------

From Condition <254> get package:
orderByExpression := expressionAtom (^)'DESC' , { $eof$, ,, }
expressionAtom := expressionAtom (^)mathOperator expressionAtom , { /, ASC, $eof$, -, ,, %, DESC, *, +, }
orderByExpression := expressionAtom (^), { $eof$, ,, }
orderByExpression := expressionAtom (^)'ASC' , { $eof$, ,, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := (^)'*' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
orderByExpression := expressionAtom (^)'ASC' , { $eof$, ,, }
mathOperator := (^)'%' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
orderByExpression := expressionAtom (^), { $eof$, ,, }
expressionAtom := expressionAtom (^)mathOperator expressionAtom , { %, DESC, *, ASC, /, +, ,, -, $eof$, }
mathOperator := (^)'-' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'/' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
orderByExpression := expressionAtom (^)'DESC' , { $eof$, ,, }
mathOperator := (^)'+' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, After tracing, got package:}

mathOperator=============================================================================== 
:= (^)
'/' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
orderByExpression := expressionAtom (^)'DESC' , { $eof$, ,, }
mathOperator := (^)'+' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'*' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
orderByExpression := expressionAtom (^)'ASC' , { $eof$, ,, }
mathOperator := (^)'%' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
orderByExpression := expressionAtom (^), { $eof$, ,, }
expressionAtom := expressionAtom (^)mathOperator expressionAtom , { /, ASC, $eof$, -, ,, %, DESC, *, +, }
mathOperator := (^)'-' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <255> by expressionAtom to <259>.
From Condition <259> get package:
mathOperator := '*' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '*' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <254> by expressionAtom to <260>.
From Condition <260> get package:
mathOperator := '/' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
SHIFT <-------------------------------------------------------------------------------259
> by '*
' to <33After tracing, got package:>

mathOperatorThis condition already existed. 
:= '/' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

From Condition <259> get package:
orderByExpression := expressionAtom 'ASC' (^), { $eof$, ,, }
-------------------------------------------------------------------------------
SHIFT <
260> by '/After tracing, got package:' to <40
>
orderByExpressionThis condition already existed. 
:= expressionAtom 'ASC' (^), { $eof$, ,, }
===============================================================================

From Condition <SHIFT <259260> by '> get package:ASC' to <261
>
orderByExpression := expressionAtom 'DESC' (^), { $eof$, ,, }
Condition<-------------------------------------------------------------------------------261
>, REDUCE Production by '
$eof$': After tracing, got package:

pid <58orderByExpression>: 
 := orderByExpression := expressionAtom expressionAtom 'DESC''ASC'  
(^), { Condition<261$eof$>, REDUCE Production by ', ,,': , 
}pid <58
>: 
===============================================================================orderByExpression 
:= 
expressionAtom 'ASC' 
SHIFT <260> by 'DESC' to <262>
Condition<262From Condition <>, REDUCE Production by '$eof$': 
259pid <> get package:59
>: 
orderByExpression := expressionAtom mathOperator 'DESC':=  
'%'Condition< 262(^)>, REDUCE Production by ', { ,': STR_LITERAL
, IDpid <, 59->: 
, orderByExpressionNUMBER_CONSTANT , := }expressionAtom 
'DESC'------------------------------------------------------------------------------- 


After tracing, got package:
mathOperator := '%' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

From Condition <260> get package:
mathOperator := '+' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

SHIFT <After tracing, got package:259
> by '%' to <26mathOperator> 
:= This condition already existed.
'+' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

Condition<259>, REDUCE Production by '$eof$': 
pid <60>: 
orderByExpression := expressionAtom 
Condition<259>, REDUCE Production by ',': 
pid <60>: 
orderByExpression := expressionAtom 
SHIFT <260> by '+' to <41>
This condition already existed.
From Condition <259> get package:
expressionAtom := expressionAtom mathOperator (^)expressionAtom , { %, DESC, *, ASC, /, +, ,, -, $eof$, }
-------------------------------------------------------------------------------

From Condition <260> get package:
mathOperator := '*' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '*' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <260> by '*' to <33>
This condition already existed.
From Condition <260> get package:
orderByExpression := expressionAtom 'ASC' (^), { $eof$, ,, }
-------------------------------------------------------------------------------

After tracing, got package:
orderByExpression := expressionAtom 'ASC' (^), { $eof$, ,, }
===============================================================================

SHIFT <260> by 'ASC' to <261>
This condition already existed.
From Condition <260> get package:
mathOperator := '%' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '%' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <260> by '%' to <26>
This condition already existed.
Condition<260>, REDUCE Production by '$eof$': 
pid <60>: 
orderByExpression := expressionAtom 
Condition<260>, REDUCE Production by ',': 
pid <60>: 
orderByExpression := expressionAtom 
From Condition <260> get package:
expressionAtom := expressionAtom mathOperator (^)expressionAtom , { /, ASC, $eof$, -, ,, %, DESC, *, +, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := (^)'ID' , { %, DESC, *, ASC, /, +, ,, -, $eof$, }
constantNum := (^)positiveNum , { %, DESC, *, ASC, /, +, ,, -, $eof$, }
expressionAtom := (^)'STR_LITERAL' , { DESC, %, *, /, ASC, +, -, ,, $eof$, }
expressionAtom := expressionAtom mathOperator (^)expressionAtom , { %, DESC, *, ASC, /, +, ,, -, $eof$, }
expressionAtom := (^)expressionAtom mathOperator expressionAtom , { DESC, %, *, /, ASC, +, -, ,, $eof$, }
columnName := (^)'ID' '.' 'ID' , { %, DESC, *, ASC, /, +, ,, -, $eof$, }
constantNum := (^)'-' positiveNum , { %, DESC, *, ASC, /, +, ,, -, $eof$, }
expressionAtom := (^)constantNum , { DESC, %, *, /, ASC, +, -, ,, $eof$, }
expressionAtom := (^)columnName , { DESC, %, *, /, ASC, +, -, ,, $eof$, }
positiveNum := (^)'NUMBER_CONSTANT' , { DESC, %, *, /, ASC, +, -, ,, $eof$, }
===============================================================================

SHIFT <259> by mathOperator to <263>.
From Condition <263> get package:
columnName := 'ID' (^), { %, DESC, *, ASC, /, +, ,, -, $eof$, }
columnName := 'ID' (^)'.' 'ID' , { %, DESC, *, ASC, /, +, ,, -, $eof$, }
-------------------------------------------------------------------------------
After tracing, got package:

After tracing, got package:
columnNamecolumnName  := := (^)'ID''ID'  (^), { , { %, /DESC, , ASC*, , $eof$ASC, , -/, , ,+, , %,, , DESC-, , *$eof$, , +}, 
}columnName 
:= constantNum := 'ID' (^)positiveNum(^) '.' , { 'ID'/ , ASC, , { $eof$, %-, , DESC,, , *%, , ASCDESC, , /*, , ++, , ,}, 
-expressionAtom,  $eof$:= , }(^)
'STR_LITERAL'=============================================================================== 
, { 
ASC, /, $eof$, ,, -, DESC, %, *, +, }
expressionAtom := expressionAtom mathOperator (^)expressionAtom , { /, ASC, $eof$, -, ,, %, DESC, *, +, }
expressionAtom := (^)expressionAtom mathOperator expressionAtom , { ASC, /, $eof$, ,, -, DESC, %, *, +, }
columnName := (^)'ID' '.' 'ID' , { /, ASC, $eof$, -, ,, %, DESC, *, +, }
constantNum := (^)'-' positiveNum , { /, ASC, $eof$, -, ,, %, DESC, *, +, }
expressionAtom := (^)constantNum , { ASC, /, $eof$, ,, -, DESC, %, *, +, }
expressionAtom := (^)columnName , { ASC, /, $eof$, ,, -, DESC, %, *, +, }
positiveNum := (^)'NUMBER_CONSTANT' , { ASC, /, $eof$, ,, -, DESC, %, *, +, }
===============================================================================

SHIFT <263> by 'ID' to <264>
Condition<264>, REDUCE Production by '%': 
pid <68>: 
columnName := 'ID' 
Condition<264>, REDUCE Production by 'DESC': 
pid <68>: 
columnName := 'ID' 
Condition<264>, REDUCE Production by '*': 
pid <68>: 
columnName := 'ID' 
Condition<264>, REDUCE Production by 'ASC': 
pid <68>: 
columnName := 'ID' 
Condition<264>, REDUCE Production by '/': 
pid <68>: 
columnName := 'ID' 
Condition<264>, REDUCE Production by '+': 
pid <68>: 
columnName := 'ID' 
Condition<264>, REDUCE Production by ',': 
pid <68>: 
columnName := 'ID' 
Condition<264>, REDUCE Production by '-': 
pid <68>: 
columnName := 'ID' 
Condition<264>, REDUCE Production by '$eof$': 
pid <68>: 
columnName := 'ID' 
From Condition <264> get package:
columnName := 'ID' '.' (^)'ID' , { %, DESC, *, ASC, /, +, ,, -, $eof$, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID' '.' (^)'ID' , { %, DESC, *, ASC, /, +, ,, -, $eof$, }
===============================================================================

SHIFT <260> by mathOperator to <265>.
From Condition <265> get package:
SHIFT <columnName264 > by ':= .' to <266'ID'> 
(^), { /, ASC, $eof$, -, ,, %, DESC, *, +, }
columnName := 'ID' (^)'.' 'ID' , { /, ASC, $eof$, -, ,, %, DESC, *, +, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID' (^), { /, ASC, $eof$, -, ,, %, DESC, *, +, }
From Condition <columnName := 'ID'266 > get package:(^)
'.' 'ID' columnName , { := /, ASC, 'ID'$eof$ , -'.',  ,, 'ID'% , DESC, (^)*, { , +, %}, 
DESC===============================================================================, 
*
, ASC, /, +, ,, -, $eof$, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID' '.' 'ID' (^), { %, DESC, *, ASC, /, +, ,, -, $eof$, }
===============================================================================

SHIFT <265> by 'ID' to <267>
Condition<267>, REDUCE Production by '/': 
pid <68>: 
columnName := 'ID' 
Condition<267>, REDUCE Production by 'ASC': 
pid <68>: 
columnName := 'ID' 
Condition<267>, REDUCE Production by '$eof$': 
pid <68>: 
columnName := 'ID' 
Condition<267>, REDUCE Production by '-': 
pid <68>: 
columnName := 'ID' 
SHIFT <Condition<266267> by '>, REDUCE Production by 'ID,' to <268': >

pid <68>: 
columnName := 'ID' 
Condition<267Condition<>, REDUCE Production by '268%>, REDUCE Production by '': %
': pid <68
>: 
columnName pid <67:= >: 
'ID'columnName  
:= Condition<267'ID'>, REDUCE Production by ' DESC'.'':  
'ID'pid <68 >: 

columnName := Condition<268'ID'>, REDUCE Production by ' DESC': 

Condition<267pid <>, REDUCE Production by '67*>: 
': columnName
 pid <:= 68'ID'>: 
 columnName'.'  := 'ID''ID'  

Condition<268Condition<>, REDUCE Production by '267*>, REDUCE Production by '': +
': pid <67
>: 
pid <columnName68 >: 
:= columnName 'ID':=  'ID''.'  
'ID' 
Condition<268>, REDUCE Production by 'ASC': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<268>, REDUCE Production by '/': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<268>, REDUCE Production by '+': 
pid <67>: 
columnName := From Condition <'ID' '.' 'ID'267 > get package:

Condition<268columnName>, REDUCE Production by ' ,:= ': 
'ID'pid <67 >: 
columnName'.'  := (^)'ID''ID'  '.' , { 'ID' /
, Condition<ASC268, >, REDUCE Production by '$eof$-, ': -
, pid <,67, >: 
%columnName,  DESC:= , *'ID',  +'.',  }'ID'
 -------------------------------------------------------------------------------

Condition<
268After tracing, got package:>, REDUCE Production by '
$eof$': columnName
 pid <67:= >: 
columnName 'ID':=  'ID''.'  '.'(^) 'ID''ID'  
, { /, ASC, $eof$, -, ,, %, DESC, *, +, }
===============================================================================

SHIFT <267> by '.' to <269>
From Condition <263> get package:
constantNum := positiveNum (^), { %, DESC, *, ASC, /, +, ,, -, $eof$, }
-------------------------------------------------------------------------------

After tracing, got package:
constantNum := positiveNum (^), { %, DESC, *, ASC, /, +, ,, -, $eof$, }
From Condition <===============================================================================
269
> get package:
columnName := 'ID' '.' 'ID' (^), { /, ASC, $eof$, -, ,, %, DESC, *, +, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID' '.' 'ID' (^), { /, ASC, $eof$, -, ,, %, DESC, *, +, }
===============================================================================

SHIFT <263> by positiveNum to <270>.
Condition<270>, REDUCE Production by '%': 
pid <78>: 
constantNum := positiveNum 
Condition<270>, REDUCE Production by 'DESC': 
pid <78>: 
constantNum := positiveNum 
Condition<270>, REDUCE Production by '*': 
pid <78>: 
constantNum := positiveNum 
SHIFT <Condition<270269>, REDUCE Production by '> by 'ASCID': ' to <271
>
pid <78>: 
constantNum := positiveNum 
Condition<270Condition<>, REDUCE Production by '271/>, REDUCE Production by '': /': 

pid <78pid <>: 
67constantNum>: 
 := columnName positiveNum:=  
'ID'Condition<270 >, REDUCE Production by ''.'+ ': 'ID'
 pid <78
>: 
constantNum Condition<271:= >, REDUCE Production by 'positiveNumASC ': 

Condition<270pid <67>, REDUCE Production by '>: 
,columnName':  
:= pid <78'ID'>: 
 constantNum'.'  := 'ID'positiveNum  

Condition<271Condition<>, REDUCE Production by '270$eof$>, REDUCE Production by '': -
': 
pid <67pid <>: 
78columnName>: 
 constantNum:=  := 'ID'positiveNum  '.'
 'ID'Condition<270 >, REDUCE Production by '
$eof$': Condition<
271pid <78>, REDUCE Production by '>: 
-constantNum':  
:= pid <67positiveNum>: 
 
columnName := 'ID' '.' 'ID' 
Condition<271>, REDUCE Production by ',': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<271>, REDUCE Production by '%': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<271>, REDUCE Production by 'DESC': 
pid <67>: 
columnName := 'ID' '.' 'ID' From Condition <
263Condition<271> get package:>, REDUCE Production by '
*': 
expressionAtompid < 67:= >: 
columnName := 'STR_LITERAL''ID'  '.'(^) , { 'ID' DESC
, Condition<271%>, REDUCE Production by ', +*': , 
/pid <67, >: 
ASCcolumnName,  +:= , -'ID',  ,'.',  $eof$'ID',  }

-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := 'STR_LITERAL' (^), { DESC, %, *, /, ASC, +, -, ,, $eof$, }
===============================================================================

From Condition <265> get package:
SHIFT <263constantNum> by ' STR_LITERAL:= ' to <272positiveNum> 
(^), { /, ASC, $eof$, -, ,, %, DESC, *, +, }
Condition<-------------------------------------------------------------------------------272
>, REDUCE Production by 'DESC': 
pid <74
>: 
expressionAtom := After tracing, got package:'STR_LITERAL'
 
constantNum Condition<:= 272positiveNum>, REDUCE Production by ' %': 
(^), { pid <74/>: 
, expressionAtomASC , := $eof$, 'STR_LITERAL'- , 
,, %Condition<, 272DESC>, REDUCE Production by ', *': *
, +pid <, 74}>: 

expressionAtom ===============================================================================:= 
'STR_LITERAL'
 
Condition<272>, REDUCE Production by '/': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<272>, REDUCE Production by 'ASC': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<272>, REDUCE Production by '+': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<272>, REDUCE Production by '-': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<272>, REDUCE Production by ',': 
pid <74SHIFT <>: 
265expressionAtom> by  positiveNum:=  to <273'STR_LITERAL'>. 

Condition<272>, REDUCE Production by '$eof$': 
pid <74Condition<>: 
273expressionAtom>, REDUCE Production by ' /:= ': 
'STR_LITERAL'pid < 78
>: 
constantNum := positiveNum 
Condition<273>, REDUCE Production by 'ASC': 
pid <78>: 
constantNum := positiveNum 
Condition<273>, REDUCE Production by '$eof$': 
pid <78>: 
constantNum := positiveNum 
Condition<273>, REDUCE Production by '-': 
pid <78>: 
constantNum := positiveNum 
Condition<273>, REDUCE Production by ',': 
pid <78>: 
constantNum := positiveNum 
Condition<273>, REDUCE Production by '%': 
pid <78>: 
constantNum := positiveNum 
Condition<273>, REDUCE Production by 'DESC': 
pid <78>: 
constantNum := positiveNum 
Condition<From Condition <273263>, REDUCE Production by '> get package:*': 

pid <78expressionAtom>: 
 constantNum:=  := positiveNumexpressionAtom  
(^)Condition<mathOperator273 >, REDUCE Production by '+': expressionAtom
 , { pid <78DESC>: 
, constantNum% , := *, positiveNum /
, ASC, +, -, ,, $eof$, }
expressionAtom := expressionAtom mathOperator expressionAtom (^), { %, DESC, *, ASC, /, +, ,, -, $eof$, }
-------------------------------------------------------------------------------

From Condition <265> get package:
expressionAtom := 'STR_LITERAL' (^), { ASC, /, $eof$, ,, -, DESC, %, *, +, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := 'STR_LITERAL' (^), { ASC, /, $eof$, ,, -, DESC, %, *, +, }
===============================================================================

SHIFT <265> by 'STR_LITERAL' to <274>
Condition<274>, REDUCE Production by 'ASC': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<274>, REDUCE Production by '/': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<274>, REDUCE Production by '$eof$': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<274>, REDUCE Production by ',': 
After tracing, got package:pid <74
>: 
expressionAtom mathOperator:=  := 'STR_LITERAL'(^) '*'
 , { Condition<STR_LITERAL274, >, REDUCE Production by 'ID-, ': -
, NUMBER_CONSTANTpid <, 74}>: 

expressionAtom mathOperator:=  := 'STR_LITERAL'(^) '%'
 , { Condition<274STR_LITERAL>, REDUCE Production by ', DESCID': , 
-pid <, 74NUMBER_CONSTANT>: 
, expressionAtom} 
:= 'STR_LITERAL'mathOperator  := 
(^)Condition<'-'274 >, REDUCE Production by '%': , { 
STR_LITERALpid <, 74ID>: 
, expressionAtom- , := NUMBER_CONSTANT, }'STR_LITERAL'
 
expressionAtom := Condition<274expressionAtom>, REDUCE Production by ' *': (^)
mathOperatorpid < 74expressionAtom>: 
 expressionAtom := , { 'STR_LITERAL'DESC , 
%, Condition<*274, >, REDUCE Production by '/+, ': ASC
, pid <74+>: 
, expressionAtom- , := ,, 'STR_LITERAL'$eof$ , 
}
expressionAtom := expressionAtom mathOperator expressionAtom (^), { %, DESC, *, ASC, /, +, ,, -, $eof$, }
mathOperator := (^)'/' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'+' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

From Condition <265> get package:
expressionAtom := expressionAtom (^)mathOperator expressionAtom , { ASC, /, $eof$, ,, -, DESC, %, *, +, }
expressionAtom := expressionAtom mathOperator expressionAtom (^), { /, ASC, $eof$, -, ,, %, DESC, *, +, }
-------------------------------------------------------------------------------

SHIFT <263> by expressionAtom to <275>.
From Condition <275> get package:
mathOperator := '*' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '*' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

After tracing, got package:
mathOperator := (^)'*' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'%' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'-' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
expressionAtom := expressionAtom (^)mathOperator expressionAtom , { ASC, /, $eof$, ,, -, DESC, %, *, +, }
expressionAtom := SHIFT <expressionAtom275 > by '*mathOperator' to < 33expressionAtom> 
(^)This condition already existed., { 
/, ASC, $eof$, -, ,, %, DESC, *, +, }
mathOperator := (^)'/' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'+' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

From Condition <275> get package:
mathOperator := '%' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '%' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <265> by expressionAtom to <276>.
From Condition <276> get package:
SHIFT <mathOperator275 > by ':= %' to <26'*'> 
(^)This condition already existed., { 
STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '*' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

From Condition <275> get package:
mathOperator := '-' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '-' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
SHIFT <===============================================================================276
> by '
*' to <33>
This condition already existed.
SHIFT <275> by '-' to <34>From Condition <
276This condition already existed.> get package:

mathOperator := '%' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '%' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

From Condition <275> get package:
expressionAtom := expressionAtom mathOperator (^)expressionAtom , { DESC, %, *, /, ASC, +, -, ,, $eof$, }
-------------------------------------------------------------------------------

SHIFT <276> by '%' to <26>
This condition already existed.
From Condition <276> get package:
mathOperator := '-' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '-' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <276> by '-' to <34>
This condition already existed.
From Condition <276> get package:
expressionAtom := expressionAtom mathOperator (^)expressionAtom , { ASC, /, $eof$, ,, -, DESC, %, *, +, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := (^)'ID' , { DESC, %, *, /, ASC, +, -, ,, $eof$, }
constantNum := (^)positiveNum , { DESC, %, *, /, ASC, +, -, ,, $eof$, }
expressionAtom := (^)'STR_LITERAL' , { %, DESC, *, ASC, /, +, ,, -, $eof$, }
expressionAtom := expressionAtom mathOperator (^)expressionAtom , { DESC, %, *, /, ASC, +, -, ,, $eof$, }
expressionAtom := (^)expressionAtom mathOperator expressionAtom , { %, DESC, *, ASC, /, +, ,, -, $eof$, }
columnName := (^)'ID' '.' 'ID' , { DESC, %, *, /, ASC, +, -, ,, $eof$, }
constantNum := (^)'-' positiveNum , { DESC, %, *, /, ASC, +, -, ,, $eof$, }
expressionAtom := (^)constantNum , { %, DESC, *, ASC, /, +, ,, -, $eof$, }
expressionAtom := (^)columnName , { %, DESC, *, ASC, /, +, ,, -, $eof$, }
positiveNum := (^)'NUMBER_CONSTANT' , { %, DESC, *, ASC, /, +, ,, -, $eof$, }
===============================================================================

After tracing, got package:
columnName := (^)'ID' , { ASC, /, $eof$, ,, -, DESC, %, *, +, }
constantNum := (^)positiveNum , { ASC, /, $eof$, ,, -, DESC, %, *, +, }
expressionAtom := (^)'STR_LITERAL' , { /, ASC, $eof$, -, ,, %, DESC, *, +, }
expressionAtom := expressionAtom mathOperator (^)expressionAtom , { ASC, /, $eof$, ,, -, DESC, %, *, +, }
expressionAtom := (^)expressionAtom mathOperator expressionAtom , { /, ASC, $eof$, -, ,, %, DESC, *, +, }
columnName := (^)'ID' '.' 'ID' , { ASC, /, $eof$, ,, -, DESC, %, *, +, }
constantNum := (^)'-' positiveNum , { ASC, /, $eof$, ,, -, DESC, %, *, +, }
expressionAtom := (^)constantNum , { /, ASC, $eof$, -, ,, %, DESC, *, +, }
expressionAtom := (^)columnName , { /, ASC, $eof$, -, ,, %, DESC, *, +, }
positiveNum := (^)'NUMBER_CONSTANT' , { /, ASC, $eof$, -, ,, %, DESC, *, +, }
===============================================================================

SHIFT <275> by mathOperator to <277>.
From Condition <277> get package:
columnName := 'ID' (^), { DESC, %, *, /, ASC, +, -, ,, $eof$, }
columnName := 'ID' (^)'.' 'ID' , { DESC, %, *, /, ASC, +, -, ,, $eof$, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID' (^), { DESC, %, *, /, ASC, +, -, ,, $eof$, }
columnName := 'ID' (^)'.' 'ID' , { DESC, %, *, /, ASC, +, -, ,, $eof$, }
===============================================================================

SHIFT <276> by mathOperator to <278>.
From Condition <278> get package:
columnName := 'ID' (^), { ASC, /, $eof$, ,, -, DESC, %, *, +, }
columnName := 'ID' (^)'.' 'ID' , { SHIFT <ASC277, > by '/ID, ' to <$eof$279, >,
, -, DESC, %, *, +, }
-------------------------------------------------------------------------------
Condition<279
>, REDUCE Production by 'DESC': 
After tracing, got package:pid <68
>: 
columnNamecolumnName  := := 'ID' 'ID'
 Condition<(^)279, { >, REDUCE Production by '%ASC': , 
/pid <, 68$eof$>: 
, columnName, , := -, 'ID'DESC , 
%, Condition<*279, >, REDUCE Production by '+*, ': }

pid <68>: 
columnNamecolumnName  := := 'ID''ID'  
(^)Condition<279'.'>, REDUCE Production by ' /': 'ID'
 pid <68, { >: 
ASCcolumnName,  /:= , 'ID'$eof$ , 
,, Condition<-279, >, REDUCE Production by 'DESCASC, ': %
, pid <*68, >: 
+columnName,  }:= 
'ID'=============================================================================== 


Condition<279>, REDUCE Production by '+': 
pid <68>: 
columnName := 'ID' 
Condition<279>, REDUCE Production by '-': 
pid <68>: 
columnName := 'ID' 
Condition<279>, REDUCE Production by ',': 
pid <68>: 
columnName := 'ID' 
Condition<279>, REDUCE Production by '$eof$': 
pid <68>: 
columnName := 'ID' 
From Condition <279> get package:
SHIFT <columnName278 > by ':= ID' to <280'ID'> 
'.' (^)'ID' , { DESC, %, *, /, ASC, +, -, ,, $eof$, }
Condition<-------------------------------------------------------------------------------280
>, REDUCE Production by '
ASC': 
After tracing, got package:pid <
68columnName>: 
 := columnName := 'ID' 'ID' '.'
 (^)Condition<'ID'280 >, REDUCE Production by '/': , { 
DESCpid <, 68%>: 
, columnName* , := /, 'ID'ASC , 
+, Condition<-280, >, REDUCE Production by ',$eof$, ': $eof$
, }pid <68
>: 
===============================================================================columnName 
:= 'ID'
 
Condition<280>, REDUCE Production by ',': 
pid <68>: 
columnName := 'ID' 
Condition<280>, REDUCE Production by '-': 
pid <68>: 
columnName := 'ID' 
Condition<280>, REDUCE Production by 'DESC': 
pid <68>: 
columnName := 'ID' 
Condition<280>, REDUCE Production by '%': 
pid <68>: 
columnName := 'ID' 
Condition<280>, REDUCE Production by '*': 
pid <68>: 
columnName := 'ID' 
SHIFT <Condition<280279>, REDUCE Production by '> by '+.': ' to <281
>pid <68
>: 
columnName := 'ID' 
From Condition <281> get package:
From Condition <columnName := 280> get package:'ID'
 '.' columnName 'ID':=  (^)'ID', {  DESC'.',  %, (^)*'ID',  /, ASC, { , +ASC, , -/, , ,$eof$, , $eof$,, , }-, 
DESC-------------------------------------------------------------------------------, 
%
, *, After tracing, got package:+, 
}columnName
 -------------------------------------------------------------------------------:= 
'ID'
 '.' After tracing, got package:
'ID'columnName  := (^), { 'ID'DESC , %'.',  *, (^)/, 'ID'ASC , +, , { -, ASC,, , /$eof$, , $eof$}, 
,===============================================================================, 
-
, DESC, %, *, +, }
===============================================================================

SHIFT <281> by 'ID' to <282>
Condition<282>, REDUCE Production by 'DESC': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<282>, REDUCE Production by '%': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<282>, REDUCE Production by '*': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<282>, REDUCE Production by '/': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
SHIFT <Condition<282280>, REDUCE Production by '> by 'ASC': .
' to <283pid <>67
>: 
columnName := 'ID' '.' 'ID' 
Condition<282>, REDUCE Production by '+': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<282>, REDUCE Production by '-': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<282>, REDUCE Production by ',': 
pid <67>: 
From Condition <columnName := 'ID' 283'.'> get package: 'ID'
 
columnNameCondition< 282:= >, REDUCE Production by '$eof$': 
'ID'pid <67 >: 
columnName'.'  := 'ID''ID'  '.'(^) , { 'ID' ASC
, /, $eof$, ,, -, DESC, %, *, +, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID' '.' 'ID' (^), { ASC, /, $eof$, ,, -, DESC, %, *, +, }
===============================================================================

From Condition <277> get package:
constantNum := positiveNum (^), { DESC, %, *, /, ASC, +, -, ,, $eof$, }
SHIFT <-------------------------------------------------------------------------------283
> by 'ID
' to <284After tracing, got package:>

constantNum := positiveNum (^), { DESC, %, *, /, ASC, +, -, ,, $eof$, }
Condition<===============================================================================284
>, REDUCE Production by '
ASC': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<284>, REDUCE Production by '/': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<284>, REDUCE Production by '$eof$': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<284>, REDUCE Production by ',': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<284>, REDUCE Production by '-': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<284>, REDUCE Production by 'DESC': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<284SHIFT <>, REDUCE Production by '277%> by ': positiveNum to <
257pid <>.67
>: 
columnName := 'ID'This condition already existed. 
'.' 'ID' 
Condition<284>, REDUCE Production by '*': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<284>, REDUCE Production by '+': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
From Condition <277> get package:
expressionAtom := 'STR_LITERAL' (^), { %, DESC, *, ASC, /, +, ,, -, $eof$, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := 'STR_LITERAL' (^), { %, DESC, *, ASC, /, +, ,, -, $eof$, }
===============================================================================

From Condition <278> get package:
constantNum := positiveNum (^), { ASC, /, $eof$, ,, -, DESC, %, *, +, }
-------------------------------------------------------------------------------

After tracing, got package:
constantNum := positiveNum (^), { ASC, /, $eof$, ,, -, DESC, %, *, +, }
===============================================================================

SHIFT <277> by 'STR_LITERAL' to <285>
Condition<285>, REDUCE Production by '%': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<285>, REDUCE Production by 'DESC': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<SHIFT <285278>, REDUCE Production by '> by *positiveNum':  to <286
>.pid <74
>: 
expressionAtom := 'STR_LITERAL' 
Condition<285>, REDUCE Production by 'ASC': 
Condition<pid <28674>, REDUCE Production by '>: 
ASCexpressionAtom':  
:= pid <78'STR_LITERAL'>: 
 constantNum
 := Condition<285positiveNum>, REDUCE Production by ' /': 

Condition<pid <28674>, REDUCE Production by '>: 
/expressionAtom':  
:= 'STR_LITERAL'pid < 78
>: 
Condition<constantNum285 >, REDUCE Production by ':= +': positiveNum
 pid <74
>: 
expressionAtomCondition< 286:= >, REDUCE Production by '$eof$': 'STR_LITERAL'
 pid <78
>: 
constantNumCondition< 285:= >, REDUCE Production by 'positiveNum, ': 

pid <74Condition<286>: 
>, REDUCE Production by 'expressionAtom, ': := 
'STR_LITERAL'pid < 78
>: 
constantNumCondition< 285:= >, REDUCE Production by 'positiveNum- ': 

Condition<pid <74286>: 
>, REDUCE Production by 'expressionAtom- ': := 
'STR_LITERAL'pid < 78
>: 
constantNumCondition< 285:= >, REDUCE Production by 'positiveNum$eof$ ': 

Condition<pid <28674>, REDUCE Production by '>: 
DESCexpressionAtom':  := 
'STR_LITERAL'pid < 78
>: 
constantNum := positiveNum 
Condition<286>, REDUCE Production by '%': 
pid <78>: 
constantNum := positiveNum 
Condition<286>, REDUCE Production by '*': 
pid <78>: 
constantNum := positiveNum 
Condition<286>, REDUCE Production by '+': 
pid <78>: 
constantNum := positiveNum 
From Condition <277> get package:
expressionAtom := expressionAtom (^)mathOperator expressionAtom , { %, DESC, *, ASC, /, +, ,, -, $eof$, }
expressionAtom := expressionAtom mathOperator expressionAtom (^), { DESC, %, From Condition <*, /, ASC278, > get package:+, 
-, ,, $eof$, expressionAtom} 
:= -------------------------------------------------------------------------------
'STR_LITERAL'
 (^), { /, ASC, $eof$, -, ,, %, DESC, *, +, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := 'STR_LITERAL' (^), { /, ASC, $eof$, -, ,, %, DESC, *, +, }
===============================================================================

SHIFT <278> by 'STR_LITERAL' to <287>
Condition<287>, REDUCE Production by '/': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<287>, REDUCE Production by 'ASC': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<287>, REDUCE Production by '$eof$': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<287>, REDUCE Production by '-': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<287>, REDUCE Production by ',': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<287>, REDUCE Production by '%': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
After tracing, got package:Condition<287
>, REDUCE Production by 'DESCmathOperator':  
:= (^)pid <74'*'>: 
 expressionAtom := , { 'STR_LITERAL'STR_LITERAL , 
ID, Condition<287->, REDUCE Production by ', *NUMBER_CONSTANT': , 
}pid <74
>: 
mathOperatorexpressionAtom  := := (^)'STR_LITERAL''%'  
, { Condition<287STR_LITERAL>, REDUCE Production by ', +ID': , 
-pid <, 74NUMBER_CONSTANT>: 
, expressionAtom} := 
'STR_LITERAL'mathOperator  := 
(^)'-' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
expressionAtom := expressionAtom (^)mathOperator expressionAtom , { %, DESC, *, ASC, /, +, ,, -, $eof$, }
expressionAtom := expressionAtom mathOperator expressionAtom (^), { DESC, %, *, /, ASC, +, -, ,, $eof$, }
mathOperator := (^)'/' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'+' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

From Condition <278> get package:
expressionAtom := expressionAtom (^)mathOperator expressionAtom , { /, ASC, $eof$, -, ,, %, DESC, *, +, }
expressionAtom := expressionAtom mathOperator expressionAtom (^), { ASC, /, $eof$, ,, -, DESC, %, *, +, }
-------------------------------------------------------------------------------

SHIFT <277> by expressionAtom to <288>.
From Condition <288> get package:
After tracing, got package:
mathOperator mathOperator:=  := (^)'*''*'  (^), { , { STR_LITERALSTR_LITERAL, , IDID, , --, , NUMBER_CONSTANTNUMBER_CONSTANT, , }}

mathOperator------------------------------------------------------------------------------- 
:= (^)
'%' After tracing, got package:
, { mathOperator STR_LITERAL:= , ID, '*'- , NUMBER_CONSTANT, (^)}, { 
STR_LITERALmathOperator,  ID:= , -(^), '-'NUMBER_CONSTANT , }, { 
STR_LITERAL===============================================================================, 
ID
, -, NUMBER_CONSTANT, }
expressionAtom := expressionAtom (^)mathOperator expressionAtom , { /, ASC, $eof$, -, ,, %, DESC, *, +, }
expressionAtom := expressionAtom mathOperator expressionAtom (^), { ASC, /, $eof$, ,, -, DESC, %, *, +, }
mathOperator := (^)'/' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'+' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <288> by '*' to <33>
This condition already existed.
From Condition <288> get package:
mathOperator := '%' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '%' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <278> by expressionAtom to <289>.
From Condition <289> get package:
mathOperator := '*' SHIFT <(^)288, { > by '%STR_LITERAL' to <, 26ID>, 
-, This condition already existed.NUMBER_CONSTANT, 
}
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '*' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

From Condition <288> get package:
mathOperator := '-' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
SHIFT <mathOperator289 > by ':= *' to <33'-'> 
(^)This condition already existed., { 
STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

From Condition <289> get package:
mathOperator := '%' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------SHIFT <
288
> by '-After tracing, got package:' to <34
>mathOperator
 This condition already existed.:= 
'%' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

From Condition <288> get package:
expressionAtom := expressionAtom mathOperator (^)expressionAtom , { %, DESC, *, ASC, /, +, ,, -, $eof$, SHIFT <}289
> by '-------------------------------------------------------------------------------%' to <
26
>
This condition already existed.
From Condition <289> get package:
mathOperator := '-' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '-' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <289> by '-' to <34>
This condition already existed.
From Condition <289> get package:
expressionAtom := expressionAtom mathOperator (^)expressionAtom , { /, ASC, $eof$, -, ,, %, DESC, *, +, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := (^)'ID' , { %, DESC, *, ASC, /, +, ,, -, $eof$, }
constantNum := (^)positiveNum , { %, DESC, *, ASC, /, +, ,, -, $eof$, }
expressionAtom := (^)'STR_LITERAL' , { DESC, %, *, /, ASC, +, -, ,, $eof$, }
expressionAtom := expressionAtom mathOperator (^)expressionAtom , { %, DESC, *, ASC, /, +, ,, -, $eof$, }
expressionAtom := (^)expressionAtom mathOperator expressionAtom , { DESC, %, *, /, ASC, +, -, ,, $eof$, }
columnName := (^)'ID' '.' 'ID' , { %, DESC, *, ASC, /, +, ,, -, $eof$, }
constantNum := (^)'-' positiveNum , { %, DESC, *, ASC, /, +, ,, -, $eof$, }
expressionAtom := (^)constantNum , { DESC, %, *, /, ASC, +, -, ,, $eof$, }
expressionAtom := (^)columnName , { DESC, %, *, /, ASC, +, -, ,, $eof$, }
positiveNum := (^)'NUMBER_CONSTANT' , { DESC, %, *, /, ASC, +, -, ,, $eof$, }
===============================================================================

After tracing, got package:
columnName := (^)'ID' , { /, ASC, $eof$, -, ,, %, DESC, *, +, }
constantNum := (^)positiveNum , { /, ASC, $eof$, -, ,, %, DESC, *, +, }
expressionAtom := (^)'STR_LITERAL' , { ASC, /, $eof$, ,, -, DESC, %, *, +, }
expressionAtom := expressionAtom mathOperator (^)expressionAtom , { /, ASC, $eof$, -, ,, %, DESC, *, +, }
expressionAtom := (^)expressionAtom mathOperator expressionAtom , { ASC, /, $eof$, ,, -, DESC, %, *, +, }
columnName := (^)'ID' '.' 'ID' , { /, ASC, $eof$, -, ,, %, DESC, *, +, }
constantNum := (^)'-' positiveNum , { /, ASC, $eof$, -, ,, %, DESC, *, +, }
expressionAtom := (^)constantNum , { ASC, /, $eof$, ,, -, DESC, %, *, +, }
expressionAtom := (^)columnName , { ASC, /, $eof$, ,, -, DESC, %, *, +, }
positiveNum := (^)'NUMBER_CONSTANT' , { ASC, /, $eof$, ,, -, DESC, %, *, +, }
===============================================================================

SHIFT <288> by mathOperator to <263>.
This condition already existed.
Condition<288>, REDUCE Production by 'DESC': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Already existed SHIFT by symbol'%' :
<26>
Try to set it to: REDUCE to:
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Reset Action[288]['%'] to REDUCE:
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Already existed SHIFT by symbol'*' :
<33>
Try to set it to: REDUCE to:
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Reset Action[288]['*'] to REDUCE:
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Condition<288>, REDUCE Production by '/': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Condition<288>, REDUCE Production by 'ASC': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Condition<288>, REDUCE Production by '+': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Already existed SHIFT by symbol'-' :
<34>
Try to set it to: REDUCE to:
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Reset Action[288]['-'] to REDUCE:
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Condition<288>, REDUCE Production by ',': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Condition<288>, REDUCE Production by '$eof$': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
From Condition <288> get package:
mathOperator := '/' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '/' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <289> by mathOperator to <265>.
This condition already existed.
Already existed REDUCE by symbol '/': 
pid <76Condition<>: 
289expressionAtom>, REDUCE Production by ' ASC:= ': expressionAtom
 mathOperator pid <expressionAtom76 >: 

expressionAtomTry to set it to: SHIFT to < 40:= >expressionAtom
 mathOperator expressionAtom 
Condition<289>, REDUCE Production by '/': 
Set SHIFT fail in: from condition <pid <28876> to condition <>: 
40expressionAtom>. 
:= This condition already existed.expressionAtom
 mathOperator expressionAtom 
Condition<289>, REDUCE Production by '$eof$': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Condition<289>, REDUCE Production by ',': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Already existed SHIFT by symbol'-' :
<34>
Try to set it to: REDUCE to:
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
From Condition <288> get package:
Reset Action[289mathOperator][' -:= '] to REDUCE:
'+'pid < 76(^)>: 
, { expressionAtom := STR_LITERALexpressionAtom,  IDmathOperator,  -expressionAtom,  NUMBER_CONSTANT
, }Condition<289
>, REDUCE Production by 'DESC-------------------------------------------------------------------------------': 


pid <76After tracing, got package:>: 

expressionAtom mathOperator:=  := expressionAtom mathOperator'+'  expressionAtom (^)
, { Already existed STR_LITERALSHIFT,  by symbolID, '%'- , :
NUMBER_CONSTANT<, 26}>

===============================================================================Try to set it to: REDUCE to:


pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Reset Action[289]['%'] to REDUCE:
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Already existed SHIFT by symbol'*' :
<33>
Try to set it to: REDUCE to:
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Already existed REDUCE by symbol '+': 
Reset Action[pid <28976]['>: 
*'] to REDUCE:expressionAtom
 pid <:= 76expressionAtom>: 
 expressionAtommathOperator  := expressionAtom expressionAtom 
mathOperatorTry to set it to: SHIFT to < 41expressionAtom> 

Condition<289>, REDUCE Production by '+': 
Set SHIFT fail in: from condition <pid <28876> to condition <41>: 
>.expressionAtom
 This condition already existed.:= 
expressionAtom mathOperator expressionAtom 
From Condition <289> get package:
mathOperator := '/' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '/' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

From Condition <277> get package:
constantNum := '-' (^)positiveNum , { DESC, %, *, /, ASC, +, -, ,, $eof$, }
-------------------------------------------------------------------------------

Already existed REDUCE by symbol '/': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Try to set it to: SHIFT to <40>
Set SHIFT fail in: from condition <289> to condition <40>.
This condition already existed.
After tracing, got package:
positiveNum := (^)'NUMBER_CONSTANT' , { %, DESC, *, ASC, /, +, ,, -, $eof$, }
constantNum := '-' (^)positiveNum , { DESC, %, *, /, ASC, +, -, ,, $eof$, }
===============================================================================

From Condition <289> get package:
mathOperator := '+' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '+' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <277> by '-' to <290>
From Condition <290> get package:
Already existed REDUCE by symbol 'positiveNum+ ': := 
'NUMBER_CONSTANT'pid < 76(^)>: 
, { expressionAtom %:= , expressionAtomDESC , mathOperator *expressionAtom,  ASC, 
/Try to set it to: SHIFT to <, 41+>, 
,, -, $eof$, }
-------------------------------------------------------------------------------
Set SHIFT fail in: from condition <
289> to condition <41After tracing, got package:>.

positiveNumThis condition already existed. 
:= 'NUMBER_CONSTANT' (^), { %, DESC, *, ASC, /, +, ,, -, $eof$, }
===============================================================================

SHIFT <290> by 'NUMBER_CONSTANT' to <291>
From Condition <Condition<291278>, REDUCE Production by '> get package:%': 

constantNumpid <79 >: 
:= positiveNum := '-' 'NUMBER_CONSTANT'(^) positiveNum 
, { Condition<ASC291, >, REDUCE Production by '/DESC, ': $eof$
, pid <79,>: 
, positiveNum- , := DESC, %'NUMBER_CONSTANT',  *, 
+, Condition<}291
>, REDUCE Production by '-------------------------------------------------------------------------------*': 


pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<291>, REDUCE Production by 'ASC': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<291>, REDUCE Production by '/': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<291>, REDUCE Production by '+': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<291>, REDUCE Production by ',': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<291>, REDUCE Production by '-': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<291>, REDUCE Production by '$eof$': 
pid <79After tracing, got package:>: 

positiveNum := positiveNum 'NUMBER_CONSTANT':=  
(^)'NUMBER_CONSTANT' , { /, ASC, $eof$, -, ,, %, DESC, *, +, }
constantNum := '-' (^)positiveNum , { ASC, /, $eof$, ,, -, DESC, %, *, +, }
===============================================================================

From Condition <290> get package:
constantNum := '-' positiveNum (^), { DESC, %, *, /, ASC, +, -, ,, $eof$, }
-------------------------------------------------------------------------------

After tracing, got package:
constantNum := '-' positiveNum (^), { DESC, %, *, /, ASC, +, -, ,, $eof$, }
===============================================================================

SHIFT <278> by '-' to <292>
From Condition <292> get package:
positiveNumSHIFT < 290:= > by positiveNum to <293'NUMBER_CONSTANT'>. 
(^), { /, ASC, $eof$, -, ,, %, DESC, *, +, }
-------------------------------------------------------------------------------
Condition<
293After tracing, got package:>, REDUCE Production by '
DESC': positiveNum
 := pid <77'NUMBER_CONSTANT'>: 
 constantNum (^):= , { '-'/ , positiveNumASC , 
$eof$, -Condition<293, >, REDUCE Production by ',%, ': %
, DESCpid <77, >: 
*constantNum,  +:= , }'-'
 ===============================================================================positiveNum 


Condition<293>, REDUCE Production by '*': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<293>, REDUCE Production by '/': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<293>, REDUCE Production by 'ASC': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<293>, REDUCE Production by '+': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<293>, REDUCE Production by '-': 
pid <77>: 
constantNum := SHIFT <292'-'> by ' NUMBER_CONSTANTpositiveNum' to <294 >

Condition<293>, REDUCE Production by ',': 
pid <77>: 
Condition<constantNum294 >, REDUCE Production by ':= /': '-'
 pid <positiveNum79 >: 

positiveNum Condition<:= 293'NUMBER_CONSTANT'>, REDUCE Production by ' $eof$': 

Condition<pid <29477>, REDUCE Production by '>: 
ASCconstantNum':  
:= pid <79'-'>: 
 positiveNumpositiveNum  := 
'NUMBER_CONSTANT' 
Condition<294>, REDUCE Production by '$eof$': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<294>, REDUCE Production by '-': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<294>, REDUCE Production by ',': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<294>, REDUCE Production by '%': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<294>, REDUCE Production by 'DESC': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<From Condition <294277>, REDUCE Production by '> get package:*': 

expressionAtompid < 79:= >: 
positiveNum constantNum:=  'NUMBER_CONSTANT'(^) , { 
%, DESC, Condition<*294, >, REDUCE Production by 'ASC, +/': , 
+, pid <79,>: 
, positiveNum- , := $eof$, }'NUMBER_CONSTANT'
 -------------------------------------------------------------------------------


After tracing, got package:
expressionAtom := constantNum (^), { %, DESC, *, ASC, /, +, ,, -, $eof$, }
===============================================================================

From Condition <292> get package:
constantNum := '-' positiveNum (^), { ASC, /, $eof$, ,, -, DESC, %, *, +, }
-------------------------------------------------------------------------------

After tracing, got package:
constantNum := '-' positiveNum (^)SHIFT <, { 277ASC> by , constantNum/ to <295, >.$eof$
, ,, -, DESC, %, *, +, }
===============================================================================
Condition<
295>, REDUCE Production by '%': 
pid <73>: 
expressionAtom := constantNum 
Condition<295>, REDUCE Production by 'DESC': 
pid <73>: 
expressionAtom := constantNum 
Condition<295>, REDUCE Production by '*': 
pid <73>: 
expressionAtom := constantNum 
Condition<295>, REDUCE Production by 'ASC': 
pid <73>: 
expressionAtom := constantNum 
Condition<295>, REDUCE Production by '/': 
pid <73>: 
expressionAtom := constantNum 
Condition<295SHIFT <>, REDUCE Production by '292+> by ': positiveNum to <296
>.pid <
73>: 
expressionAtom := constantNum 
Condition<295>, REDUCE Production by ',': 
Condition<pid <73296>: 
>, REDUCE Production by 'expressionAtomASC ': := 
constantNum pid <77
>: 
constantNum Condition<:= 295'-'>, REDUCE Production by ' -positiveNum':  

pid <73Condition<>: 
296expressionAtom>, REDUCE Production by ' /:= ': constantNum
 pid <77
>: 
constantNumCondition< 295:= >, REDUCE Production by '$eof$'-'':  
positiveNumpid < 73
>: 
expressionAtomCondition< 296:= >, REDUCE Production by 'constantNum$eof$ ': 

pid <77>: 
constantNum := '-' positiveNum 
Condition<296>, REDUCE Production by ',': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<296>, REDUCE Production by '-': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<296>, REDUCE Production by 'DESC': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<296>, REDUCE Production by '%': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<296>, REDUCE Production by '*': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<296>, REDUCE Production by 'From Condition <+': 
277pid <> get package:77
>: 
constantNum := '-' expressionAtompositiveNum  := 
columnName (^), { %, DESC, *, ASC, /, +, ,, -, $eof$, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := columnName (^), { %, DESC, *, ASC, /, +, ,, -, $eof$, }
===============================================================================

From Condition <278> get package:
expressionAtom := constantNum (^), { /, ASC, $eof$, -, ,, %, DESC, *, +, }
-------------------------------------------------------------------------------

After tracing, got package:
SHIFT <expressionAtom277 > by := columnName to <297constantNum>. 
(^), { /, ASC, $eof$, -, ,, %, DESC, *, +, }
===============================================================================
Condition<
297>, REDUCE Production by '%': 
pid <75>: 
expressionAtom := columnName 
Condition<297>, REDUCE Production by 'DESC': 
pid <75>: 
expressionAtom := columnName 
Condition<297>, REDUCE Production by '*': 
pid <75>: 
expressionAtom := columnName 
Condition<297>, REDUCE Production by 'ASC': 
pid <75>: 
expressionAtom := columnName 
Condition<297>, REDUCE Production by '/': 
pid <75>: 
expressionAtom := columnName 
Condition<297>, REDUCE Production by '+': 
pid <75>: 
expressionAtom := columnName 
Condition<297>, REDUCE Production by ',': 
pid <75>: 
expressionAtom := columnName 
SHIFT <Condition<278297> by >, REDUCE Production by 'constantNum- to <258': >.

pid <75This condition already existed.>: 

expressionAtom := columnName 
Condition<297>, REDUCE Production by '$eof$': 
pid <75>: 
expressionAtom := columnName 
From Condition <277From Condition <> get package:
278> get package:
positiveNum := expressionAtom := 'NUMBER_CONSTANT'columnName  (^)(^), { , { %/, , DESCASC, , *$eof$, , ASC-, , /,, , +%, , ,DESC, , -*, , $eof$+, , }}

--------------------------------------------------------------------------------------------------------------------------------------------------------------



After tracing, got package:
After tracing, got package:positiveNum
 := expressionAtom := 'NUMBER_CONSTANT'columnName  (^)(^), { , { %/, , DESCASC, , *$eof$, , ASC-, , /,, , +%, , ,DESC, , -*, , $eof$+, , }}

==============================================================================================================================================================



SHIFT <277> by 'NUMBER_CONSTANT' to <291>
This condition already existed.
SHIFT <278> by columnName to <298>.
Already existed SHIFT by symbol'%' :
<26>
Condition<Try to set it to: REDUCE to:298
>, REDUCE Production by 'pid </76': >: 

expressionAtom pid <75:= >: 
expressionAtomexpressionAtom  mathOperator:=  columnNameexpressionAtom  

Condition<298>, REDUCE Production by 'ASC': 
pid <75>: 
expressionAtom := columnName 
Reset Action[275Condition<298]['>, REDUCE Production by '%$eof$'] to REDUCE:': 

pid <pid <7675>: 
>: 
expressionAtomexpressionAtom  := := expressionAtomcolumnName  mathOperator 
expressionAtom Condition<298
>, REDUCE Production by '-': Condition<
275>, REDUCE Production by 'pid <75DESC>: 
': expressionAtom
 := pid <76columnName>: 
 expressionAtom 
:= Condition<298expressionAtom>, REDUCE Production by ' ,mathOperator':  
expressionAtompid <75 >: 

expressionAtom Already existed := SHIFT by symbolcolumnName '*'
 :
Condition<<29833>, REDUCE Production by '>%
': Try to set it to: REDUCE to:

pid <pid <7675>: 
>: 
expressionAtomexpressionAtom  := := expressionAtomcolumnName  mathOperator 
expressionAtom Condition<
298>, REDUCE Production by 'DESC': 
pid <75>: 
expressionAtom := columnName 
Reset Action[Condition<275298]['>, REDUCE Production by '**'] to REDUCE:': 

pid <pid <7675>: 
>: 
expressionAtomexpressionAtom  := := expressionAtomcolumnName  mathOperator 
expressionAtom Condition<298
>, REDUCE Production by '+Condition<275': >, REDUCE Production by '
ASC': pid <75
>: 
expressionAtompid < 76:= >: 
columnNameexpressionAtom  
:= expressionAtom mathOperator expressionAtom 
Condition<275>, REDUCE Production by '/': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Condition<275>, REDUCE Production by '+': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Condition<275>, REDUCE Production by ',': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Already existed SHIFT by symbol'-' :
<34>
From Condition <Try to set it to: REDUCE to:
278pid <> get package:76
>: 
expressionAtom := expressionAtom positiveNummathOperator  := expressionAtom 
'NUMBER_CONSTANT' (^), { /, ASC, $eof$, -, ,, %, DESC, *, +, }
Reset Action[-------------------------------------------------------------------------------275
]['
-'] to REDUCE:
After tracing, got package:pid <
76positiveNum>: 
 expressionAtom:=  := expressionAtom 'NUMBER_CONSTANT'mathOperator  expressionAtom (^)
, { /Condition<, 275ASC>, REDUCE Production by ', $eof$$eof$, ': -, 
,pid <76, >: 
%expressionAtom,  DESC, := *, expressionAtom+ , mathOperator} 
expressionAtom=============================================================================== 


From Condition <275> get package:
mathOperator := '/' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '/' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <278> by 'NUMBER_CONSTANT' to <294>
This condition already existed.
Already existed REDUCE by symbol '/': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Try to set it to: SHIFT to <40>
Condition<276>, REDUCE Production by '/': 
Set SHIFT fail in: from condition <pid <27576> to condition <40>: 
>.
expressionAtomThis condition already existed. 
:= expressionAtom mathOperator expressionAtom 
Condition<276>, REDUCE Production by 'ASC': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Condition<276>, REDUCE Production by '$eof$': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Already existed SHIFT by symbol'-' :
<34>
Try to set it to: REDUCE to:
From Condition <pid <76275>: 
> get package:expressionAtom := 
expressionAtom mathOperator expressionAtom mathOperator
 := '+' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------
Reset Action[
276After tracing, got package:]['
-'] to REDUCE:
mathOperatorpid <76 := >: 
expressionAtom'+'  := expressionAtom(^) , { mathOperator expressionAtomSTR_LITERAL , ID
, Condition<276->, REDUCE Production by ', ,NUMBER_CONSTANT': , 
}pid <76
>: 
expressionAtom=============================================================================== := 
expressionAtom 
mathOperator expressionAtom 
Already existed SHIFT by symbol'%' :
<26>
Try to set it to: REDUCE to:
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Reset Action[276]['%'] to REDUCE:
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Condition<276>, REDUCE Production by 'DESC': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Already existed SHIFT by symbol'*' :
<33>
Try to set it to: REDUCE to:
pid <Already existed REDUCE by symbol '76+>: 
': expressionAtom := 
expressionAtom pid <mathOperator76 >: 
expressionAtom expressionAtom
 := expressionAtom mathOperator expressionAtom 
Try to set it to: SHIFT to <41>
Reset Action[276]['*'] to REDUCE:
pid <76>: 
expressionAtom := expressionAtom mathOperator Set SHIFT fail in: from condition <expressionAtom275 > to condition <41
>.
Condition<This condition already existed.276
>, REDUCE Production by '+': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
From Condition <276> get package:
mathOperator := '/' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '/' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

From Condition <263> get package:
constantNum := '-' (^)positiveNum , { %, DESC, *, ASC, /, +, ,, -, $eof$, }
-------------------------------------------------------------------------------

Already existed REDUCE by symbol '/': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Try to set it to: SHIFT to <40>
Set SHIFT fail in: from condition <276> to condition <40>.
This condition already existed.
After tracing, got package:
positiveNum := (^)'NUMBER_CONSTANT' , { DESC, %, *, /, ASC, +, -, ,, $eof$, }
constantNum := '-' (^)positiveNum , { %, DESC, *, ASC, /, +, ,, -, $eof$, }
===============================================================================
From Condition <
276> get package:
mathOperator := '+' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '+' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <263> by '-' to <299>
From Condition <299> get package:
positiveNum := 'NUMBER_CONSTANT' (^), { DESC, %, *, /, ASC, +, -, ,Already existed REDUCE by symbol ', +$eof$': , }

-------------------------------------------------------------------------------pid <76
>: 
expressionAtom
 := expressionAtomAfter tracing, got package: 
mathOperator positiveNumexpressionAtom  := 
'NUMBER_CONSTANT'Try to set it to: SHIFT to <41 >
(^), { DESC, %, *, /, ASC, +, -, ,, $eof$, }
===============================================================================Set SHIFT fail in: from condition <
276
> to condition <41>.
This condition already existed.
SHIFT <299> by 'NUMBER_CONSTANT' to <300>
Condition<300>, REDUCE Production by 'DESC': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<300>, REDUCE Production by '%': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT'From Condition < 
265> get package:Condition<300
>, REDUCE Production by '*': 
constantNumpid <79 >: 
:= positiveNum := '-''NUMBER_CONSTANT'  (^)
positiveNum Condition<300, { >, REDUCE Production by '/': /
, pid <79ASC>: 
, positiveNum $eof$:= , -, 'NUMBER_CONSTANT', , 
%, Condition<300DESC>, REDUCE Production by ', ASC*': , 
+pid <, 79}>: 
positiveNum
 := -------------------------------------------------------------------------------
'NUMBER_CONSTANT' 

Condition<300>, REDUCE Production by '+': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<300>, REDUCE Production by '-': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<300>, REDUCE Production by ',': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<300>, REDUCE Production by '$eof$': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
After tracing, got package:
positiveNum := (^)'NUMBER_CONSTANT' , { ASC, /, $eof$, ,, -, DESC, %, *, +, }
constantNum := '-' (^)positiveNum , { /, ASC, $eof$, -, ,, %, DESC, *, +, }
From Condition <===============================================================================
299
> get package:
constantNum := '-' positiveNum (^), { %, DESC, *, ASC, /, +, ,, -, $eof$, }
-------------------------------------------------------------------------------

After tracing, got package:
constantNum := '-' positiveNum (^), { %, DESC, *, ASC, /, +, ,, -, $eof$, }
===============================================================================

SHIFT <265> by '-' to <301>
From Condition <301> get package:
positiveNum := 'NUMBER_CONSTANT' (^), { ASC, /, $eof$, ,, -, DESC, %, *, +, }
-------------------------------------------------------------------------------

SHIFT <After tracing, got package:299
> by positiveNum positiveNum:=  to <302'NUMBER_CONSTANT'>. 
(^), { ASC, /, $eof$, ,, -, DESC, %, *, +, }
===============================================================================
Condition<
302>, REDUCE Production by '%': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<302>, REDUCE Production by 'DESC': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<302>, REDUCE Production by '*': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<302>, REDUCE Production by 'ASC': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<302>, REDUCE Production by '/': 
SHIFT <pid <30177> by '>: 
NUMBER_CONSTANTconstantNum' to <303 >:= 
'-' positiveNum 
Condition<302>, REDUCE Production by '+': 
Condition<pid <77303>: 
>, REDUCE Production by 'constantNumASC ': := 
'-'pid < 79positiveNum>: 
 positiveNum
 := Condition<302'NUMBER_CONSTANT'>, REDUCE Production by ' ,': 

Condition<pid <30377>, REDUCE Production by '>: 
/constantNum':  
:= pid <79'-'>: 
 positiveNumpositiveNum  := 
'NUMBER_CONSTANT'Condition< 302
>, REDUCE Production by '-Condition<303': >, REDUCE Production by '
$eof$pid <77': >: 

constantNumpid <79 >: 
:= positiveNum '-':=  positiveNum 'NUMBER_CONSTANT'
 
Condition<302Condition<303>, REDUCE Production by '>, REDUCE Production by '$eof$,': ': 

pid <77pid <79>: 
>: 
constantNumpositiveNum  := := '-' 'NUMBER_CONSTANT'positiveNum  

Condition<303>, REDUCE Production by '-': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<303>, REDUCE Production by 'DESC': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<303>, REDUCE Production by '%': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<303>, REDUCE Production by '*': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<303>, REDUCE Production by '+': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
From Condition <263> get package:
expressionAtom := constantNum (^), { DESC, %, *, /, ASC, +, -, ,, $eof$, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := constantNum (^), { DESC, %, *, /, ASC, +, -, ,, $eof$, }
===============================================================================

From Condition <301> get package:
constantNum := '-' positiveNum (^), { /, ASC, $eof$, -, ,, %, DESC, *, +, }
-------------------------------------------------------------------------------

After tracing, got package:
constantNum := '-' positiveNum (^), { /, ASC, $eof$, -, ,, %, DESC, *, +, }
===============================================================================

SHIFT <263> by constantNum to <304>.
Condition<304>, REDUCE Production by 'DESC': 
pid <73>: 
expressionAtom := constantNum 
Condition<304>, REDUCE Production by '%': 
pid <73>: 
expressionAtom := constantNum 
Condition<304>, REDUCE Production by '*': 
pid <73>: 
expressionAtom := constantNum 
Condition<304>, REDUCE Production by '/': 
pid <73>: 
expressionAtom := constantNum 
Condition<304SHIFT <>, REDUCE Production by '301ASC> by ': positiveNum
 to <305pid <73>.>: 

expressionAtom := constantNum 
Condition<304>, REDUCE Production by '+': 
Condition<pid <30573>, REDUCE Production by '>: 
/expressionAtom':  := 
constantNum pid <77
>: 
constantNum Condition<304:= >, REDUCE Production by '-'-'':  
positiveNumpid <73 >: 

expressionAtom := Condition<305constantNum>, REDUCE Production by ' ASC': 

Condition<304pid <>, REDUCE Production by '77,>: 
': constantNum 
:= pid <73'-'>: 
 expressionAtompositiveNum  := 
constantNum Condition<305
>, REDUCE Production by '$eof$Condition<304': >, REDUCE Production by '
$eof$pid <': 77
>: 
constantNumpid < 73:= >: 
'-'expressionAtom  positiveNum:=  constantNum
 
Condition<305>, REDUCE Production by '-': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<305>, REDUCE Production by ',': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<305>, REDUCE Production by '%': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<305>, REDUCE Production by 'DESC': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<305>, REDUCE Production by '*': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<305>, REDUCE Production by '+': 
pid <77>: 
constantNum := '-' positiveNum 
From Condition <263> get package:
expressionAtom := columnName (^), { DESC, %, *, /, ASC, +, -, ,, $eof$, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := columnName (^), { DESC, %, *, /, ASC, +, -, ,, $eof$, }
===============================================================================

From Condition <265> get package:
expressionAtom := constantNum (^), { ASC, /, $eof$, ,, -, DESC, %, *, +, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := constantNum (^), { ASC, /, $eof$, ,, -, DESC, %, *, +, }
SHIFT <===============================================================================263
> by 
columnName to <306>.
Condition<306>, REDUCE Production by 'DESC': 
pid <75>: 
expressionAtom := columnName 
Condition<306>, REDUCE Production by '%': 
pid <75>: 
expressionAtom := columnName 
Condition<306>, REDUCE Production by '*': 
pid <75>: 
expressionAtom := columnName 
Condition<306>, REDUCE Production by '/': 
pid <75SHIFT <>: 
265expressionAtom> by  constantNum:=  to <307columnName>. 

Condition<306>, REDUCE Production by 'ASC': 
Condition<pid <30775>, REDUCE Production by '>: 
ASCexpressionAtom':  
:= pid <columnName73 >: 

expressionAtom Condition<:= 306constantNum>, REDUCE Production by ' +': 

Condition<307pid <>, REDUCE Production by '75/>: 
': expressionAtom
 pid <:= 73columnName>: 
 expressionAtom
 := Condition<306constantNum>, REDUCE Production by ' -': 

Condition<pid <30775>, REDUCE Production by '>: 
$eof$expressionAtom':  
:= columnNamepid <73 >: 

expressionAtom Condition<306:= >, REDUCE Production by 'constantNum, ': 

Condition<307pid <>, REDUCE Production by '75,>: 
': expressionAtom
 pid <:= 73columnName>: 
 expressionAtom
 := Condition<constantNum306 >, REDUCE Production by '
$eof$': Condition<
307pid <>, REDUCE Production by '75->: 
': expressionAtom
 pid <73:= >: 
columnNameexpressionAtom  := 
constantNum 
Condition<307>, REDUCE Production by 'DESC': 
pid <73>: 
expressionAtom := constantNum 
Condition<307>, REDUCE Production by '%': 
pid <73>: 
expressionAtom := constantNum 
Condition<307>, REDUCE Production by '*': 
pid <73>: 
expressionAtom := constantNum 
Condition<307>, REDUCE Production by '+': 
pid <73>: 
expressionAtom := constantNum 
From Condition <263> get package:
positiveNum := 'NUMBER_CONSTANT' (^), { DESC, %, *, /, ASC, +, -, ,, $eof$, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := 'NUMBER_CONSTANT' (^), { DESC, %, *, /, ASC, +, -, ,, $eof$, }
===============================================================================

From Condition <265> get package:
expressionAtom := columnName (^), { ASC, /, $eof$, ,, -, DESC, %, *, +, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := columnName (^), { ASC, /, $eof$, ,, -, DESC, %, *, +, }
===============================================================================

SHIFT <263> by 'NUMBER_CONSTANT' to <300>
This condition already existed.
SHIFT <265> by columnName to <308>.
Condition<308>, REDUCE Production by 'ASC': 
pid <75>: 
expressionAtom := columnName 
Condition<308>, REDUCE Production by '/': 
pid <75>: 
expressionAtom := columnName 
Condition<308From Condition <>, REDUCE Production by '$eof$': 
259pid <> get package:75
>: 
expressionAtom := columnNamemathOperator  
:= Condition<308'-'>, REDUCE Production by ' ,': 
(^)pid <75, { >: 
expressionAtom STR_LITERAL:= , columnNameID , 
-, Condition<308NUMBER_CONSTANT>, REDUCE Production by ', -}': 

-------------------------------------------------------------------------------pid <75
>: 

expressionAtom := After tracing, got package:columnName
 mathOperator
 := Condition<308'-'>, REDUCE Production by ' DESC': 
(^)pid <75, { >: 
expressionAtomSTR_LITERAL , := ID, columnName- , 
NUMBER_CONSTANT, Condition<308}>, REDUCE Production by '
%===============================================================================': 


pid <75>: 
expressionAtom := columnName 
Condition<308>, REDUCE Production by '*': 
pid <75>: 
expressionAtom := columnName 
Condition<308>, REDUCE Production by '+': 
pid <75>: 
expressionAtom := columnName 
SHIFT <259> by '-' to <34>
This condition already existed.
From Condition <265> get package:
positiveNum := 'NUMBER_CONSTANT' (^), { ASC, /, $eof$, ,, -, DESC, %, *, +, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := 'NUMBER_CONSTANT' (^), { ASC, /, $eof$, ,, -From Condition <, DESC, %, 259*> get package:, +
, }
mathOperator=============================================================================== 
:= 
'/' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '/' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <265> by 'NUMBER_CONSTANT' to <303>
This condition already existed.
SHIFT <259> by '/' to <40>
This condition already existed.
From Condition <260> get package:From Condition <
259> get package:
mathOperator := orderByExpression '-':=  expressionAtom(^) , { STR_LITERAL'DESC',  ID, (^)-, { , NUMBER_CONSTANT$eof$, , },, 
}-------------------------------------------------------------------------------

-------------------------------------------------------------------------------


After tracing, got package:
After tracing, got package:mathOperator
 := orderByExpression := '-' expressionAtom (^), { 'DESC'STR_LITERAL , ID, (^)-, { , NUMBER_CONSTANT$eof$, , },, 
}===============================================================================

===============================================================================


SHIFT <260> by '-' to <34>
This condition already existed.
SHIFT <259> by 'DESC' to <262>
This condition already existed.
From Condition <254> get package:
expressionAtom := columnName (^), { /, ASC, $eof$, -, ,, %, DESC, *, +, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := columnName (^), { /, ASC, $eof$, -, ,, %, DESC, *, From Condition <+, }
259===============================================================================> get package:


mathOperator := '+' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '+' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <254> by columnName to <298>.
This condition already existed.
SHIFT <259From Condition <> by '+' to <41254>> get package:

This condition already existed.
constantNum := positiveNum (^), { /, ASC, $eof$, -, ,, DESC, %, *, +, }
-------------------------------------------------------------------------------

After tracing, got package:
constantNum := positiveNum (^), { /, ASC, $eof$, -, ,, DESC, %, *, +, }
===============================================================================

From Condition <255> get package:
SHIFT <254expressionAtom> by  positiveNum:=  to <309'STR_LITERAL'>. 
(^), { %, DESC, *, ASC, /, +, ,, -, $eof$, }
-------------------------------------------------------------------------------Condition<
309
>, REDUCE Production by 'After tracing, got package:/
': 
expressionAtom := pid <78'STR_LITERAL'>: 
 constantNum(^) , { := %, DESCpositiveNum,  *, 
ASC, /, +, Condition<,309, >, REDUCE Production by '-, ASC$eof$': , }

pid <===============================================================================78
>: 

constantNum := positiveNum 
Condition<309>, REDUCE Production by '$eof$': 
pid <78>: 
constantNum := positiveNum 
Condition<309>, REDUCE Production by '-': 
pid <78>: 
constantNum := positiveNum 
Condition<309>, REDUCE Production by ',': 
pid <78>: 
constantNum := positiveNum 
Condition<309>, REDUCE Production by 'DESC': 
SHIFT <pid <25578> by '>: 
STR_LITERAL' to <constantNum285 >:= 
positiveNumThis condition already existed. 

Condition<309>, REDUCE Production by '%': 
pid <78>: 
constantNum := positiveNum 
Condition<309>, REDUCE Production by '*': 
pid <78>: 
constantNum := positiveNum 
Condition<309>, REDUCE Production by '+': 
pid <78>: 
constantNum := positiveNum 
From Condition <255> get package:
$__ann_38 := $__ann_38 ',' orderByExpression (^), { $eof$, ,, }
-------------------------------------------------------------------------------

After tracing, got package:
$__ann_38 := $__ann_38 ',' orderByExpression (^), { $eof$, ,, }
===============================================================================

From Condition <254> get package:
expressionAtom := 'STR_LITERAL' (^), { /, ASC, $eof$, -, ,, %, DESC, *, +, }
-------------------------------------------------------------------------------

SHIFT <After tracing, got package:255
> by orderByExpressionexpressionAtom to < 310:= >.
'STR_LITERAL' (^), { /, ASC, $eof$, -, ,, %, DESC, *, +, }
Condition<===============================================================================310
>, REDUCE Production by '$eof$
': 
pid <56>: 
$__ann_38 := $__ann_38 ',' orderByExpression 
Condition<310>, REDUCE Production by ',': 
pid <56>: 
$__ann_38 := $__ann_38 ',' orderByExpression 
From Condition <255> get package:
SHIFT <254expressionAtom> by ' STR_LITERAL:= ' to <287constantNum> 
(^)This condition already existed., { 
%, DESC, *, ASC, /, +, ,, -, $eof$, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := constantNum (^), { %, DESC, *, ASC, /, +, ,, -, $eof$, }
===============================================================================

From Condition <254> get package:
constantNum := '-' (^)positiveNum , { /, ASC, $eof$, -, ,, DESC, %, *, +, }
-------------------------------------------------------------------------------

SHIFT <255> by constantNum to <295>.
This condition already existed.
After tracing, got package:
positiveNum := (^)'NUMBER_CONSTANT' , { ASC, /, $eof$, ,, -, %, DESC, *, +, }
constantNum := '-' (^)positiveNum , { /, ASC, $eof$, -, ,, DESC, %, *, +, }
===============================================================================

From Condition <255> get package:
expressionAtom := columnName (^), { %, DESC, *, ASC, /, +, ,, -, $eof$, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := columnName (^), { %, DESC, *, ASC, /, +, ,, -, $eof$, }
===============================================================================

SHIFT <254> by '-' to <311>
From Condition <311> get package:
positiveNum := 'NUMBER_CONSTANT' (^), { ASC, /, $eof$, ,, -, %, DESC, *, +, }
-------------------------------------------------------------------------------

SHIFT <After tracing, got package:255
> by positiveNumcolumnName  to <297:= >.
'NUMBER_CONSTANT'This condition already existed. 
(^), { ASC, /, $eof$, ,, -, %, DESC, *, +, }
===============================================================================

From Condition <255> get package:
constantNum := '-' (^)positiveNum , { DESC, %, *, /, ASC, +, -, ,, $eof$, }
-------------------------------------------------------------------------------

SHIFT <311> by 'NUMBER_CONSTANT' to <312>
Condition<312>, REDUCE Production by 'ASC': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<312>, REDUCE Production by '/': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<312>, REDUCE Production by '$eof$': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<312>, REDUCE Production by ',': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<312>, REDUCE Production by '-': 
pid <79>: 
positiveNum After tracing, got package::= 
'NUMBER_CONSTANT'positiveNum  
:= (^)Condition<312'NUMBER_CONSTANT'>, REDUCE Production by ' %': 
, { pid <79%>: 
, positiveNumDESC , := *, ASC'NUMBER_CONSTANT',  /
, +Condition<, 312,>, REDUCE Production by ', DESC-': , 
$eof$pid <79, >: 
}positiveNum 
:= constantNum := 'NUMBER_CONSTANT''-'  
(^)positiveNum Condition<312, { >, REDUCE Production by '*DESC': , 
%, pid <*79, >: 
/positiveNum,  ASC:= , +, 'NUMBER_CONSTANT'- , 
,, Condition<$eof$312, >, REDUCE Production by '}+': 

===============================================================================pid <79
>: 

positiveNum := 'NUMBER_CONSTANT' 
From Condition <311> get package:
constantNum := '-' positiveNum (^), { /, ASC, $eof$, -, ,, DESC, %, *, +, }
-------------------------------------------------------------------------------

After tracing, got package:
constantNum := '-' positiveNum (^), { /, ASC, $eof$, -, ,, DESC, %, *, +, }
===============================================================================

SHIFT <255> by '-' to <290>
This condition already existed.
SHIFT <311> by positiveNum to <313>.
From Condition <255> get package:
Condition<313columnName>, REDUCE Production by ' /:= ': 
'ID'pid < 77(^)>: 
, { constantNum DESC:= , %'-',  *positiveNum,  /, 
ASC, Condition<313+>, REDUCE Production by ', ASC-': , 
,pid <, 77$eof$>: 
, constantNum} := 
'-'columnName  positiveNum:=  
'ID' Condition<313(^)>, REDUCE Production by ''.'$eof$ ': 
'ID'pid < 77, { >: 
constantNumDESC , := %, '-'* , positiveNum/ , 
ASC, Condition<313+>, REDUCE Production by ', --': , 
,pid <77, >: 
$eof$constantNum,  }:= 
'-'------------------------------------------------------------------------------- 
positiveNum
 
After tracing, got package:
Condition<313columnName >, REDUCE Production by ':= ,': 
'ID'pid < 77(^)>: 
, { constantNum DESC:= , %'-',  *positiveNum,  /
, ASCCondition<, 313+>, REDUCE Production by ', DESC': -
, ,pid <, 77$eof$>: 
, constantNum} := 
'-'columnName  positiveNum:=  
'ID' Condition<313(^)>, REDUCE Production by ''.'% ': 
'ID'pid < 77, { >: 
constantNumDESC , := %, '-'* , positiveNum/ , 
ASC, Condition<313+>, REDUCE Production by ', *-': , 
,pid <, 77$eof$>: 
, constantNum} 
:= ==============================================================================='-'
 
positiveNum 
Condition<313>, REDUCE Production by '+': 
pid <77>: 
constantNum := '-' positiveNum 
From Condition <254> get package:
columnName := 'ID' (^), { /, ASC, $eof$, -, ,, %, DESC, *, +, }
columnName := 'ID' (^)'.' 'ID' , { /, ASC, $eof$, -, ,, %, DESC, *, +, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID' SHIFT <(^)255, { > by 'ID/' to <, 279ASC>, 
$eof$, This condition already existed.-, 
,, %, DESC, *, +, }
columnName := 'ID' (^)'.' 'ID' , { /, ASC, $eof$, -, ,, %, DESC, *, +, }
===============================================================================

From Condition <255> get package:
positiveNum := 'NUMBER_CONSTANT' (^), { %, DESC, *, ASC, /, +, ,, -, $eof$, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := 'NUMBER_CONSTANT' (^), { %, DESC, *, ASC, /, +, ,, -, $eof$, }
===============================================================================

SHIFT <254> by 'ID' to <267>
This condition already existed.
From Condition <254SHIFT <> get package:255
> by 'NUMBER_CONSTANT' to <positiveNum291 >:= 
'NUMBER_CONSTANT'This condition already existed. 
(^), { /, ASC, $eof$, -, ,, %, DESC, *, +, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := 'NUMBER_CONSTANT' (^), { /, ASC, $eof$, -, ,, %, DESC, *, +, }
===============================================================================

SHIFT <254> by 'NUMBER_CONSTANT' to <294>
This condition already existed.
Condition<252>, REDUCE Production by '$eof$': 
pid <55>: 
orderByClause := 'ORDERBY' orderByExpression 
From Condition <210> get package:
expressionAtom := constantNum (^), { %, DESC, /, ASC, -, ,, $eof$, *, +, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := constantNum (^), { %, DESC, /, ASC, -, ,, $eof$, *, +, }
===============================================================================

From Condition <210> get package:
expressionAtom := columnName (^), { %, DESC, /, ASC, -, ,, $eof$, *, +, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := columnName (^), { %, DESC, /, ASC, -, ,, $eof$, *, +, }
===============================================================================

SHIFT <210> by constantNum to <241>.
This condition already existed.
SHIFT <210> by columnName to <244>.
This condition already existed.
From Condition <210> get package:
columnName := 'ID' (^), { %, DESC, ASC, /, ,, -, $eof$, *, +, }
columnName := 'ID' (^)'.' 'ID' , { %, DESC, ASC, /, ,, -, $eof$, *, +, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID' (^), { %, DESC, ASC, /, ,, -, $eof$, *, +, }
From Condition <columnName := 'ID'210 > get package:(^)
'.' 'ID' constantNum, {  := %, DESCpositiveNum,  ASC, /(^), , { ,, DESC-, , %$eof$, , *ASC, , +/, , },
, -===============================================================================, 
$eof$
, *, +, }
-------------------------------------------------------------------------------

After tracing, got package:
constantNum := positiveNum (^), { DESC, %, ASC, /, ,, -, $eof$, *, +, }
===============================================================================

SHIFT <210> by 'ID' to <314>
Condition<314>, REDUCE Production by '%': 
pid <68>: 
columnName := 'ID' 
Condition<314>, REDUCE Production by 'DESC': 
pid <68>: 
columnName := 'ID' 
Condition<314>, REDUCE Production by 'ASC': 
pid <68>: 
columnName := 'ID' 
Condition<314>, REDUCE Production by '/': 
pid <68>: 
columnName := 'ID' 
Condition<314>, REDUCE Production by ',': 
pid <68>: 
columnName := 'ID' 
Condition<314>, REDUCE Production by '-': 
pid <68>: 
columnName := SHIFT <'ID'210 > by 
positiveNumCondition< to <233314>.>, REDUCE Production by '
$eof$': This condition already existed.

pid <68>: 
columnName := 'ID' 
Condition<314>, REDUCE Production by '*': 
pid <68>: 
columnName := 'ID' 
Condition<314>, REDUCE Production by '+': 
pid <68>: 
columnName := 'ID' 
From Condition <210> get package:
constantNum := '-' (^)positiveNum , { DESC, %, ASC, /, ,, -, $eof$, *, +, }
From Condition <-------------------------------------------------------------------------------
314
> get package:
columnName := 'ID' '.' (^)'ID' , { %, DESC, ASC, /, ,, -, $eof$, *, +, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID' '.' (^)'ID' , { %, DESC, ASC, /, ,, -, $eof$, *, +, }
===============================================================================

After tracing, got package:
positiveNum := (^)'NUMBER_CONSTANT' , { %, DESC, /, ASC, -, ,, $eof$, *, +, }
constantNum := '-' (^)positiveNum , { DESC, %, ASC, /, ,, -, $eof$, *, +, }
===============================================================================

SHIFT <314> by '.' to <315>
From Condition <315> get package:
columnName := 'ID' '.' 'ID' (^), { %, DESC, ASC, /, ,, -, $eof$, *, +, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID' '.' 'ID' (^), { %, DESC, ASC, /, ,, -, $eof$, *, +, }
===============================================================================

SHIFT <210> by '-' to <242>
This condition already existed.
SHIFT <315> by 'ID' to <316>
From Condition <210> get package:
Condition<316positiveNum>, REDUCE Production by ' %:= ': 
'NUMBER_CONSTANT'pid <67 >: 
columnName(^) , { := %'ID',  DESC'.',  /'ID',  ASC, 
-, ,, Condition<$eof$316, >, REDUCE Production by '*DESC, ': +, 
}pid <67
>: 
columnName------------------------------------------------------------------------------- 
:= 
'ID' After tracing, got package:'.'
 positiveNum'ID'  := 
'NUMBER_CONSTANT'Condition< 316(^)>, REDUCE Production by ', { ASC': %
, pid <DESC67, >: 
/columnName,  ASC:= , -'ID',  ,'.',  $eof$'ID',  *
, +Condition<, 316}>, REDUCE Production by '
/===============================================================================': 


pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<316>, REDUCE Production by ',': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<316>, REDUCE Production by '-': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<316>, REDUCE Production by '$eof$': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<316>, REDUCE Production by '*': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<316>, REDUCE Production by '+': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
SHIFT <210> by 'NUMBER_CONSTANT' to <243>
This condition already existed.
Condition<206>, REDUCE Production by '$eof$': 
pid <38>: 
selectStatement := 'SELECT' selectElements fromClause 
From Condition <206> get package:
selectStatement := 'SELECT' selectElements fromClause 'WHERE' (^)expression , { $eof$, }
selectStatement := 'SELECT' selectElements fromClause 'WHERE' (^)expression orderByClause , { $eof$, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := (^)'STR_LITERAL' , { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, ORDERBY, }
expressionAtom := (^)expressionAtom mathOperator expressionAtom , { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, ORDERBY, }
predicate := (^)expressionAtom , { $eof$, AND, OR, ORDERBY, }
expression := (^)predicate , { AND, $eof$, OR, ORDERBY, }
columnName := (^)'ID' , { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, ORDERBY, }
selectStatement := 'SELECT' selectElements fromClause 'WHERE' (^)expression , { $eof$, }
expressionAtom := (^)columnName , { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, ORDERBY, }
predicate := (^)expressionAtom comparisonOperator expressionAtom , { $eof$, AND, OR, ORDERBY, }
expression := (^)expression logicalOperator expression , { AND, $eof$, OR, ORDERBY, }
columnName := (^)'ID' '.' 'ID' , { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, ORDERBY, }
selectStatement := 'SELECT' selectElements fromClause 'WHERE' (^)expression orderByClause , { $eof$, }
expressionAtom := (^)constantNum , { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, ORDERBY, }
constantNum := (^)positiveNum , { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, ORDERBY, }
constantNum := (^)'-' positiveNum , { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, ORDERBY, }
positiveNum := (^)'NUMBER_CONSTANT' , { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, ORDERBY, }
===============================================================================

SHIFT <206> by 'WHERE' to <317>
From Condition <317> get package:
expressionAtom := 'STR_LITERAL' (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, ORDERBY, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := 'STR_LITERAL' (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, ORDERBY, }
===============================================================================

From Condition <317> get package:
predicate := expressionAtom (^), { $eof$, AND, OR, ORDERBY, }
expressionAtom := expressionAtom (^)mathOperator expressionAtom , { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, ORDERBY, }
predicate := expressionAtom (^)comparisonOperator expressionAtom , { $eof$, AND, OR, ORDERBY, }
-------------------------------------------------------------------------------

SHIFT <317> by 'STR_LITERAL' to <318>
Condition<318>, REDUCE Production by '==': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<318>, REDUCE Production by '*': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<318>, REDUCE Production by '>': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<318>, REDUCE Production by '<': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<318>, REDUCE Production by '/': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<318>, REDUCE Production by '<=': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<318>, REDUCE Production by '%': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<318>, REDUCE Production by '>=': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<318>, REDUCE Production by '!=': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<318>, REDUCE Production by '+': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<318>, REDUCE Production by '-': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<318>, REDUCE Production by '$eof$': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<318>, REDUCE Production by 'AND': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<318>, REDUCE Production by 'OR': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<318>, REDUCE Production by 'ORDERBY': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
After tracing, got package:
predicate := expressionAtom (^), { $eof$, AND, OR, ORDERBY, }
mathOperator := (^)'*' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'%' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
expressionAtom := expressionAtom (^)mathOperator expressionAtom , { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, ORDERBY, }
mathOperator := (^)'-' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
comparisonOperator := (^)'!=' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'/' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'+' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
predicate := expressionAtom (^)comparisonOperator expressionAtom , { $eof$, AND, OR, ORDERBY, }
comparisonOperator := (^)'>=' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
comparisonOperator := (^)'<=' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
comparisonOperator := (^)'<' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
comparisonOperator := (^)'>' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
comparisonOperator := (^)'==' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <317> by expressionAtom to <319>.
Condition<319>, REDUCE Production by '$eof$': 
pid <72>: 
predicate := expressionAtom 
Condition<319>, REDUCE Production by 'AND': 
pid <72>: 
predicate := expressionAtom 
Condition<319>, REDUCE Production by 'OR': 
pid <72>: 
predicate := expressionAtom From Condition <
Condition<319319> get package:>, REDUCE Production by 'ORDERBY
': 
mathOperatorpid < 72:= >: 
predicate := '*'expressionAtom  
(^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '*' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <319> by '*' to <33>
This condition already existed.
From Condition <319> get package:
mathOperator := '%' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '%' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

From Condition <319> get package:
expressionAtom := expressionAtom mathOperator (^)expressionAtom , { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, ORDERBY, }
-------------------------------------------------------------------------------

SHIFT <319> by '%' to <26>
This condition already existed.
After tracing, got package:
columnName := (^)'ID' , { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, ORDERBY, }
constantNum := (^)positiveNum , { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, ORDERBY, }
expressionAtom := (^)'STR_LITERAL' , { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, ORDERBY, }
expressionAtom := expressionAtom mathOperator (^)expressionAtom , { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, ORDERBY, }
expressionAtom := (^)expressionAtom mathOperator expressionAtom , { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, ORDERBY, }
columnName := (^)'ID' '.' 'ID' , { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, ORDERBY, }
constantNum := (^)'-' positiveNum , { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, ORDERBY, }
expressionAtom := (^)constantNum , { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, ORDERBY, }
expressionAtom := (^)columnName , { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, ORDERBY, }
positiveNum := (^)'NUMBER_CONSTANT' , { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, ORDERBY, }
===============================================================================

SHIFT <319> by mathOperator to <320>.
From Condition <320> get package:
columnName := 'ID' (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, ORDERBY, }
columnName := 'ID' (^)'.' 'ID' , { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, ORDERBY, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID'From Condition < (^), { 320==> get package:, *, 
>, <, /, <=constantNum,  %:= , >=, positiveNum!= , +, (^)-, { , $eof$==, , AND*, , OR>, , ORDERBY<, , }/, 
<=columnName,  %:= , >=, 'ID'!= , +(^), '.'- , $eof$'ID',  AND, OR, { , ORDERBY==, , }*, 
>, -------------------------------------------------------------------------------<, 
/
, <=, After tracing, got package:%, 
>=, constantNum!= , := +, -positiveNum,  $eof$, AND(^), , { OR, ==ORDERBY, , *}, 
>===============================================================================, 
<
, /, <=, %, >=, !=, +, -, $eof$, AND, OR, ORDERBY, }
===============================================================================

SHIFT <320> by 'ID' to <321>
Condition<321>, REDUCE Production by '==': 
pid <68>: 
columnName := 'ID' 
Condition<321>, REDUCE Production by '*': 
pid <68>: 
columnName := 'ID' 
Condition<321>, REDUCE Production by '>': 
pid <68>: 
columnName := 'ID' 
Condition<321>, REDUCE Production by '<': 
pid <68>: 
columnName := 'ID' 
Condition<321>, REDUCE Production by '/': 
pid <68>: 
columnName := 'ID' 
SHIFT <Condition<321320>, REDUCE Production by '> by <=': positiveNum
 to <322pid <>.68
>: 
columnName := 'ID' 
Condition<321>, REDUCE Production by '%': 
Condition<pid <32268>, REDUCE Production by '>: 
==columnName':  
:= 'ID'pid < 78
>: 
constantNum Condition<321:= >, REDUCE Production by '>=positiveNum':  

pid <68Condition<322>: 
>, REDUCE Production by 'columnName* ': := 
'ID'pid < 78
>: 
constantNumCondition< 321:= >, REDUCE Production by 'positiveNum!= ': 

Condition<pid <68322>: 
>, REDUCE Production by 'columnName> ': := 
'ID'pid <78 >: 

constantNum Condition<:= 321positiveNum>, REDUCE Production by ' +': 

Condition<322pid <>, REDUCE Production by '68<>: 
': columnName 
:= pid <78'ID'>: 
 constantNum 
:= Condition<positiveNum321 >, REDUCE Production by '
-': Condition<
322pid <68>, REDUCE Production by '>: 
/columnName':  
:= 'ID'pid <78 >: 

constantNum Condition<:= 321positiveNum>, REDUCE Production by ' $eof$
': Condition<322
>, REDUCE Production by '<=': pid <68
>: 
pid <78columnName>: 
 constantNum:=  := 'ID'positiveNum  

Condition<321Condition<>, REDUCE Production by '322AND>, REDUCE Production by '': %
': pid <68
>: 
columnNamepid < 78:= >: 
'ID'constantNum  
:= positiveNum Condition<321
>, REDUCE Production by 'OR': Condition<
322pid <68>, REDUCE Production by '>: 
>=columnName':  
:= pid <78'ID'>: 
 constantNum
 := Condition<321positiveNum>, REDUCE Production by ' ORDERBY': 

Condition<pid <68322>: 
>, REDUCE Production by 'columnName!= ': := 
'ID'pid < 78
>: 
constantNum := positiveNum 
Condition<322>, REDUCE Production by '+': 
pid <78>: 
constantNum := positiveNum 
Condition<322>, REDUCE Production by '-': 
pid <78>: 
constantNum := positiveNum 
Condition<322>, REDUCE Production by '$eof$': 
pid <78From Condition <>: 
constantNum := positiveNum321 > get package:

Condition<322>, REDUCE Production by 'AND': 
columnNamepid < 78:= >: 
constantNum := 'ID'positiveNum  
'.' Condition<322(^)>, REDUCE Production by ''ID'OR ': 
, { pid <78==>: 
, constantNum *:= , positiveNum> , 
<, Condition</322, >, REDUCE Production by '<=ORDERBY, ': %
, >=pid <, 78!=>: 
, constantNum+ , := -, positiveNum$eof$ , 
AND, OR, ORDERBY, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID' '.' (^)'ID' , { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, ORDERBY, }
===============================================================================

From Condition <320> get package:
expressionAtom := 'STR_LITERAL' (^), { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, ORDERBY, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := 'STR_LITERAL' (^), { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, ORDERBY, }
===============================================================================

SHIFT <321> by '.' to <323>
From Condition <323> get package:
columnName := 'ID' '.' 'ID' (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, ORDERBY, }
-------------------------------------------------------------------------------

SHIFT <After tracing, got package:320
> by 'STR_LITERAL' to <columnName324 >:= 
'ID' '.' 'ID' (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, ORDERBY, Condition<}324
>, REDUCE Production by '=================================================================================': 


pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<324>, REDUCE Production by '>': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<324>, REDUCE Production by '*': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<324>, REDUCE Production by '<': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<324>, REDUCE Production by '<=': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<324>, REDUCE Production by '/': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<324>, REDUCE Production by '>=': 
SHIFT <pid <74323>: 
> by 'expressionAtomID ' to <325:= >
'STR_LITERAL' 
Condition<324>, REDUCE Production by '%': 
Condition<pid <32574>, REDUCE Production by '>: 
==expressionAtom':  
:= 'STR_LITERAL'pid <67 >: 

columnName Condition<:= 324'ID'>, REDUCE Production by ' !='.'':  
'ID'pid < 74
>: 
expressionAtom Condition<325:= >, REDUCE Production by '*'STR_LITERAL'':  

pid <67>: 
columnNameCondition< 324:= >, REDUCE Production by '+'ID'':  
'.'pid < 74'ID'>: 
 expressionAtom 
:= Condition<325'STR_LITERAL'>, REDUCE Production by ' >': 

Condition<324pid <67>, REDUCE Production by '>: 
-columnName':  
:= 'ID'pid < 74'.'>: 
 expressionAtom'ID'  := 
'STR_LITERAL'Condition<325 >, REDUCE Production by '
<': Condition<324
>, REDUCE Production by 'pid <67$eof$>: 
': columnName 
:= pid <74'ID'>: 
 expressionAtom'.'  := 'ID' 'STR_LITERAL'
 Condition<
325Condition<>, REDUCE Production by '324/>, REDUCE Production by '': AND': 

pid <67pid <74>: 
>: 
columnNameexpressionAtom  := := 'ID' 'STR_LITERAL''.'  
'ID' Condition<324
>, REDUCE Production by 'OR': Condition<325
>, REDUCE Production by 'pid <<=74': >: 

expressionAtompid < 67:= >: 
columnName'STR_LITERAL'  := 
'ID' Condition<'.'324 >, REDUCE Production by ''ID'ORDERBY ': 

pid <74Condition<>: 
325expressionAtom>, REDUCE Production by ' %:= ': 
'STR_LITERAL'pid < 67
>: 
columnName := 'ID' '.' 'ID' 
Condition<325>, REDUCE Production by '>=': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<325>, REDUCE Production by '!=': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<325>, REDUCE Production by '+': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<325>, REDUCE Production by '-': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<325>, REDUCE Production by '$eof$': 
pid <67>: 
columnName := From Condition <'ID' '.' 'ID'320 > get package:

Condition<325expressionAtom>, REDUCE Production by ' AND:= ': 
expressionAtompid < 67(^)>: 
mathOperatorcolumnName  := expressionAtom 'ID' , { '.' =='ID',  >
, *Condition<325, >, REDUCE Production by '<OR, ': <=
, pid <67/>: 
, columnName>= , := %, 'ID'!= , '.'+ , 'ID'- , 
$eof$, Condition<325AND>, REDUCE Production by ', ORDERBYOR': , 
ORDERBYpid <, 67}>: 

columnNameexpressionAtom  := := 'ID' expressionAtom '.' mathOperator'ID'  expressionAtom
 (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, ORDERBY, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := (^)'*' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'%' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'-' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
expressionAtom := expressionAtom (^)mathOperator expressionAtom , { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, ORDERBY, }
expressionAtom := expressionAtom mathOperator expressionAtom (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, ORDERBY, }
mathOperator := (^)'/' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'+' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <320> by expressionAtom to <326>.
From Condition <326> get package:
mathOperator := '*' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '*' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

From Condition <326> get package:
mathOperator := '%' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '%' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <326> by '*' to <33>
This condition already existed.
SHIFT <326> by '%' to <26>
This condition already existed.
From Condition <326> get package:
mathOperator := '-' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '-' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

From Condition <326> get package:
expressionAtom := expressionAtom mathOperator (^)expressionAtom , { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, ORDERBY, }
-------------------------------------------------------------------------------

SHIFT <326> by '-' to <34>
This condition already existed.
After tracing, got package:
columnName := (^)'ID' , { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, ORDERBY, }
constantNum := (^)positiveNum , { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, ORDERBY, }
expressionAtom := (^)'STR_LITERAL' , { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, ORDERBY, }
expressionAtom := expressionAtom mathOperator (^)expressionAtom , { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, ORDERBY, }
expressionAtom := (^)expressionAtom mathOperator expressionAtom , { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, ORDERBY, }
columnName := (^)'ID' '.' 'ID' , { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, ORDERBY, }
constantNum := (^)'-' positiveNum , { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, ORDERBY, }
expressionAtom := (^)constantNum , { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, ORDERBY, }
expressionAtom := (^)columnName , { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, ORDERBY, }
positiveNum := (^)'NUMBER_CONSTANT' , { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, ORDERBY, }
===============================================================================

SHIFT <326> by mathOperator to <327>.
From Condition <327> get package:
columnName := 'ID' (^), { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, ORDERBY, }
columnName := 'ID' (^)'.' 'ID' , { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, ORDERBY, }
-------------------------------------------------------------------------------

After tracing, got package:
From Condition <columnName := 'ID'327 > get package:(^)
, { ==, >, *, constantNum< , := <=, /, positiveNum>= , %, (^)!=, { , +, ==-, , >$eof$, , *AND, , <OR, , <=ORDERBY, , /}, 
>=, columnName% , := !=, +'ID',  -, (^)$eof$'.',  AND, 'ID'OR , ORDERBY, { , }==, 
>-------------------------------------------------------------------------------, 
*, 
<, <=After tracing, got package:, 
/, constantNum>= , := %, !=positiveNum,  +, -(^), , { $eof$, ==AND, , >OR, , *ORDERBY, , <}, 
<=, ===============================================================================/
, 
>=, %, !=, +, -, $eof$, AND, OR, ORDERBY, }
===============================================================================

SHIFT <327> by 'ID' to <328>
Condition<328>, REDUCE Production by '==': 
pid <68>: 
columnName := 'ID' 
Condition<328>, REDUCE Production by '>': 
pid <68>: 
columnName := 'ID' 
Condition<328>, REDUCE Production by '*': 
pid <68>: 
columnName := 'ID' 
Condition<328>, REDUCE Production by '<': 
pid <68>: 
columnName := 'ID' 
Condition<328>, REDUCE Production by '<=': 
pid <68SHIFT <>: 
327columnName> by  positiveNum:=  to <329'ID'>. 

Condition<328>, REDUCE Production by '/': 
Condition<pid <68329>: 
>, REDUCE Production by 'columnName ==:= ': 'ID'
 
pid <78Condition<>: 
328constantNum>, REDUCE Production by ' >=:= ': positiveNum
 pid <68
>: 
columnName := Condition<329'ID'>, REDUCE Production by ' >': 

Condition<pid <32878>, REDUCE Production by '>: 
%constantNum':  
:= pid <68positiveNum>: 
 columnName 
:= Condition<'ID'329>, REDUCE Production by '*': 
 pid <78
>: 
constantNum := Condition<positiveNum328 >, REDUCE Production by '
!=': 
Condition<329pid <>, REDUCE Production by '68<>: 
': columnName
 := pid <78'ID'>: 
 constantNum 
:= positiveNumCondition<328 >, REDUCE Production by '
+': Condition<
329>, REDUCE Production by 'pid <68<=>: 
': columnName 
:= pid <78'ID'>: 
 constantNum 
:= positiveNumCondition< 328
>, REDUCE Production by '-': Condition<
329pid <>, REDUCE Production by '68/>: 
': columnName
 pid <:= 78'ID'>: 
 constantNum 
:= positiveNumCondition< 328
>, REDUCE Production by '$eof$': Condition<329
>, REDUCE Production by 'pid <68>=>: 
': columnName
 pid <:= 78'ID'>: 
 constantNum 
:= Condition<positiveNum328 >, REDUCE Production by '
AND': Condition<329
>, REDUCE Production by 'pid <%68': >: 

columnNamepid < 78:= >: 
'ID'constantNum  := 
positiveNum Condition<328
>, REDUCE Production by 'OR': Condition<329
>, REDUCE Production by 'pid <68!=>: 
': columnName
 := pid <78'ID'>: 
 constantNum 
:= positiveNum Condition<328
>, REDUCE Production by 'ORDERBY': Condition<
329pid <68>, REDUCE Production by '>: 
+columnName':  
:= pid <78'ID'>: 
 constantNum 
:= positiveNum 
Condition<329>, REDUCE Production by '-': 
pid <78>: 
constantNum := positiveNum 
Condition<329>, REDUCE Production by '$eof$': 
pid <78>: 
constantNum := positiveNum 
Condition<329>, REDUCE Production by 'AND': 
pid <78>: 
constantNum := positiveNum 
Condition<329From Condition <>, REDUCE Production by 'OR': 
328pid <> get package:78
>: 
constantNum := positiveNum columnName
 := Condition<329'ID'>, REDUCE Production by ' ORDERBY': '.'
 pid <78(^)>: 
'ID'constantNum  := , { positiveNum ==
, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, ORDERBY, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID' '.' (^)'ID' , { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, ORDERBY, }
===============================================================================

From Condition <327> get package:
expressionAtom := 'STR_LITERAL' (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, ORDERBY, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := 'STR_LITERAL' (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, ORDERBY, }
===============================================================================

SHIFT <328> by '.' to <330>
From Condition <330> get package:
columnName := 'ID' '.' 'ID' (^), { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, ORDERBY, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID' '.' 'ID' (^), { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, ORDERBY, }
===============================================================================

SHIFT <327> by 'STR_LITERAL' to <318>
This condition already existed.
SHIFT <330> by 'ID' to <331>
From Condition <327> get package:
Condition<331expressionAtom>, REDUCE Production by ' ==:= ': 
expressionAtom pid <67(^)>: 
mathOperator columnName expressionAtom:=  'ID', {  '.'== , 'ID'* , 
>, <, Condition<331/>, REDUCE Production by ', ><=': , 
%, pid <>=67, >: 
!=columnName,  +:= , -'ID',  $eof$'.',  AND'ID',  OR, 
ORDERBY, Condition<}331
>, REDUCE Production by 'expressionAtom* ': := 
expressionAtompid < 67mathOperator>: 
 columnName expressionAtom:=  'ID' (^)'.', {  'ID'== , 
>, Condition<331*>, REDUCE Production by ', <<': , 
<=pid <, 67/>: 
, columnName>= , := %, 'ID'!= , '.'+ , 'ID'- , 
$eof$, Condition<AND331, >, REDUCE Production by 'OR<=, ': ORDERBY
, pid <67}>: 

columnName -------------------------------------------------------------------------------:= 
'ID'
 '.' 'ID' 
Condition<331>, REDUCE Production by '/': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<331>, REDUCE Production by '>=': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<331>, REDUCE Production by '%': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<331>, REDUCE Production by '!=': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<331>, REDUCE Production by '+': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<331>, REDUCE Production by '-': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<331>, REDUCE Production by '$eof$': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<331>, REDUCE Production by 'AND': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<331>, REDUCE Production by 'OR': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<331>, REDUCE Production by 'ORDERBY': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
After tracing, got package:
mathOperator := (^)'*' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'%' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'-' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
expressionAtom := expressionAtom (^)mathOperator expressionAtom , { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, ORDERBY, }
expressionAtom := expressionAtom mathOperator expressionAtom (^), { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, ORDERBY, }
mathOperator := (^)'/' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'+' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <327> by expressionAtom to <326>.
This condition already existed.
From Condition <327> get package:
constantNum := '-' (^)positiveNum , { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, ORDERBY, }
-------------------------------------------------------------------------------

From Condition <327> get package:
expressionAtom := constantNum (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, ORDERBY, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := constantNum (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, ORDERBY, }
===============================================================================

After tracing, got package:
positiveNum := (^)'NUMBER_CONSTANT' , { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, ORDERBY, }
constantNum := '-' (^)positiveNum , { ==, >, *, <, <=, /, >=, %, !=, SHIFT <+327, > by -constantNum,  to <332$eof$>., 
AND, OR, ORDERBY, }
===============================================================================
Condition<
332>, REDUCE Production by '==': 
pid <73>: 
expressionAtom := constantNum 
Condition<332>, REDUCE Production by '*': 
pid <73>: 
expressionAtom := constantNum 
Condition<332>, REDUCE Production by '>': 
pid <73>: 
expressionAtom := constantNum 
Condition<332>, REDUCE Production by '<': 
pid <73>: 
expressionAtom := constantNum 
Condition<332>, REDUCE Production by '/': 
pid <73>: 
expressionAtom := constantNum 
Condition<332>, REDUCE Production by '<=': 
pid <73>: 
expressionAtom := constantNum 
Condition<332>, REDUCE Production by '%': 
pid <73>: 
expressionAtom := constantNum 
Condition<332>, REDUCE Production by '>=': 
pid <73>: 
expressionAtom := constantNum 
Condition<332>, REDUCE Production by '!=': 
pid <73>: 
expressionAtom := constantNum 
Condition<332>, REDUCE Production by '+': 
pid <73>: 
expressionAtom := constantNum 
SHIFT <Condition<327332> by '>, REDUCE Production by '--' to <333': >

pid <73>: 
expressionAtom := constantNum 
Condition<332>, REDUCE Production by '$eof$': 
pid <73>: 
expressionAtom := constantNum 
Condition<332>, REDUCE Production by 'AND': 
pid <73>: 
expressionAtom := constantNum 
Condition<332>, REDUCE Production by 'OR': 
pid <73>: 
expressionAtom := constantNum 
Condition<332From Condition <>, REDUCE Production by 'ORDERBY': 
333pid <> get package:73
>: 
expressionAtom := constantNum positiveNum
 := 'NUMBER_CONSTANT' (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, ORDERBY, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := 'NUMBER_CONSTANT' (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, ORDERBY, }
===============================================================================

From Condition <327> get package:
expressionAtom := columnName (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, ORDERBY, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := columnName (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, ORDERBY, }
===============================================================================

SHIFT <333> by 'NUMBER_CONSTANT' to <334>
Condition<334>, REDUCE Production by '==': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<334>, REDUCE Production by '*': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<334>, REDUCE Production by '>': 
pid <79>: 
positiveNum SHIFT <:= 327'NUMBER_CONSTANT'> by  columnName to <335
>.
Condition<334>, REDUCE Production by '<': 
pid <79>: 
positiveNum Condition<:= 335'NUMBER_CONSTANT'>, REDUCE Production by ' ==': 

Condition<334pid <>, REDUCE Production by '75/>: 
': expressionAtom
 pid <79:= >: 
columnNamepositiveNum  := 
'NUMBER_CONSTANT'Condition<335 >, REDUCE Production by '
*': 
Condition<pid <75334>: 
>, REDUCE Production by 'expressionAtom<= ': := 
columnNamepid < 79
>: 
positiveNumCondition< 335:= >, REDUCE Production by '>': 'NUMBER_CONSTANT'
 
pid <75Condition<334>: 
>, REDUCE Production by 'expressionAtom% ': := 
columnNamepid < 79
>: 
positiveNum Condition<:= 335'NUMBER_CONSTANT'>, REDUCE Production by ' <': 

Condition<334pid <>, REDUCE Production by '75>=>: 
': expressionAtom
 pid <79:= >: 
columnNamepositiveNum  := 
'NUMBER_CONSTANT'Condition< 335
>, REDUCE Production by '/': Condition<334
>, REDUCE Production by 'pid <75!=>: 
': expressionAtom 
:= columnNamepid < 79
>: 
positiveNumCondition< 335:= >, REDUCE Production by '<=': 'NUMBER_CONSTANT'
 pid <75
>: 
expressionAtomCondition< 334:= >, REDUCE Production by 'columnName+ ': 

Condition<pid <33579>, REDUCE Production by '>: 
%positiveNum':  
:= pid <75'NUMBER_CONSTANT'>: 
 expressionAtom 
:= Condition<columnName334 >, REDUCE Production by '
-': Condition<
335pid <79>, REDUCE Production by '>: 
>=': positiveNum
 pid <:= 75'NUMBER_CONSTANT'>: 
 expressionAtom 
:= columnName Condition<334
>, REDUCE Production by '$eof$': Condition<
335pid <79>, REDUCE Production by '>: 
!=': 
positiveNumpid < 75:= >: 
'NUMBER_CONSTANT'expressionAtom  := 
columnNameCondition< 334
>, REDUCE Production by 'AND': 
Condition<pid <33579>, REDUCE Production by '>: 
+': positiveNum
 := pid <75'NUMBER_CONSTANT'>: 
 expressionAtom 
:= Condition<columnName334 >, REDUCE Production by '
OR': Condition<335
>, REDUCE Production by 'pid <79->: 
': positiveNum 
:= 'NUMBER_CONSTANT'pid <75 >: 

expressionAtom Condition<:= 334columnName>, REDUCE Production by ' ORDERBY': 

Condition<pid <33579>, REDUCE Production by '>: 
$eof$positiveNum':  
:= 'NUMBER_CONSTANT'pid < 75
>: 
expressionAtom := columnName 
Condition<335>, REDUCE Production by 'AND': 
pid <75>: 
expressionAtom := columnName 
Condition<335>, REDUCE Production by 'OR': 
pid <75>: 
expressionAtom := columnName 
Condition<335>, REDUCE Production by 'ORDERBY': 
pid <75>: 
expressionAtom := columnName 
From Condition <333> get package:
constantNum := '-' positiveNum (^), { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, ORDERBY, }
-------------------------------------------------------------------------------

After tracing, got package:
constantNum := '-' positiveNum (^), { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, ORDERBY, }
From Condition <===============================================================================
327
> get package:
positiveNum := 'NUMBER_CONSTANT' (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, ORDERBY, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := 'NUMBER_CONSTANT' (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, ORDERBY, }
===============================================================================

SHIFT <333> by positiveNum to <336>.
Condition<336>, REDUCE Production by '==': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<336>, REDUCE Production by '>': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<336>, REDUCE Production by '*': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<336>, REDUCE Production by '<': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<336>, REDUCE Production by '<=': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<336>, REDUCE Production by '/': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<336>, REDUCE Production by '>=': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<336>, REDUCE Production by '%': 
pid <77SHIFT <>: 
327constantNum> by ' := NUMBER_CONSTANT' to <'-'334 >positiveNum 

This condition already existed.Condition<336
>, REDUCE Production by '!=': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<336>, REDUCE Production by '+': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<336>, REDUCE Production by '-': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<336>, REDUCE Production by '$eof$': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<336>, REDUCE Production by 'AND': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<336>, REDUCE Production by 'OR': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<336>, REDUCE Production by 'ORDERBY': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<326>, REDUCE Production by '==': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Already existed SHIFT by symbol'*' :
<33>
Try to set it to: REDUCE to:
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
From Condition <326> get package:
Reset Action[mathOperator326 ][':= *'] to REDUCE:
'/'pid < 76(^)>: 
, { expressionAtom := STR_LITERALexpressionAtom,  IDmathOperator,  -expressionAtom,  NUMBER_CONSTANT
, }Condition<326
>, REDUCE Production by '------------------------------------------------------------------------------->': 


pid <76After tracing, got package:>: 

expressionAtom mathOperator:=  expressionAtom:=  mathOperator '/'expressionAtom  
(^), { Condition<STR_LITERAL326, >, REDUCE Production by 'ID<, ': -
, pid <NUMBER_CONSTANT76, >: 
}expressionAtom 
:= ===============================================================================expressionAtom
 
mathOperator expressionAtom 
Condition<326>, REDUCE Production by '/': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Condition<326>, REDUCE Production by '<=': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Already existed SHIFT by symbol'%' :
<26>
Try to set it to: REDUCE to:
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Already existed REDUCE by symbol '/': 
Reset Action[pid <32676]['>: 
%'] to REDUCE:expressionAtom 
:= pid <76expressionAtom>: 
 expressionAtommathOperator  := expressionAtom expressionAtom 
mathOperatorTry to set it to: SHIFT to < 40expressionAtom> 

Condition<326>, REDUCE Production by '>=': 
Set SHIFT fail in: from condition <pid <32676> to condition <>: 
40expressionAtom>. 
:= expressionAtomThis condition already existed. 
mathOperator expressionAtom 
Condition<326>, REDUCE Production by '!=': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Condition<326>, REDUCE Production by '+': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Already existed SHIFT by symbol'-' :
<34>
Try to set it to: REDUCE to:
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
From Condition <326> get package:
Reset Action[326mathOperator][' -:= '] to REDUCE:
'+'pid <76 >: 
expressionAtom (^):= , { expressionAtom STR_LITERALmathOperator,  IDexpressionAtom,  -
, NUMBER_CONSTANTCondition<, 326}>, REDUCE Production by '$eof$
': -------------------------------------------------------------------------------

pid <
76After tracing, got package:>: 

expressionAtom mathOperator:=  := expressionAtom mathOperator'+'  expressionAtom (^)
, { Condition<STR_LITERAL326, >, REDUCE Production by 'IDAND, ': -
, NUMBER_CONSTANTpid <76, >: 
}expressionAtom 
:= expressionAtom=============================================================================== 
mathOperator 
expressionAtom 
Condition<326>, REDUCE Production by 'OR': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Condition<326>, REDUCE Production by 'ORDERBY': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Already existed REDUCE by symbol '+': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Try to set it to: SHIFT to <41>
Set SHIFT fail in: from condition <326> to condition <41>.
This condition already existed.
From Condition <320> get package:
constantNum := '-' (^)positiveNum , { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, ORDERBY, }
From Condition <-------------------------------------------------------------------------------
320
> get package:
expressionAtom := constantNum (^), { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, ORDERBY, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := constantNum (^), { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, ORDERBY, }
===============================================================================

SHIFT <320> by constantNum to <337>.
After tracing, got package:
positiveNum := Condition<337(^)>, REDUCE Production by '==': 'NUMBER_CONSTANT'
 , { pid <73==>: 
, expressionAtom> , := *, constantNum< , 
<=, Condition</337, >, REDUCE Production by '>=>, ': %
, !=pid <73, >: 
+expressionAtom,  -:= , constantNum$eof$ , 
AND, Condition<OR337, >, REDUCE Production by 'ORDERBY*, ': }

pid <73constantNum>: 
 expressionAtom:=  := '-'constantNum  (^)
positiveNum Condition<337, { >, REDUCE Production by '<==': , 
*pid <73, >: 
>expressionAtom,  <:= , constantNum/ , 
<=, Condition<337%>, REDUCE Production by ', <=>=': , 
!=pid <73, >: 
+expressionAtom,  -:= , constantNum$eof$ , 
AND, Condition<OR337, >, REDUCE Production by 'ORDERBY/, ': }

pid <===============================================================================73
>: 
expressionAtom
 := constantNum 
Condition<337>, REDUCE Production by '>=': 
pid <73>: 
expressionAtom := constantNum 
Condition<337>, REDUCE Production by '%': 
pid <73>: 
expressionAtom := constantNum 
Condition<337>, REDUCE Production by '!=': 
pid <73>: 
expressionAtom := constantNum 
Condition<337>, REDUCE Production by '+': 
pid <73>: 
expressionAtom := constantNum 
Condition<337>, REDUCE Production by '-': 
pid <73>: 
expressionAtom := constantNum 
Condition<337>, REDUCE Production by '$eof$': 
pid <73>: 
expressionAtom := constantNum 
Condition<337>, REDUCE Production by 'AND': 
pid <73>: 
expressionAtom := constantNum 
Condition<337>, REDUCE Production by 'OR': 
pid <73>: 
expressionAtom := constantNum 
Condition<337>, REDUCE Production by 'ORDERBY': 
pid <73>: 
expressionAtom := constantNum 
SHIFT <320> by '-' to <338>
From Condition <338> get package:
positiveNum := 'NUMBER_CONSTANT' (^), { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, ORDERBY, }
-------------------------------------------------------------------------------

After tracing, got package:
From Condition <positiveNum := 320'NUMBER_CONSTANT'> get package: 
(^), { ==, expressionAtom> , := *, <columnName,  <=, /(^), , { >=, %==, , !=>, , +*, , -<, , $eof$<=, , AND/, , OR>=, , ORDERBY%, , }!=
, +===============================================================================, 
-
, $eof$, AND, OR, ORDERBY, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := columnName (^), { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, ORDERBY, }
===============================================================================

SHIFT <338> by 'NUMBER_CONSTANT' to <339>
Condition<339>, REDUCE Production by '==': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<339>, REDUCE Production by '>': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<339>, REDUCE Production by '*': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<339>, REDUCE Production by '<': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<339>, REDUCE Production by '<=': 
SHIFT <pid <79320>: 
> by positiveNum columnName:=  to <340'NUMBER_CONSTANT'>. 

Condition<339>, REDUCE Production by '/': 
Condition<pid <34079>, REDUCE Production by '>: 
==positiveNum':  
:= 'NUMBER_CONSTANT'pid < 75
>: 
Condition<expressionAtom339 >, REDUCE Production by ':= >=': columnName
 pid <79
>: 
positiveNumCondition<340 >, REDUCE Production by ':= >': 
'NUMBER_CONSTANT'pid <75 >: 

expressionAtom Condition<339:= >, REDUCE Production by 'columnName% ': 

Condition<pid <34079>, REDUCE Production by '>: 
*positiveNum':  
:= pid <75'NUMBER_CONSTANT'>: 
 expressionAtom
 := Condition<339columnName>, REDUCE Production by ' !=': 

Condition<340pid <>, REDUCE Production by '79<>: 
': positiveNum 
:= pid <75'NUMBER_CONSTANT'>: 
 expressionAtom 
:= Condition<columnName339 >, REDUCE Production by '
+': Condition<
340>, REDUCE Production by 'pid <79<=>: 
': positiveNum 
:= pid <75'NUMBER_CONSTANT'>: 
 expressionAtom 
:= Condition<columnName339 >, REDUCE Production by '
-': 
Condition<pid <34079>, REDUCE Production by '>: 
/positiveNum':  := 
'NUMBER_CONSTANT'pid <75 >: 

expressionAtom := Condition<339columnName>, REDUCE Production by ' $eof$': 

Condition<pid <34079>, REDUCE Production by '>: 
>=positiveNum':  
:= 'NUMBER_CONSTANT'pid <75 >: 

expressionAtom Condition<:= 339columnName>, REDUCE Production by ' AND': 

Condition<pid <34079>, REDUCE Production by '>: 
%positiveNum':  := 
'NUMBER_CONSTANT'pid < 75
>: 
expressionAtomCondition<339 >, REDUCE Production by ':= OR': columnName
 pid <79
>: 
positiveNum Condition<340:= >, REDUCE Production by '!=': 'NUMBER_CONSTANT'
 pid <75
>: 
expressionAtomCondition< 339:= >, REDUCE Production by 'columnNameORDERBY ': 

pid <79Condition<340>: 
>, REDUCE Production by 'positiveNum+ ': := 
'NUMBER_CONSTANT'pid <75 >: 

expressionAtom := columnName 
Condition<340>, REDUCE Production by '-': 
pid <75>: 
expressionAtom := columnName 
Condition<340>, REDUCE Production by '$eof$': 
pid <75>: 
expressionAtom := columnName 
Condition<340>, REDUCE Production by 'AND': 
pid <75>: 
expressionAtom := columnName 
Condition<340>, REDUCE Production by 'OR': 
pid <75>: 
expressionAtom := columnName 
From Condition <Condition<340338>, REDUCE Production by '> get package:ORDERBY': 

constantNumpid < 75:= >: 
expressionAtom := columnName'-'  
positiveNum (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, ORDERBY, }
-------------------------------------------------------------------------------

After tracing, got package:
constantNum := '-' positiveNum (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, ORDERBY, }
===============================================================================

From Condition <320> get package:
positiveNum := 'NUMBER_CONSTANT' (^), { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, ORDERBY, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := 'NUMBER_CONSTANT' (^), { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, ORDERBY, }
===============================================================================

SHIFT <338> by positiveNum to <341>.
Condition<341>, REDUCE Production by '==': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<341>, REDUCE Production by '*': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<341>, REDUCE Production by '>': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<341>, REDUCE Production by '<': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<341>, REDUCE Production by '/': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<341>, REDUCE Production by '<=': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<341>, REDUCE Production by '%': 
pid <77SHIFT <>: 
320constantNum> by ' NUMBER_CONSTANT:= ' to <339'-'> 
positiveNumThis condition already existed. 

Condition<341>, REDUCE Production by '>=': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<341>, REDUCE Production by '!=': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<341>, REDUCE Production by '+': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<341>, REDUCE Production by '-': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<341>, REDUCE Production by '$eof$': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<341>, REDUCE Production by 'AND': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<341>, REDUCE Production by 'OR': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<341>, REDUCE Production by 'ORDERBY': 
pid <77>: 
constantNum := '-' positiveNum 
From Condition <319> get package:
mathOperator := '-' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '-' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

From Condition <319> get package:
comparisonOperator := '!=' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
comparisonOperator := '!=' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <319> by '-' to <34>
This condition already existed.
SHIFT <319> by '!=' to <342>
Condition<342>, REDUCE Production by 'STR_LITERAL': 
pid <85>: 
comparisonOperator := '!=' 
Condition<342>, REDUCE Production by 'ID': 
pid <85>: 
comparisonOperator := '!=' 
Condition<342>, REDUCE Production by '-': 
pid <85>: 
comparisonOperator := '!=' 
Condition<342>, REDUCE Production by 'NUMBER_CONSTANT': 
pid <85>: 
comparisonOperator := '!=' 
From Condition <319> get package:
mathOperator := '/' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '/' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

From Condition <319> get package:
mathOperator := '+' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '+' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <319> by '/' to <40>
This condition already existed.
SHIFT <319> by '+' to <41>
This condition already existed.
From Condition <319> get package:
predicate := expressionAtom comparisonOperator (^)expressionAtom , { $eof$, AND, OR, ORDERBY, }
-------------------------------------------------------------------------------

From Condition <319> get package:
comparisonOperator := '>=' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
comparisonOperator := '>=' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <319> by '>=' to <343>
Condition<343>, REDUCE Production by 'STR_LITERAL': 
pid <84>: 
comparisonOperator := '>=' 
Condition<343>, REDUCE Production by 'ID': 
pid <84>: 
comparisonOperator := '>=' 
Condition<343>, REDUCE Production by '-': 
pid <84>: 
comparisonOperator := '>=' 
Condition<343>, REDUCE Production by 'NUMBER_CONSTANT': 
pid <84>: 
comparisonOperator := '>=' 
From Condition <319> get package:
comparisonOperator := '<=' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
comparisonOperator := '<=' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <319> by '<=' to <344>
Condition<344>, REDUCE Production by 'STR_LITERAL': 
pid <83>: 
comparisonOperator := '<=' 
Condition<344>, REDUCE Production by 'ID': 
pid <83>: 
comparisonOperator := '<=' 
Condition<344>, REDUCE Production by '-': 
pid <83>: 
comparisonOperator := '<=' 
Condition<344>, REDUCE Production by 'NUMBER_CONSTANT': 
pid <83>: 
comparisonOperator := '<=' 
From Condition <319> get package:
comparisonOperator := '<' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
comparisonOperator := '<' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <319> by '<' to <345>
Condition<345>, REDUCE Production by 'STR_LITERAL': 
pid <82>: 
comparisonOperator := '<' 
Condition<345>, REDUCE Production by 'ID': 
pid <82>: 
comparisonOperator := '<' 
Condition<345>, REDUCE Production by '-': 
pid <82>: 
comparisonOperator := '<' 
Condition<345>, REDUCE Production by 'NUMBER_CONSTANT': 
pid <82>: 
comparisonOperator := '<' 
From Condition <319> get package:
comparisonOperator := '>' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
comparisonOperator := '>' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <319> by '>' to <346>
Condition<346>, REDUCE Production by 'STR_LITERAL': 
pid <81>: 
comparisonOperator := '>' 
Condition<346>, REDUCE Production by 'ID': 
pid <81>: 
comparisonOperator := '>' 
Condition<346>, REDUCE Production by '-': 
pid <81>: 
comparisonOperator := '>' 
Condition<346>, REDUCE Production by 'NUMBER_CONSTANT': 
pid <81>: 
comparisonOperator := '>' 
From Condition <319> get package:
comparisonOperator := '==' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
After tracing, got package:comparisonOperator := 
'==' columnName (^):= , { STR_LITERAL(^), ID'ID',  -, NUMBER_CONSTANT'.',  }
'ID'=============================================================================== 
, { 
$eof$, AND, OR, ORDERBY, *, /, %, +, -, }
constantNum := (^)'-' positiveNum , { $eof$, AND, OR, ORDERBY, *, /, %, +, -, }
expressionAtom := (^)constantNum , { AND, $eof$, OR, *, ORDERBY, /, %, +, -, }
expressionAtom := (^)columnName , { AND, $eof$, OR, *, ORDERBY, /, %, +, -, }
predicate := expressionAtom comparisonOperator (^)expressionAtom , { $eof$, AND, OR, ORDERBY, }
SHIFT <columnName319 > by ':= ==' to <347(^)>'ID'
 , { $eof$, AND, OR, ORDERBY, *, /, %, +, -, }
Condition<constantNum347 >, REDUCE Production by ':= STR_LITERAL': (^)
positiveNum pid <80, { >: 
$eof$comparisonOperator,  AND:= , OR'==',  ORDERBY, 
*, Condition</347, >, REDUCE Production by '%ID, ': +
, pid <-80, >: 
}comparisonOperator 
:= expressionAtom '==':=  
(^)Condition<347'STR_LITERAL'>, REDUCE Production by ' -': 
, { pid <80AND>: 
, comparisonOperator$eof$ , := OR, '=='* , 
ORDERBY, Condition<347/>, REDUCE Production by ', NUMBER_CONSTANT%': , 
+pid <, 80->: 
, comparisonOperator} := 
'=='expressionAtom  := 
(^)expressionAtom mathOperator expressionAtom , { AND, $eof$, OR, *, ORDERBY, /, %, +, -, }
positiveNum := (^)'NUMBER_CONSTANT' , { AND, $eof$, OR, *, ORDERBY, /, %, +, -, }
===============================================================================

SHIFT <319> by comparisonOperator to <348>.
From Condition <348> get package:
columnName := 'ID' (^)'.' 'ID' , { $eof$, AND, OR, ORDERBY, *, /, %, +, -, }
columnName := 'ID' (^), { $eof$, AND, OR, ORDERBY, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID' (^)'.' 'ID' , { $eof$, AND, OR, ORDERBY, *, /, %, +, -, }
columnName := 'ID' (^), { $eof$, AND, OR, ORDERBY, *, /, %, +, -, }
===============================================================================

SHIFT <348> by 'ID' to <349>
From Condition <349> get package:
columnName := 'ID' '.' (^)'ID' , { $eof$, AND, OR, ORDERBY, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID' '.' (^)'ID' , { $eof$, AND, OR, ORDERBY, *, /, %, +, -, }
===============================================================================

SHIFT <349> by '.' to <350>
From Condition <350> get package:
columnName := 'ID' '.' 'ID' (^), { $eof$, AND, OR, ORDERBY, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID' '.' 'ID' (^), { $eof$, AND, OR, ORDERBY, *, /, %, +, -, }
===============================================================================

SHIFT <350> by 'ID' to <351>
Condition<351>, REDUCE Production by '$eof$': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<351>, REDUCE Production by 'AND': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<351>, REDUCE Production by 'OR': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<351>, REDUCE Production by 'ORDERBY': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<351>, REDUCE Production by '*': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<351>, REDUCE Production by '/': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<351>, REDUCE Production by '%': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<351>, REDUCE Production by '+': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<351>, REDUCE Production by '-': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<349>, REDUCE Production by '$eof$': 
pid <68>: 
columnName := 'ID' 
Condition<349>, REDUCE Production by 'AND': 
pid <68>: 
columnName := 'ID' 
Condition<349>, REDUCE Production by 'OR': 
pid <68>: 
columnName := 'ID' 
Condition<349>, REDUCE Production by 'ORDERBY': 
pid <68>: 
columnName := 'ID' 
Condition<349>, REDUCE Production by '*': 
pid <68>: 
columnName := 'ID' 
Condition<349>, REDUCE Production by '/': 
pid <68>: 
columnName := 'ID' 
Condition<349>, REDUCE Production by '%': 
pid <68>: 
columnName := 'ID' 
Condition<349>, REDUCE Production by '+': 
pid <68>: 
columnName := 'ID' 
Condition<349>, REDUCE Production by '-': 
pid <68>: 
columnName := 'ID' 
From Condition <348> get package:
constantNum := '-' (^)positiveNum , { $eof$, AND, OR, ORDERBY, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := (^)'NUMBER_CONSTANT' , { AND, $eof$, OR, *, ORDERBY, /, %, +, -, }
constantNum := '-' (^)positiveNum , { $eof$, AND, OR, ORDERBY, *, /, %, +, -, }
===============================================================================

SHIFT <348> by '-' to <352>
From Condition <352> get package:
positiveNum := 'NUMBER_CONSTANT' (^), { AND, $eof$, OR, *, ORDERBY, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := 'NUMBER_CONSTANT' (^), { AND, $eof$, OR, *, ORDERBY, /, %, +, -, }
===============================================================================

SHIFT <352> by 'NUMBER_CONSTANT' to <353>
Condition<353>, REDUCE Production by 'AND': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<353>, REDUCE Production by '$eof$': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<353>, REDUCE Production by 'OR': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<353>, REDUCE Production by '*': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<353>, REDUCE Production by 'ORDERBY': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<353>, REDUCE Production by '/': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<353>, REDUCE Production by '%': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<353>, REDUCE Production by '+': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<353>, REDUCE Production by '-': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
From Condition <352> get package:
constantNum := '-' positiveNum (^), { $eof$, AND, OR, ORDERBY, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
constantNum := '-' positiveNum (^), { $eof$, AND, OR, ORDERBY, *, /, %, +, -, }
===============================================================================

SHIFT <352> by positiveNum to <354>.
Condition<354>, REDUCE Production by '$eof$': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<354>, REDUCE Production by 'AND': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<354>, REDUCE Production by 'OR': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<354>, REDUCE Production by 'ORDERBY': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<354>, REDUCE Production by '*': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<354>, REDUCE Production by '/': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<354>, REDUCE Production by '%': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<354>, REDUCE Production by '+': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<354>, REDUCE Production by '-': 
pid <77>: 
constantNum := '-' positiveNum 
From Condition <348> get package:
expressionAtom := constantNum (^), { AND, $eof$, OR, *, ORDERBY, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := constantNum (^), { AND, $eof$, OR, *, ORDERBY, /, %, +, -, }
===============================================================================

SHIFT <348> by constantNum to <355>.
Condition<355>, REDUCE Production by 'AND': 
pid <73>: 
expressionAtom := constantNum 
Condition<355>, REDUCE Production by '$eof$': 
pid <73>: 
expressionAtom := constantNum 
Condition<355>, REDUCE Production by 'OR': 
pid <73>: 
expressionAtom := constantNum 
Condition<355>, REDUCE Production by '*': 
pid <73>: 
expressionAtom := constantNum 
Condition<355>, REDUCE Production by 'ORDERBY': 
pid <73>: 
expressionAtom := constantNum 
Condition<355>, REDUCE Production by '/': 
pid <73>: 
expressionAtom := constantNum 
Condition<355>, REDUCE Production by '%': 
pid <73>: 
expressionAtom := constantNum 
Condition<355>, REDUCE Production by '+': 
pid <73>: 
expressionAtom := constantNum 
Condition<355>, REDUCE Production by '-': 
pid <73>: 
expressionAtom := constantNum 
From Condition <348> get package:
expressionAtom := columnName (^), { AND, $eof$, OR, *, ORDERBY, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := columnName (^), { AND, $eof$, OR, *, ORDERBY, /, %, +, -, }
===============================================================================

SHIFT <348> by columnName to <356>.
Condition<356>, REDUCE Production by 'AND': 
pid <75>: 
expressionAtom := columnName 
Condition<356>, REDUCE Production by '$eof$': 
pid <75>: 
expressionAtom := columnName 
Condition<356>, REDUCE Production by 'OR': 
pid <75>: 
expressionAtom := columnName 
Condition<356>, REDUCE Production by '*': 
pid <75>: 
expressionAtom := columnName 
Condition<356>, REDUCE Production by 'ORDERBY': 
pid <75>: 
expressionAtom := columnName 
Condition<356>, REDUCE Production by '/': 
pid <75>: 
expressionAtom := columnName 
Condition<356>, REDUCE Production by '%': 
pid <75>: 
expressionAtom := columnName 
Condition<356>, REDUCE Production by '+': 
pid <75>: 
expressionAtom := columnName 
Condition<356>, REDUCE Production by '-': 
pid <75>: 
expressionAtom := columnName 
From Condition <348> get package:
predicate := expressionAtom comparisonOperator expressionAtom (^), { $eof$, AND, OR, ORDERBY, }
expressionAtom := expressionAtom (^)mathOperator expressionAtom , { AND, $eof$, OR, *, ORDERBY, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := (^)'/' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'+' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
predicate := expressionAtom comparisonOperator expressionAtom (^), { $eof$, AND, OR, ORDERBY, }
mathOperator := (^)'*' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'%' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'-' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
expressionAtom := expressionAtom (^)mathOperator expressionAtom , { AND, $eof$, OR, *, ORDERBY, /, %, +, -, }
===============================================================================

SHIFT <348> by expressionAtom to <357>.
From Condition <357> get package:
mathOperator := '/' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '/' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <357> by '/' to <40>
This condition already existed.
From Condition <357> get package:
mathOperator := '+' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '+' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <357> by '+' to <41>
This condition already existed.
Condition<357>, REDUCE Production by '$eof$': 
pid <71>: 
predicate := expressionAtom comparisonOperator expressionAtom 
Condition<357>, REDUCE Production by 'AND': 
pid <71>: 
predicate := expressionAtom comparisonOperator expressionAtom 
Condition<357>, REDUCE Production by 'OR': 
pid <71>: 
predicate := expressionAtom comparisonOperator expressionAtom 
Condition<357>, REDUCE Production by 'ORDERBY': 
pid <71>: 
predicate := expressionAtom comparisonOperator expressionAtom 
From Condition <357> get package:
mathOperator := '*' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '*' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <357> by '*' to <33>
This condition already existed.
From Condition <357> get package:
mathOperator := '%' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '%' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <357> by '%' to <26>
This condition already existed.
From Condition <357> get package:
mathOperator := '-' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '-' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <357> by '-' to <34>
This condition already existed.
From Condition <357> get package:
expressionAtom := expressionAtom mathOperator (^)expressionAtom , { AND, $eof$, OR, *, ORDERBY, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := (^)'ID' , { AND, $eof$, OR, *, ORDERBY, /, %, +, -, }
constantNum := (^)positiveNum , { AND, $eof$, OR, *, ORDERBY, /, %, +, -, }
expressionAtom := (^)'STR_LITERAL' , { $eof$, AND, OR, ORDERBY, *, /, %, +, -, }
expressionAtom := expressionAtom mathOperator (^)expressionAtom , { AND, $eof$, OR, *, ORDERBY, /, %, +, -, }
expressionAtom := (^)expressionAtom mathOperator expressionAtom , { $eof$, AND, OR, ORDERBY, *, /, %, +, -, }
columnName := (^)'ID' '.' 'ID' , { AND, $eof$, OR, *, ORDERBY, /, %, +, -, }
constantNum := (^)'-' positiveNum , { AND, $eof$, OR, *, ORDERBY, /, %, +, -, }
expressionAtom := (^)constantNum , { $eof$, AND, OR, ORDERBY, *, /, %, +, -, }
expressionAtom := (^)columnName , { $eof$, AND, OR, ORDERBY, *, /, %, +, -, }
positiveNum := (^)'NUMBER_CONSTANT' , { $eof$, AND, OR, ORDERBY, *, /, %, +, -, }
===============================================================================

SHIFT <357> by mathOperator to <358>.
From Condition <358> get package:
columnName := 'ID' (^), { AND, $eof$, OR, *, ORDERBY, /, %, +, -, }
columnName := 'ID' (^)'.' 'ID' , { AND, $eof$, OR, *, ORDERBY, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID' (^), { AND, $eof$, OR, *, ORDERBY, /, %, +, -, }
columnName := 'ID' (^)'.' 'ID' , { AND, $eof$, OR, *, ORDERBY, /, %, +, -, }
===============================================================================

SHIFT <358> by 'ID' to <359>
Condition<359>, REDUCE Production by 'AND': 
pid <68>: 
columnName := 'ID' 
Condition<359>, REDUCE Production by '$eof$': 
pid <68>: 
columnName := 'ID' 
Condition<359>, REDUCE Production by 'OR': 
pid <68>: 
columnName := 'ID' 
Condition<359>, REDUCE Production by '*': 
pid <68>: 
columnName := 'ID' 
Condition<359>, REDUCE Production by 'ORDERBY': 
pid <68>: 
columnName := 'ID' 
Condition<359>, REDUCE Production by '/': 
pid <68>: 
columnName := 'ID' 
Condition<359>, REDUCE Production by '%': 
pid <68>: 
columnName := 'ID' 
Condition<359>, REDUCE Production by '+': 
pid <68>: 
columnName := 'ID' 
Condition<359>, REDUCE Production by '-': 
pid <68>: 
columnName := 'ID' 
From Condition <359> get package:
columnName := 'ID' '.' (^)'ID' , { AND, $eof$, OR, *, ORDERBY, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID' '.' (^)'ID' , { AND, $eof$, OR, *, ORDERBY, /, %, +, -, }
===============================================================================

SHIFT <359> by '.' to <360>
From Condition <360> get package:
columnName := 'ID' '.' 'ID' (^), { AND, $eof$, OR, *, ORDERBY, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID' '.' 'ID' (^), { AND, $eof$, OR, *, ORDERBY, /, %, +, -, }
===============================================================================

SHIFT <360> by 'ID' to <361>
Condition<361>, REDUCE Production by 'AND': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<361>, REDUCE Production by '$eof$': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<361>, REDUCE Production by 'OR': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<361>, REDUCE Production by '*': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<361>, REDUCE Production by 'ORDERBY': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<361>, REDUCE Production by '/': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<361>, REDUCE Production by '%': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<361>, REDUCE Production by '+': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<361>, REDUCE Production by '-': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
From Condition <358> get package:
constantNum := positiveNum (^), { AND, $eof$, OR, *, ORDERBY, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
constantNum := positiveNum (^), { AND, $eof$, OR, *, ORDERBY, /, %, +, -, }
===============================================================================

SHIFT <358> by positiveNum to <362>.
Condition<362>, REDUCE Production by 'AND': 
pid <78>: 
constantNum := positiveNum 
Condition<362>, REDUCE Production by '$eof$': 
pid <78>: 
constantNum := positiveNum 
Condition<362>, REDUCE Production by 'OR': 
pid <78>: 
constantNum := positiveNum 
Condition<362>, REDUCE Production by '*': 
pid <78>: 
constantNum := positiveNum 
Condition<362>, REDUCE Production by 'ORDERBY': 
pid <78>: 
constantNum := positiveNum 
Condition<362>, REDUCE Production by '/': 
pid <78>: 
constantNum := positiveNum 
Condition<362>, REDUCE Production by '%': 
pid <78>: 
constantNum := positiveNum 
Condition<362>, REDUCE Production by '+': 
pid <78>: 
constantNum := positiveNum 
Condition<362>, REDUCE Production by '-': 
pid <78>: 
constantNum := positiveNum 
From Condition <358> get package:
expressionAtom := 'STR_LITERAL' (^), { $eof$, AND, OR, ORDERBY, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := 'STR_LITERAL' (^), { $eof$, AND, OR, ORDERBY, *, /, %, +, -, }
===============================================================================

SHIFT <358> by 'STR_LITERAL' to <363>
Condition<363>, REDUCE Production by '$eof$': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<363>, REDUCE Production by 'AND': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<363>, REDUCE Production by 'OR': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<363>, REDUCE Production by 'ORDERBY': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<363>, REDUCE Production by '*': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<363>, REDUCE Production by '/': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<363>, REDUCE Production by '%': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<363>, REDUCE Production by '+': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<363>, REDUCE Production by '-': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
From Condition <358> get package:
expressionAtom := expressionAtom (^)mathOperator expressionAtom , { $eof$, AND, OR, ORDERBY, *, /, %, +, -, }
expressionAtom := expressionAtom mathOperator expressionAtom (^), { AND, $eof$, OR, *, ORDERBY, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := (^)'*' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'%' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'-' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
expressionAtom := expressionAtom (^)mathOperator expressionAtom , { $eof$, AND, OR, ORDERBY, *, /, %, +, -, }
expressionAtom := expressionAtom mathOperator expressionAtom (^), { AND, $eof$, OR, *, ORDERBY, /, %, +, -, }
mathOperator := (^)'/' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'+' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <358> by expressionAtom to <364>.
From Condition <364> get package:
mathOperator := '*' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '*' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <364> by '*' to <33>
This condition already existed.
From Condition <364> get package:
mathOperator := '%' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '%' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <364> by '%' to <26>
This condition already existed.
From Condition <364> get package:
mathOperator := '-' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '-' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <364> by '-' to <34>
This condition already existed.
From Condition <364> get package:
expressionAtom := expressionAtom mathOperator (^)expressionAtom , { $eof$, AND, OR, ORDERBY, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := (^)'ID' , { $eof$, AND, OR, ORDERBY, *, /, %, +, -, }
constantNum := (^)positiveNum , { $eof$, AND, OR, ORDERBY, *, /, %, +, -, }
expressionAtom := (^)'STR_LITERAL' , { AND, $eof$, OR, *, ORDERBY, /, %, +, -, }
expressionAtom := expressionAtom mathOperator (^)expressionAtom , { $eof$, AND, OR, ORDERBY, *, /, %, +, -, }
expressionAtom := (^)expressionAtom mathOperator expressionAtom , { AND, $eof$, OR, *, ORDERBY, /, %, +, -, }
columnName := (^)'ID' '.' 'ID' , { $eof$, AND, OR, ORDERBY, *, /, %, +, -, }
constantNum := (^)'-' positiveNum , { $eof$, AND, OR, ORDERBY, *, /, %, +, -, }
expressionAtom := (^)constantNum , { AND, $eof$, OR, *, ORDERBY, /, %, +, -, }
expressionAtom := (^)columnName , { AND, $eof$, OR, *, ORDERBY, /, %, +, -, }
positiveNum := (^)'NUMBER_CONSTANT' , { AND, $eof$, OR, *, ORDERBY, /, %, +, -, }
===============================================================================

SHIFT <364> by mathOperator to <365>.
From Condition <365> get package:
columnName := 'ID' (^), { $eof$, AND, OR, ORDERBY, *, /, %, +, -, }
columnName := 'ID' (^)'.' 'ID' , { $eof$, AND, OR, ORDERBY, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID' (^), { $eof$, AND, OR, ORDERBY, *, /, %, +, -, }
columnName := 'ID' (^)'.' 'ID' , { $eof$, AND, OR, ORDERBY, *, /, %, +, -, }
===============================================================================

SHIFT <365> by 'ID' to <366>
Condition<366>, REDUCE Production by '$eof$': 
pid <68>: 
columnName := 'ID' 
Condition<366>, REDUCE Production by 'AND': 
pid <68>: 
columnName := 'ID' 
Condition<366>, REDUCE Production by 'OR': 
pid <68>: 
columnName := 'ID' 
Condition<366>, REDUCE Production by 'ORDERBY': 
pid <68>: 
columnName := 'ID' 
Condition<366>, REDUCE Production by '*': 
pid <68>: 
columnName := 'ID' 
Condition<366>, REDUCE Production by '/': 
pid <68>: 
columnName := 'ID' 
Condition<366>, REDUCE Production by '%': 
pid <68>: 
columnName := 'ID' 
Condition<366>, REDUCE Production by '+': 
pid <68>: 
columnName := 'ID' 
Condition<366>, REDUCE Production by '-': 
pid <68>: 
columnName := 'ID' 
From Condition <366> get package:
columnName := 'ID' '.' (^)'ID' , { $eof$, AND, OR, ORDERBY, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID' '.' (^)'ID' , { $eof$, AND, OR, ORDERBY, *, /, %, +, -, }
===============================================================================

SHIFT <366> by '.' to <350>
This condition already existed.
From Condition <365> get package:
constantNum := positiveNum (^), { $eof$, AND, OR, ORDERBY, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
constantNum := positiveNum (^), { $eof$, AND, OR, ORDERBY, *, /, %, +, -, }
===============================================================================

SHIFT <365> by positiveNum to <367>.
Condition<367>, REDUCE Production by '$eof$': 
pid <78>: 
constantNum := positiveNum 
Condition<367>, REDUCE Production by 'AND': 
pid <78>: 
constantNum := positiveNum 
Condition<367>, REDUCE Production by 'OR': 
pid <78>: 
constantNum := positiveNum 
Condition<367>, REDUCE Production by 'ORDERBY': 
pid <78>: 
constantNum := positiveNum 
Condition<367>, REDUCE Production by '*': 
pid <78>: 
constantNum := positiveNum 
Condition<367>, REDUCE Production by '/': 
pid <78>: 
constantNum := positiveNum 
Condition<367>, REDUCE Production by '%': 
pid <78>: 
constantNum := positiveNum 
Condition<367>, REDUCE Production by '+': 
pid <78>: 
constantNum := positiveNum 
Condition<367>, REDUCE Production by '-': 
pid <78>: 
constantNum := positiveNum 
From Condition <365> get package:
expressionAtom := 'STR_LITERAL' (^), { AND, $eof$, OR, *, ORDERBY, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := 'STR_LITERAL' (^), { AND, $eof$, OR, *, ORDERBY, /, %, +, -, }
===============================================================================

SHIFT <365> by 'STR_LITERAL' to <368>
Condition<368>, REDUCE Production by 'AND': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<368>, REDUCE Production by '$eof$': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<368>, REDUCE Production by 'OR': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<368>, REDUCE Production by '*': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<368>, REDUCE Production by 'ORDERBY': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<368>, REDUCE Production by '/': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<368>, REDUCE Production by '%': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<368>, REDUCE Production by '+': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<368>, REDUCE Production by '-': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
From Condition <365> get package:
expressionAtom := expressionAtom (^)mathOperator expressionAtom , { AND, $eof$, OR, *, ORDERBY, /, %, +, -, }
expressionAtom := expressionAtom mathOperator expressionAtom (^), { $eof$, AND, OR, ORDERBY, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := (^)'*' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'%' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'-' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
expressionAtom := expressionAtom (^)mathOperator expressionAtom , { AND, $eof$, OR, *, ORDERBY, /, %, +, -, }
expressionAtom := expressionAtom mathOperator expressionAtom (^), { $eof$, AND, OR, ORDERBY, *, /, %, +, -, }
mathOperator := (^)'/' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'+' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <365> by expressionAtom to <364>.
This condition already existed.
From Condition <365> get package:
constantNum := '-' (^)positiveNum , { $eof$, AND, OR, ORDERBY, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := (^)'NUMBER_CONSTANT' , { AND, $eof$, OR, *, ORDERBY, /, %, +, -, }
constantNum := '-' (^)positiveNum , { $eof$, AND, OR, ORDERBY, *, /, %, +, -, }
===============================================================================

SHIFT <365> by '-' to <352>
This condition already existed.
From Condition <365> get package:
expressionAtom := constantNum (^), { AND, $eof$, OR, *, ORDERBY, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := constantNum (^), { AND, $eof$, OR, *, ORDERBY, /, %, +, -, }
===============================================================================

SHIFT <365> by constantNum to <355>.
This condition already existed.
From Condition <365> get package:
expressionAtom := columnName (^), { AND, $eof$, OR, *, ORDERBY, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := columnName (^), { AND, $eof$, OR, *, ORDERBY, /, %, +, -, }
===============================================================================

SHIFT <365> by columnName to <356>.
This condition already existed.
From Condition <365> get package:
positiveNum := 'NUMBER_CONSTANT' (^), { AND, $eof$, OR, *, ORDERBY, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := 'NUMBER_CONSTANT' (^), { AND, $eof$, OR, *, ORDERBY, /, %, +, -, }
===============================================================================

SHIFT <365> by 'NUMBER_CONSTANT' to <353>
This condition already existed.
Condition<364>, REDUCE Production by 'AND': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Condition<364>, REDUCE Production by '$eof$': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Condition<364>, REDUCE Production by 'OR': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Already existed SHIFT by symbol'*' :
<33>
Try to set it to: REDUCE to:
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Reset Action[364]['*'] to REDUCE:
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Condition<364>, REDUCE Production by 'ORDERBY': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Condition<364>, REDUCE Production by '/': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Already existed SHIFT by symbol'%' :
<26>
Try to set it to: REDUCE to:
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Reset Action[364]['%'] to REDUCE:
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Condition<364>, REDUCE Production by '+': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Already existed SHIFT by symbol'-' :
<34>
Try to set it to: REDUCE to:
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Reset Action[364]['-'] to REDUCE:
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
From Condition <364> get package:
mathOperator := '/' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '/' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

Already existed REDUCE by symbol '/': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Try to set it to: SHIFT to <40>
Set SHIFT fail in: from condition <364> to condition <40>.
This condition already existed.
From Condition <364> get package:
mathOperator := '+' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '+' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

Already existed REDUCE by symbol '+': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Try to set it to: SHIFT to <41>
Set SHIFT fail in: from condition <364> to condition <41>.
This condition already existed.
From Condition <358> get package:
constantNum := '-' (^)positiveNum , { AND, $eof$, OR, *, ORDERBY, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := (^)'NUMBER_CONSTANT' , { $eof$, AND, OR, ORDERBY, *, /, %, +, -, }
constantNum := '-' (^)positiveNum , { AND, $eof$, OR, *, ORDERBY, /, %, +, -, }
===============================================================================

SHIFT <358> by '-' to <369>
From Condition <369> get package:
positiveNum := 'NUMBER_CONSTANT' (^), { $eof$, AND, OR, ORDERBY, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := 'NUMBER_CONSTANT' (^), { $eof$, AND, OR, ORDERBY, *, /, %, +, -, }
===============================================================================

SHIFT <369> by 'NUMBER_CONSTANT' to <370>
Condition<370>, REDUCE Production by '$eof$': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<370>, REDUCE Production by 'AND': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<370>, REDUCE Production by 'OR': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<370>, REDUCE Production by 'ORDERBY': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<370>, REDUCE Production by '*': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<370>, REDUCE Production by '/': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<370>, REDUCE Production by '%': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<370>, REDUCE Production by '+': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<370>, REDUCE Production by '-': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
From Condition <369> get package:
constantNum := '-' positiveNum (^), { AND, $eof$, OR, *, ORDERBY, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
constantNum := '-' positiveNum (^), { AND, $eof$, OR, *, ORDERBY, /, %, +, -, }
===============================================================================

SHIFT <369> by positiveNum to <371>.
Condition<371>, REDUCE Production by 'AND': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<371>, REDUCE Production by '$eof$': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<371>, REDUCE Production by 'OR': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<371>, REDUCE Production by '*': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<371>, REDUCE Production by 'ORDERBY': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<371>, REDUCE Production by '/': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<371>, REDUCE Production by '%': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<371>, REDUCE Production by '+': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<371>, REDUCE Production by '-': 
pid <77>: 
constantNum := '-' positiveNum 
From Condition <358> get package:
expressionAtom := constantNum (^), { $eof$, AND, OR, ORDERBY, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := constantNum (^), { $eof$, AND, OR, ORDERBY, *, /, %, +, -, }
===============================================================================

SHIFT <358> by constantNum to <372>.
Condition<372>, REDUCE Production by '$eof$': 
pid <73>: 
expressionAtom := constantNum 
Condition<372>, REDUCE Production by 'AND': 
pid <73>: 
expressionAtom := constantNum 
Condition<372>, REDUCE Production by 'OR': 
pid <73>: 
expressionAtom := constantNum 
Condition<372>, REDUCE Production by 'ORDERBY': 
pid <73>: 
expressionAtom := constantNum 
Condition<372>, REDUCE Production by '*': 
pid <73>: 
expressionAtom := constantNum 
Condition<372>, REDUCE Production by '/': 
pid <73>: 
expressionAtom := constantNum 
Condition<372>, REDUCE Production by '%': 
pid <73>: 
expressionAtom := constantNum 
Condition<372>, REDUCE Production by '+': 
pid <73>: 
expressionAtom := constantNum 
Condition<372>, REDUCE Production by '-': 
pid <73>: 
expressionAtom := constantNum 
From Condition <358> get package:
expressionAtom := columnName (^), { $eof$, AND, OR, ORDERBY, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := columnName (^), { $eof$, AND, OR, ORDERBY, *, /, %, +, -, }
===============================================================================

SHIFT <358> by columnName to <373>.
Condition<373>, REDUCE Production by '$eof$': 
pid <75>: 
expressionAtom := columnName 
Condition<373>, REDUCE Production by 'AND': 
pid <75>: 
expressionAtom := columnName 
Condition<373>, REDUCE Production by 'OR': 
pid <75>: 
expressionAtom := columnName 
Condition<373>, REDUCE Production by 'ORDERBY': 
pid <75>: 
expressionAtom := columnName 
Condition<373>, REDUCE Production by '*': 
pid <75>: 
expressionAtom := columnName 
Condition<373>, REDUCE Production by '/': 
pid <75>: 
expressionAtom := columnName 
Condition<373>, REDUCE Production by '%': 
pid <75>: 
expressionAtom := columnName 
Condition<373>, REDUCE Production by '+': 
pid <75>: 
expressionAtom := columnName 
Condition<373>, REDUCE Production by '-': 
pid <75>: 
expressionAtom := columnName 
From Condition <358> get package:
positiveNum := 'NUMBER_CONSTANT' (^), { $eof$, AND, OR, ORDERBY, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := 'NUMBER_CONSTANT' (^), { $eof$, AND, OR, ORDERBY, *, /, %, +, -, }
===============================================================================

SHIFT <358> by 'NUMBER_CONSTANT' to <370>
This condition already existed.
From Condition <348> get package:
constantNum := positiveNum (^), { $eof$, AND, OR, ORDERBY, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
constantNum := positiveNum (^), { $eof$, AND, OR, ORDERBY, *, /, %, +, -, }
===============================================================================

SHIFT <348> by positiveNum to <367>.
This condition already existed.
From Condition <348> get package:
expressionAtom := 'STR_LITERAL' (^), { AND, $eof$, OR, *, ORDERBY, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := 'STR_LITERAL' (^), { AND, $eof$, OR, *, ORDERBY, /, %, +, -, }
===============================================================================

SHIFT <348> by 'STR_LITERAL' to <368>
This condition already existed.
From Condition <348> get package:
positiveNum := 'NUMBER_CONSTANT' (^), { AND, $eof$, OR, *, ORDERBY, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := 'NUMBER_CONSTANT' (^), { AND, $eof$, OR, *, ORDERBY, /, %, +, -, }
===============================================================================

SHIFT <348> by 'NUMBER_CONSTANT' to <353>
This condition already existed.
From Condition <317> get package:
expression := predicate (^), { AND, $eof$, OR, ORDERBY, }
-------------------------------------------------------------------------------

After tracing, got package:
expression := predicate (^), { AND, $eof$, OR, ORDERBY, }
===============================================================================

From Condition <317> get package:
columnName := 'ID' (^), { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, ORDERBY, }
columnName := 'ID' (^)'.' 'ID' , { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, ORDERBY, }
-------------------------------------------------------------------------------

After tracing, got package:
SHIFT <columnName317 > by := predicate to <374'ID'>. 
(^), { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, ORDERBY, }
Condition<columnName374 >, REDUCE Production by ':= AND': 
'ID'pid < 70(^)>: 
'.'expression  := 'ID'predicate  
, { Condition<374==>, REDUCE Production by ', $eof$>': , 
*pid <70, >: 
<expression,  <=:= , predicate/ , 
>=, Condition<374%>, REDUCE Production by ', OR!=': , 
+pid <70, >: 
-expression,  $eof$:= , predicateAND , 
OR, Condition<ORDERBY374, >, REDUCE Production by '}ORDERBY': 

===============================================================================
pid <
70>: 
expression := predicate 
SHIFT <317> by 'ID' to <328>
This condition already existed.
From Condition <317> get package:
selectStatement := 'SELECT' selectElements fromClause 'WHERE' expression (^), { $eof$, }
selectStatement := 'SELECT' selectElements fromClause 'WHERE' expression (^)orderByClause , { $eof$, }
expression := expression (^)logicalOperator expression , { AND, $eof$, OR, ORDERBY, }
-------------------------------------------------------------------------------

From Condition <317> get package:
expressionAtom := columnName (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, ORDERBY, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := columnName (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, ORDERBY, }
===============================================================================

After tracing, got package:
logicalOperator := (^)'AND' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
orderByClause := (^)'ORDERBY' orderByExpression $__ann_38 , { $eof$, }
selectStatement := 'SELECT' selectElements fromClause 'WHERE' expression (^), { $eof$, }
logicalOperator := (^)'OR' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
SHIFT <orderByClause317 > by := columnName to <335(^)>.
'ORDERBY'This condition already existed. 
orderByExpression , { $eof$, }
selectStatement := 'SELECT' selectElements fromClause 'WHERE' expression (^)orderByClause , { $eof$, }
expression := expression (^)logicalOperator expression , { AND, $eof$, OR, ORDERBY, }
===============================================================================

From Condition <317> get package:
expressionAtom := constantNum (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, ORDERBY, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := constantNum (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, ORDERBY, }
===============================================================================

SHIFT <317> by expression to <375>.
From Condition <375> get package:
logicalOperator := 'AND' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
logicalOperator := 'AND' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <317> by constantNum to <332>.
This condition already existed.
SHIFT <375> by 'AND' to <376>
Condition<376>, REDUCE Production by 'STR_LITERAL': 
pid <86>: 
logicalOperator := 'AND' 
Condition<376>, REDUCE Production by 'ID': 
From Condition <pid <86317>: 
> get package:logicalOperator := 
'AND' 
constantNum Condition<:= 376positiveNum>, REDUCE Production by ' -': 
(^)pid <86, { >: 
logicalOperator== , := *, 'AND'> , 
<, Condition</376, >, REDUCE Production by '<=NUMBER_CONSTANT, ': %
, pid <86>=>: 
, logicalOperator!= , := +, 'AND'- , 
$eof$, AND, OR, ORDERBY, }
-------------------------------------------------------------------------------

After tracing, got package:
constantNum := positiveNum (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, ORDERBY, }
===============================================================================

From Condition <375> get package:
orderByClause := 'ORDERBY' (^)orderByExpression $__ann_38 , { $eof$, }
orderByClause := 'ORDERBY' (^)orderByExpression , { $eof$, }
-------------------------------------------------------------------------------

SHIFT <317> by positiveNum to <322>.
This condition already existed.
From Condition <317> get package:
constantNum := '-' (^)positiveNum , { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, ORDERBY, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := (^)'NUMBER_CONSTANT' , { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, ORDERBY, }
constantNum := '-' (^)positiveNum , { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, ORDERBY, }
===============================================================================

SHIFT <317> by '-' to <338>
This condition already existed.
From Condition <317> get package:
positiveNum := 'NUMBER_CONSTANT' (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, ORDERBY, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := 'NUMBER_CONSTANT' (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, ORDERBY, }
===============================================================================

SHIFT <317> by 'NUMBER_CONSTANT' to <334>
This condition already existed.
After tracing, got package:
orderByExpression := (^)expressionAtom 'ASC' , { ,, $eof$, }
expressionAtom := (^)'STR_LITERAL' , { %, DESC, /, ASC, -, ,, $eof$, *, +, }
orderByExpression := (^)expressionAtom , { ,, $eof$, }
expressionAtom := (^)expressionAtom mathOperator expressionAtom , { %, DESC, /, ASC, -, ,, $eof$, *, +, }
orderByClause := 'ORDERBY' (^)orderByExpression $__ann_38 , { $eof$, }
expressionAtom := (^)constantNum , { %, DESC, /, ASC, -, ,, $eof$, *, +, }
orderByExpression := (^)expressionAtom 'DESC' , { ,, $eof$, }
expressionAtom := (^)columnName , { %, DESC, /, ASC, -, ,, $eof$, *, +, }
orderByClause := 'ORDERBY' (^)orderByExpression , { $eof$, }
columnName := (^)'ID' , { %, DESC, ASC, /, ,, -, $eof$, *, +, }
columnName := (^)'ID' '.' 'ID' , { %, DESC, ASC, /, ,, -, $eof$, *, +, }
constantNum := (^)positiveNum , { DESC, %, ASC, /, ,, -, $eof$, *, +, }
constantNum := (^)'-' positiveNum , { DESC, %, ASC, /, ,, -, $eof$, *, +, }
positiveNum := (^)'NUMBER_CONSTANT' , { %, DESC, /, ASC, -, ,, $eof$, *, +, }
===============================================================================

SHIFT <375> by 'ORDERBY' to <210>
This condition already existed.
Condition<375>, REDUCE Production by '$eof$': 
pid <36>: 
selectStatement := 'SELECT' selectElements fromClause 'WHERE' expression 
From Condition <375> get package:
logicalOperator := 'OR' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
logicalOperator := 'OR' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <375> by 'OR' to <377>
Condition<377>, REDUCE Production by 'STR_LITERAL': 
pid <87>: 
logicalOperator := 'OR' 
Condition<377>, REDUCE Production by 'ID': 
pid <87>: 
logicalOperator := 'OR' 
Condition<377>, REDUCE Production by '-': 
pid <87>: 
logicalOperator := 'OR' 
Condition<377>, REDUCE Production by 'NUMBER_CONSTANT': 
pid <87>: 
logicalOperator := 'OR' 
From Condition <375> get package:
selectStatement := 'SELECT' selectElements fromClause 'WHERE' expression orderByClause (^), { $eof$, }
-------------------------------------------------------------------------------

After tracing, got package:
selectStatement := 'SELECT' selectElements fromClause 'WHERE' expression orderByClause (^), { $eof$, }
===============================================================================

SHIFT <375> by orderByClause to <378>.
Condition<378>, REDUCE Production by '$eof$': 
pid <35>: 
selectStatement := 'SELECT' selectElements fromClause 'WHERE' expression orderByClause 
From Condition <375> get package:
expression := expression logicalOperator (^)expression , { AND, $eof$, OR, ORDERBY, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := (^)constantNum , { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, ORDERBY, }
expressionAtom := (^)columnName , { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, ORDERBY, }
predicate := (^)expressionAtom comparisonOperator expressionAtom , { AND, $eof$, OR, ORDERBY, }
expression := expression logicalOperator (^)expression , { AND, $eof$, OR, ORDERBY, }
expression := (^)expression logicalOperator expression , { $eof$, AND, OR, ORDERBY, }
expressionAtom := (^)'STR_LITERAL' , { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, ORDERBY, }
expressionAtom := (^)expressionAtom mathOperator expressionAtom , { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, ORDERBY, }
predicate := (^)expressionAtom , { AND, $eof$, OR, ORDERBY, }
expression := (^)predicate , { $eof$, AND, OR, ORDERBY, }
constantNum := (^)positiveNum , { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, ORDERBY, }
constantNum := (^)'-' positiveNum , { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, ORDERBY, }
columnName := (^)'ID' , { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, ORDERBY, }
columnName := (^)'ID' '.' 'ID' , { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, ORDERBY, }
positiveNum := (^)'NUMBER_CONSTANT' , { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, ORDERBY, }
===============================================================================

SHIFT <375> by logicalOperator to <379>.
From Condition <379> get package:
expressionAtom := constantNum (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, ORDERBY, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := constantNum (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, ORDERBY, }
===============================================================================

SHIFT <379> by constantNum to <380>.
Condition<380>, REDUCE Production by '==': 
pid <73>: 
expressionAtom := constantNum 
Condition<380>, REDUCE Production by '*': 
pid <73>: 
expressionAtom := constantNum 
Condition<380>, REDUCE Production by '>': 
pid <73>: 
expressionAtom := constantNum 
Condition<380>, REDUCE Production by '<': 
pid <73>: 
expressionAtom := constantNum 
Condition<380>, REDUCE Production by '/': 
pid <73>: 
expressionAtom := constantNum 
Condition<380>, REDUCE Production by '<=': 
pid <73>: 
expressionAtom := constantNum 
Condition<380>, REDUCE Production by '%': 
pid <73>: 
expressionAtom := constantNum 
Condition<380>, REDUCE Production by '>=': 
pid <73>: 
expressionAtom := constantNum 
Condition<380>, REDUCE Production by '!=': 
pid <73>: 
expressionAtom := constantNum 
Condition<380>, REDUCE Production by '+': 
pid <73>: 
expressionAtom := constantNum 
Condition<380>, REDUCE Production by '-': 
pid <73>: 
expressionAtom := constantNum 
Condition<380>, REDUCE Production by 'AND': 
pid <73>: 
expressionAtom := constantNum 
Condition<380>, REDUCE Production by '$eof$': 
pid <73>: 
expressionAtom := constantNum 
Condition<380>, REDUCE Production by 'OR': 
pid <73>: 
expressionAtom := constantNum 
Condition<380>, REDUCE Production by 'ORDERBY': 
pid <73>: 
expressionAtom := constantNum 
From Condition <379> get package:
expressionAtom := columnName (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, ORDERBY, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := columnName (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, ORDERBY, }
===============================================================================

SHIFT <379> by columnName to <381>.
Condition<381>, REDUCE Production by '==': 
pid <75>: 
expressionAtom := columnName 
Condition<381>, REDUCE Production by '*': 
pid <75>: 
expressionAtom := columnName 
Condition<381>, REDUCE Production by '>': 
pid <75>: 
expressionAtom := columnName 
Condition<381>, REDUCE Production by '<': 
pid <75>: 
expressionAtom := columnName 
Condition<381>, REDUCE Production by '/': 
pid <75>: 
expressionAtom := columnName 
Condition<381>, REDUCE Production by '<=': 
pid <75>: 
expressionAtom := columnName 
Condition<381>, REDUCE Production by '%': 
pid <75>: 
expressionAtom := columnName 
Condition<381>, REDUCE Production by '>=': 
pid <75>: 
expressionAtom := columnName 
Condition<381>, REDUCE Production by '!=': 
pid <75>: 
expressionAtom := columnName 
Condition<381>, REDUCE Production by '+': 
pid <75>: 
expressionAtom := columnName 
Condition<381>, REDUCE Production by '-': 
pid <75>: 
expressionAtom := columnName 
Condition<381>, REDUCE Production by 'AND': 
pid <75>: 
expressionAtom := columnName 
Condition<381>, REDUCE Production by '$eof$': 
pid <75>: 
expressionAtom := columnName 
Condition<381>, REDUCE Production by 'OR': 
pid <75>: 
expressionAtom := columnName 
Condition<381>, REDUCE Production by 'ORDERBY': 
pid <75>: 
expressionAtom := columnName 
From Condition <379> get package:
predicate := expressionAtom (^)comparisonOperator expressionAtom , { AND, $eof$, OR, ORDERBY, }
predicate := expressionAtom (^), { AND, $eof$, OR, ORDERBY, }
expressionAtom := expressionAtom (^)mathOperator expressionAtom , { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, ORDERBY, }
-------------------------------------------------------------------------------

After tracing, got package:
comparisonOperator := (^)'>' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
comparisonOperator := (^)'<=' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
comparisonOperator := (^)'!=' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
predicate := expressionAtom (^)comparisonOperator expressionAtom , { AND, $eof$, OR, ORDERBY, }
comparisonOperator := (^)'==' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
comparisonOperator := (^)'<' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
comparisonOperator := (^)'>=' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'*' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
predicate := expressionAtom (^), { AND, $eof$, OR, ORDERBY, }
mathOperator := (^)'-' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
expressionAtom := expressionAtom (^)mathOperator expressionAtom , { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, ORDERBY, }
mathOperator := (^)'+' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'%' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'/' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <379> by expressionAtom to <382>.
From Condition <382> get package:
comparisonOperator := '>' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
comparisonOperator := '>' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <382> by '>' to <346>
This condition already existed.
From Condition <382> get package:
comparisonOperator := '<=' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
comparisonOperator := '<=' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <382> by '<=' to <344>
This condition already existed.
From Condition <382> get package:
comparisonOperator := '!=' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
comparisonOperator := '!=' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <382> by '!=' to <342>
This condition already existed.
From Condition <382> get package:
predicate := expressionAtom comparisonOperator (^)expressionAtom , { AND, $eof$, OR, ORDERBY, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := (^)'ID' '.' 'ID' , { AND, $eof$, OR, ORDERBY, *, /, %, +, -, }
constantNum := (^)'-' positiveNum , { AND, $eof$, OR, ORDERBY, *, /, %, +, -, }
expressionAtom := (^)constantNum , { $eof$, AND, OR, *, ORDERBY, /, %, +, -, }
expressionAtom := (^)columnName , { $eof$, AND, OR, *, ORDERBY, /, %, +, -, }
predicate := expressionAtom comparisonOperator (^)expressionAtom , { AND, $eof$, OR, ORDERBY, }
columnName := (^)'ID' , { AND, $eof$, OR, ORDERBY, *, /, %, +, -, }
constantNum := (^)positiveNum , { AND, $eof$, OR, ORDERBY, *, /, %, +, -, }
expressionAtom := (^)'STR_LITERAL' , { $eof$, AND, OR, *, ORDERBY, /, %, +, -, }
expressionAtom := (^)expressionAtom mathOperator expressionAtom , { $eof$, AND, OR, *, ORDERBY, /, %, +, -, }
positiveNum := (^)'NUMBER_CONSTANT' , { $eof$, AND, OR, *, ORDERBY, /, %, +, -, }
===============================================================================

SHIFT <382> by comparisonOperator to <383>.
From Condition <383> get package:
columnName := 'ID' (^)'.' 'ID' , { AND, $eof$, OR, ORDERBY, *, /, %, +, -, }
columnName := 'ID' (^), { AND, $eof$, OR, ORDERBY, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID' (^)'.' 'ID' , { AND, $eof$, OR, ORDERBY, *, /, %, +, -, }
columnName := 'ID' (^), { AND, $eof$, OR, ORDERBY, *, /, %, +, -, }
===============================================================================

SHIFT <383> by 'ID' to <384>
From Condition <384> get package:
columnName := 'ID' '.' (^)'ID' , { AND, $eof$, OR, ORDERBY, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID' '.' (^)'ID' , { AND, $eof$, OR, ORDERBY, *, /, %, +, -, }
===============================================================================

SHIFT <384> by '.' to <385>
From Condition <385> get package:
columnName := 'ID' '.' 'ID' (^), { AND, $eof$, OR, ORDERBY, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID' '.' 'ID' (^), { AND, $eof$, OR, ORDERBY, *, /, %, +, -, }
===============================================================================

SHIFT <385> by 'ID' to <386>
Condition<386>, REDUCE Production by 'AND': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<386>, REDUCE Production by '$eof$': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<386>, REDUCE Production by 'OR': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<386>, REDUCE Production by 'ORDERBY': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<386>, REDUCE Production by '*': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<386>, REDUCE Production by '/': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<386>, REDUCE Production by '%': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<386>, REDUCE Production by '+': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<386>, REDUCE Production by '-': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<384>, REDUCE Production by 'AND': 
pid <68>: 
columnName := 'ID' 
Condition<384>, REDUCE Production by '$eof$': 
pid <68>: 
columnName := 'ID' 
Condition<384>, REDUCE Production by 'OR': 
pid <68>: 
columnName := 'ID' 
Condition<384>, REDUCE Production by 'ORDERBY': 
pid <68>: 
columnName := 'ID' 
Condition<384>, REDUCE Production by '*': 
pid <68>: 
columnName := 'ID' 
Condition<384>, REDUCE Production by '/': 
pid <68>: 
columnName := 'ID' 
Condition<384>, REDUCE Production by '%': 
pid <68>: 
columnName := 'ID' 
Condition<384>, REDUCE Production by '+': 
pid <68>: 
columnName := 'ID' 
Condition<384>, REDUCE Production by '-': 
pid <68>: 
columnName := 'ID' 
From Condition <383> get package:
constantNum := '-' (^)positiveNum , { AND, $eof$, OR, ORDERBY, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := (^)'NUMBER_CONSTANT' , { $eof$, AND, OR, *, ORDERBY, /, %, +, -, }
constantNum := '-' (^)positiveNum , { AND, $eof$, OR, ORDERBY, *, /, %, +, -, }
===============================================================================

SHIFT <383> by '-' to <387>
From Condition <387> get package:
positiveNum := 'NUMBER_CONSTANT' (^), { $eof$, AND, OR, *, ORDERBY, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := 'NUMBER_CONSTANT' (^), { $eof$, AND, OR, *, ORDERBY, /, %, +, -, }
===============================================================================

SHIFT <387> by 'NUMBER_CONSTANT' to <388>
Condition<388>, REDUCE Production by '$eof$': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<388>, REDUCE Production by 'AND': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<388>, REDUCE Production by 'OR': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<388>, REDUCE Production by '*': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<388>, REDUCE Production by 'ORDERBY': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<388>, REDUCE Production by '/': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<388>, REDUCE Production by '%': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<388>, REDUCE Production by '+': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<388>, REDUCE Production by '-': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
From Condition <387> get package:
constantNum := '-' positiveNum (^), { AND, $eof$, OR, ORDERBY, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
constantNum := '-' positiveNum (^), { AND, $eof$, OR, ORDERBY, *, /, %, +, -, }
===============================================================================

SHIFT <387> by positiveNum to <389>.
Condition<389>, REDUCE Production by 'AND': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<389>, REDUCE Production by '$eof$': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<389>, REDUCE Production by 'OR': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<389>, REDUCE Production by 'ORDERBY': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<389>, REDUCE Production by '*': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<389>, REDUCE Production by '/': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<389>, REDUCE Production by '%': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<389>, REDUCE Production by '+': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<389>, REDUCE Production by '-': 
pid <77>: 
constantNum := '-' positiveNum 
From Condition <383> get package:
expressionAtom := constantNum (^), { $eof$, AND, OR, *, ORDERBY, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := constantNum (^), { $eof$, AND, OR, *, ORDERBY, /, %, +, -, }
===============================================================================

SHIFT <383> by constantNum to <390>.
Condition<390>, REDUCE Production by '$eof$': 
pid <73>: 
expressionAtom := constantNum 
Condition<390>, REDUCE Production by 'AND': 
pid <73>: 
expressionAtom := constantNum 
Condition<390>, REDUCE Production by 'OR': 
pid <73>: 
expressionAtom := constantNum 
Condition<390>, REDUCE Production by '*': 
pid <73>: 
expressionAtom := constantNum 
Condition<390>, REDUCE Production by 'ORDERBY': 
pid <73>: 
expressionAtom := constantNum 
Condition<390>, REDUCE Production by '/': 
pid <73>: 
expressionAtom := constantNum 
Condition<390>, REDUCE Production by '%': 
pid <73>: 
expressionAtom := constantNum 
Condition<390>, REDUCE Production by '+': 
pid <73>: 
expressionAtom := constantNum 
Condition<390>, REDUCE Production by '-': 
pid <73>: 
expressionAtom := constantNum 
From Condition <383> get package:
expressionAtom := columnName (^), { $eof$, AND, OR, *, ORDERBY, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := columnName (^), { $eof$, AND, OR, *, ORDERBY, /, %, +, -, }
===============================================================================

SHIFT <383> by columnName to <391>.
Condition<391>, REDUCE Production by '$eof$': 
pid <75>: 
expressionAtom := columnName 
Condition<391>, REDUCE Production by 'AND': 
pid <75>: 
expressionAtom := columnName 
Condition<391>, REDUCE Production by 'OR': 
pid <75>: 
expressionAtom := columnName 
Condition<391>, REDUCE Production by '*': 
pid <75>: 
expressionAtom := columnName 
Condition<391>, REDUCE Production by 'ORDERBY': 
pid <75>: 
expressionAtom := columnName 
Condition<391>, REDUCE Production by '/': 
pid <75>: 
expressionAtom := columnName 
Condition<391>, REDUCE Production by '%': 
pid <75>: 
expressionAtom := columnName 
Condition<391>, REDUCE Production by '+': 
pid <75>: 
expressionAtom := columnName 
Condition<391>, REDUCE Production by '-': 
pid <75>: 
expressionAtom := columnName 
From Condition <383> get package:
predicate := expressionAtom comparisonOperator expressionAtom (^), { AND, $eof$, OR, ORDERBY, }
expressionAtom := expressionAtom (^)mathOperator expressionAtom , { $eof$, AND, OR, *, ORDERBY, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := (^)'/' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'+' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
predicate := expressionAtom comparisonOperator expressionAtom (^), { AND, $eof$, OR, ORDERBY, }
mathOperator := (^)'*' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'%' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'-' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
expressionAtom := expressionAtom (^)mathOperator expressionAtom , { $eof$, AND, OR, *, ORDERBY, /, %, +, -, }
===============================================================================

SHIFT <383> by expressionAtom to <392>.
From Condition <392> get package:
mathOperator := '/' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '/' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <392> by '/' to <40>
This condition already existed.
From Condition <392> get package:
mathOperator := '+' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '+' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <392> by '+' to <41>
This condition already existed.
Condition<392>, REDUCE Production by 'AND': 
pid <71>: 
predicate := expressionAtom comparisonOperator expressionAtom 
Condition<392>, REDUCE Production by '$eof$': 
pid <71>: 
predicate := expressionAtom comparisonOperator expressionAtom 
Condition<392>, REDUCE Production by 'OR': 
pid <71>: 
predicate := expressionAtom comparisonOperator expressionAtom 
Condition<392>, REDUCE Production by 'ORDERBY': 
pid <71>: 
predicate := expressionAtom comparisonOperator expressionAtom 
From Condition <392> get package:
mathOperator := '*' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '*' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <392> by '*' to <33>
This condition already existed.
From Condition <392> get package:
mathOperator := '%' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '%' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <392> by '%' to <26>
This condition already existed.
From Condition <392> get package:
mathOperator := '-' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '-' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <392> by '-' to <34>
This condition already existed.
From Condition <392> get package:
expressionAtom := expressionAtom mathOperator (^)expressionAtom , { $eof$, AND, OR, *, ORDERBY, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := (^)'ID' , { $eof$, AND, OR, *, ORDERBY, /, %, +, -, }
constantNum := (^)positiveNum , { $eof$, AND, OR, *, ORDERBY, /, %, +, -, }
expressionAtom := (^)'STR_LITERAL' , { AND, $eof$, OR, ORDERBY, *, /, %, +, -, }
expressionAtom := expressionAtom mathOperator (^)expressionAtom , { $eof$, AND, OR, *, ORDERBY, /, %, +, -, }
expressionAtom := (^)expressionAtom mathOperator expressionAtom , { AND, $eof$, OR, ORDERBY, *, /, %, +, -, }
columnName := (^)'ID' '.' 'ID' , { $eof$, AND, OR, *, ORDERBY, /, %, +, -, }
constantNum := (^)'-' positiveNum , { $eof$, AND, OR, *, ORDERBY, /, %, +, -, }
expressionAtom := (^)constantNum , { AND, $eof$, OR, ORDERBY, *, /, %, +, -, }
expressionAtom := (^)columnName , { AND, $eof$, OR, ORDERBY, *, /, %, +, -, }
positiveNum := (^)'NUMBER_CONSTANT' , { AND, $eof$, OR, ORDERBY, *, /, %, +, -, }
===============================================================================

SHIFT <392> by mathOperator to <393>.
From Condition <393> get package:
columnName := 'ID' (^), { $eof$, AND, OR, *, ORDERBY, /, %, +, -, }
columnName := 'ID' (^)'.' 'ID' , { $eof$, AND, OR, *, ORDERBY, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID' (^), { $eof$, AND, OR, *, ORDERBY, /, %, +, -, }
columnName := 'ID' (^)'.' 'ID' , { $eof$, AND, OR, *, ORDERBY, /, %, +, -, }
===============================================================================

SHIFT <393> by 'ID' to <394>
Condition<394>, REDUCE Production by '$eof$': 
pid <68>: 
columnName := 'ID' 
Condition<394>, REDUCE Production by 'AND': 
pid <68>: 
columnName := 'ID' 
Condition<394>, REDUCE Production by 'OR': 
pid <68>: 
columnName := 'ID' 
Condition<394>, REDUCE Production by '*': 
pid <68>: 
columnName := 'ID' 
Condition<394>, REDUCE Production by 'ORDERBY': 
pid <68>: 
columnName := 'ID' 
Condition<394>, REDUCE Production by '/': 
pid <68>: 
columnName := 'ID' 
Condition<394>, REDUCE Production by '%': 
pid <68>: 
columnName := 'ID' 
Condition<394>, REDUCE Production by '+': 
pid <68>: 
columnName := 'ID' 
Condition<394>, REDUCE Production by '-': 
pid <68>: 
columnName := 'ID' 
From Condition <394> get package:
columnName := 'ID' '.' (^)'ID' , { $eof$, AND, OR, *, ORDERBY, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID' '.' (^)'ID' , { $eof$, AND, OR, *, ORDERBY, /, %, +, -, }
===============================================================================

SHIFT <394> by '.' to <395>
From Condition <395> get package:
columnName := 'ID' '.' 'ID' (^), { $eof$, AND, OR, *, ORDERBY, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID' '.' 'ID' (^), { $eof$, AND, OR, *, ORDERBY, /, %, +, -, }
===============================================================================

SHIFT <395> by 'ID' to <396>
Condition<396>, REDUCE Production by '$eof$': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<396>, REDUCE Production by 'AND': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<396>, REDUCE Production by 'OR': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<396>, REDUCE Production by '*': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<396>, REDUCE Production by 'ORDERBY': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<396>, REDUCE Production by '/': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<396>, REDUCE Production by '%': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<396>, REDUCE Production by '+': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<396>, REDUCE Production by '-': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
From Condition <393> get package:
constantNum := positiveNum (^), { $eof$, AND, OR, *, ORDERBY, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
constantNum := positiveNum (^), { $eof$, AND, OR, *, ORDERBY, /, %, +, -, }
===============================================================================

SHIFT <393> by positiveNum to <397>.
Condition<397>, REDUCE Production by '$eof$': 
pid <78>: 
constantNum := positiveNum 
Condition<397>, REDUCE Production by 'AND': 
pid <78>: 
constantNum := positiveNum 
Condition<397>, REDUCE Production by 'OR': 
pid <78>: 
constantNum := positiveNum 
Condition<397>, REDUCE Production by '*': 
pid <78>: 
constantNum := positiveNum 
Condition<397>, REDUCE Production by 'ORDERBY': 
pid <78>: 
constantNum := positiveNum 
Condition<397>, REDUCE Production by '/': 
pid <78>: 
constantNum := positiveNum 
Condition<397>, REDUCE Production by '%': 
pid <78>: 
constantNum := positiveNum 
Condition<397>, REDUCE Production by '+': 
pid <78>: 
constantNum := positiveNum 
Condition<397>, REDUCE Production by '-': 
pid <78>: 
constantNum := positiveNum 
From Condition <393> get package:
expressionAtom := 'STR_LITERAL' (^), { AND, $eof$, OR, ORDERBY, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := 'STR_LITERAL' (^), { AND, $eof$, OR, ORDERBY, *, /, %, +, -, }
===============================================================================

SHIFT <393> by 'STR_LITERAL' to <398>
Condition<398>, REDUCE Production by 'AND': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<398>, REDUCE Production by '$eof$': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<398>, REDUCE Production by 'OR': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<398>, REDUCE Production by 'ORDERBY': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<398>, REDUCE Production by '*': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<398>, REDUCE Production by '/': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<398>, REDUCE Production by '%': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<398>, REDUCE Production by '+': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<398>, REDUCE Production by '-': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
From Condition <393> get package:
expressionAtom := expressionAtom (^)mathOperator expressionAtom , { AND, $eof$, OR, ORDERBY, *, /, %, +, -, }
expressionAtom := expressionAtom mathOperator expressionAtom (^), { $eof$, AND, OR, *, ORDERBY, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := (^)'*' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'%' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'-' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
expressionAtom := expressionAtom (^)mathOperator expressionAtom , { AND, $eof$, OR, ORDERBY, *, /, %, +, -, }
expressionAtom := expressionAtom mathOperator expressionAtom (^), { $eof$, AND, OR, *, ORDERBY, /, %, +, -, }
mathOperator := (^)'/' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'+' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <393> by expressionAtom to <364>.
This condition already existed.
From Condition <393> get package:
constantNum := '-' (^)positiveNum , { $eof$, AND, OR, *, ORDERBY, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := (^)'NUMBER_CONSTANT' , { AND, $eof$, OR, ORDERBY, *, /, %, +, -, }
constantNum := '-' (^)positiveNum , { $eof$, AND, OR, *, ORDERBY, /, %, +, -, }
===============================================================================

SHIFT <393> by '-' to <399>
From Condition <399> get package:
positiveNum := 'NUMBER_CONSTANT' (^), { AND, $eof$, OR, ORDERBY, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := 'NUMBER_CONSTANT' (^), { AND, $eof$, OR, ORDERBY, *, /, %, +, -, }
===============================================================================

SHIFT <399> by 'NUMBER_CONSTANT' to <400>
Condition<400>, REDUCE Production by 'AND': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<400>, REDUCE Production by '$eof$': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<400>, REDUCE Production by 'OR': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<400>, REDUCE Production by 'ORDERBY': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<400>, REDUCE Production by '*': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<400>, REDUCE Production by '/': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<400>, REDUCE Production by '%': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<400>, REDUCE Production by '+': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<400>, REDUCE Production by '-': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
From Condition <399> get package:
constantNum := '-' positiveNum (^), { $eof$, AND, OR, *, ORDERBY, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
constantNum := '-' positiveNum (^), { $eof$, AND, OR, *, ORDERBY, /, %, +, -, }
===============================================================================

SHIFT <399> by positiveNum to <401>.
Condition<401>, REDUCE Production by '$eof$': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<401>, REDUCE Production by 'AND': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<401>, REDUCE Production by 'OR': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<401>, REDUCE Production by '*': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<401>, REDUCE Production by 'ORDERBY': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<401>, REDUCE Production by '/': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<401>, REDUCE Production by '%': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<401>, REDUCE Production by '+': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<401>, REDUCE Production by '-': 
pid <77>: 
constantNum := '-' positiveNum 
From Condition <393> get package:
expressionAtom := constantNum (^), { AND, $eof$, OR, ORDERBY, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := constantNum (^), { AND, $eof$, OR, ORDERBY, *, /, %, +, -, }
===============================================================================

SHIFT <393> by constantNum to <402>.
Condition<402>, REDUCE Production by 'AND': 
pid <73>: 
expressionAtom := constantNum 
Condition<402>, REDUCE Production by '$eof$': 
pid <73>: 
expressionAtom := constantNum 
Condition<402>, REDUCE Production by 'OR': 
pid <73>: 
expressionAtom := constantNum 
Condition<402>, REDUCE Production by 'ORDERBY': 
pid <73>: 
expressionAtom := constantNum 
Condition<402>, REDUCE Production by '*': 
pid <73>: 
expressionAtom := constantNum 
Condition<402>, REDUCE Production by '/': 
pid <73>: 
expressionAtom := constantNum 
Condition<402>, REDUCE Production by '%': 
pid <73>: 
expressionAtom := constantNum 
Condition<402>, REDUCE Production by '+': 
pid <73>: 
expressionAtom := constantNum 
Condition<402>, REDUCE Production by '-': 
pid <73>: 
expressionAtom := constantNum 
From Condition <393> get package:
expressionAtom := columnName (^), { AND, $eof$, OR, ORDERBY, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := columnName (^), { AND, $eof$, OR, ORDERBY, *, /, %, +, -, }
===============================================================================

SHIFT <393> by columnName to <403>.
Condition<403>, REDUCE Production by 'AND': 
pid <75>: 
expressionAtom := columnName 
Condition<403>, REDUCE Production by '$eof$': 
pid <75>: 
expressionAtom := columnName 
Condition<403>, REDUCE Production by 'OR': 
pid <75>: 
expressionAtom := columnName 
Condition<403>, REDUCE Production by 'ORDERBY': 
pid <75>: 
expressionAtom := columnName 
Condition<403>, REDUCE Production by '*': 
pid <75>: 
expressionAtom := columnName 
Condition<403>, REDUCE Production by '/': 
pid <75>: 
expressionAtom := columnName 
Condition<403>, REDUCE Production by '%': 
pid <75>: 
expressionAtom := columnName 
Condition<403>, REDUCE Production by '+': 
pid <75>: 
expressionAtom := columnName 
Condition<403>, REDUCE Production by '-': 
pid <75>: 
expressionAtom := columnName 
From Condition <393> get package:
positiveNum := 'NUMBER_CONSTANT' (^), { AND, $eof$, OR, ORDERBY, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := 'NUMBER_CONSTANT' (^), { AND, $eof$, OR, ORDERBY, *, /, %, +, -, }
===============================================================================

SHIFT <393> by 'NUMBER_CONSTANT' to <400>
This condition already existed.
From Condition <383> get package:
constantNum := positiveNum (^), { AND, $eof$, OR, ORDERBY, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
constantNum := positiveNum (^), { AND, $eof$, OR, ORDERBY, *, /, %, +, -, }
===============================================================================

SHIFT <383> by positiveNum to <404>.
Condition<404>, REDUCE Production by 'AND': 
pid <78>: 
constantNum := positiveNum 
Condition<404>, REDUCE Production by '$eof$': 
pid <78>: 
constantNum := positiveNum 
Condition<404>, REDUCE Production by 'OR': 
pid <78>: 
constantNum := positiveNum 
Condition<404>, REDUCE Production by 'ORDERBY': 
pid <78>: 
constantNum := positiveNum 
Condition<404>, REDUCE Production by '*': 
pid <78>: 
constantNum := positiveNum 
Condition<404>, REDUCE Production by '/': 
pid <78>: 
constantNum := positiveNum 
Condition<404>, REDUCE Production by '%': 
pid <78>: 
constantNum := positiveNum 
Condition<404>, REDUCE Production by '+': 
pid <78>: 
constantNum := positiveNum 
Condition<404>, REDUCE Production by '-': 
pid <78>: 
constantNum := positiveNum 
From Condition <383> get package:
expressionAtom := 'STR_LITERAL' (^), { $eof$, AND, OR, *, ORDERBY, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := 'STR_LITERAL' (^), { $eof$, AND, OR, *, ORDERBY, /, %, +, -, }
===============================================================================

SHIFT <383> by 'STR_LITERAL' to <405>
Condition<405>, REDUCE Production by '$eof$': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<405>, REDUCE Production by 'AND': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<405>, REDUCE Production by 'OR': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<405>, REDUCE Production by '*': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<405>, REDUCE Production by 'ORDERBY': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<405>, REDUCE Production by '/': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<405>, REDUCE Production by '%': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<405>, REDUCE Production by '+': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<405>, REDUCE Production by '-': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
From Condition <383> get package:
positiveNum := 'NUMBER_CONSTANT' (^), { $eof$, AND, OR, *, ORDERBY, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := 'NUMBER_CONSTANT' (^), { $eof$, AND, OR, *, ORDERBY, /, %, +, -, }
===============================================================================

SHIFT <383> by 'NUMBER_CONSTANT' to <388>
This condition already existed.
From Condition <382> get package:
comparisonOperator := '==' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
comparisonOperator := '==' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <382> by '==' to <347>
This condition already existed.
From Condition <382> get package:
comparisonOperator := '<' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
comparisonOperator := '<' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <382> by '<' to <345>
This condition already existed.
From Condition <382> get package:
comparisonOperator := '>=' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
comparisonOperator := '>=' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <382> by '>=' to <343>
This condition already existed.
From Condition <382> get package:
mathOperator := '*' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '*' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <382> by '*' to <33>
This condition already existed.
Condition<382>, REDUCE Production by 'AND': 
pid <72>: 
predicate := expressionAtom 
Condition<382>, REDUCE Production by '$eof$': 
pid <72>: 
predicate := expressionAtom 
Condition<382>, REDUCE Production by 'OR': 
pid <72>: 
predicate := expressionAtom 
Condition<382>, REDUCE Production by 'ORDERBY': 
pid <72>: 
predicate := expressionAtom 
From Condition <382> get package:
mathOperator := '-' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '-' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <382> by '-' to <34>
This condition already existed.
From Condition <382> get package:
expressionAtom := expressionAtom mathOperator (^)expressionAtom , { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, ORDERBY, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := (^)'ID' , { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, ORDERBY, }
constantNum := (^)positiveNum , { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, ORDERBY, }
expressionAtom := (^)'STR_LITERAL' , { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, ORDERBY, }
expressionAtom := expressionAtom mathOperator (^)expressionAtom , { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, ORDERBY, }
expressionAtom := (^)expressionAtom mathOperator expressionAtom , { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, ORDERBY, }
columnName := (^)'ID' '.' 'ID' , { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, ORDERBY, }
constantNum := (^)'-' positiveNum , { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, ORDERBY, }
expressionAtom := (^)constantNum , { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, ORDERBY, }
expressionAtom := (^)columnName , { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, ORDERBY, }
positiveNum := (^)'NUMBER_CONSTANT' , { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, ORDERBY, }
===============================================================================

SHIFT <382> by mathOperator to <406>.
From Condition <406> get package:
columnName := 'ID' (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, ORDERBY, }
columnName := 'ID' (^)'.' 'ID' , { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, ORDERBY, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID' (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, ORDERBY, }
columnName := 'ID' (^)'.' 'ID' , { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, ORDERBY, }
===============================================================================

SHIFT <406> by 'ID' to <407>
Condition<407>, REDUCE Production by '==': 
pid <68>: 
columnName := 'ID' 
Condition<407>, REDUCE Production by '*': 
pid <68>: 
columnName := 'ID' 
Condition<407>, REDUCE Production by '>': 
pid <68>: 
columnName := 'ID' 
Condition<407>, REDUCE Production by '<': 
pid <68>: 
columnName := 'ID' 
Condition<407>, REDUCE Production by '/': 
pid <68>: 
columnName := 'ID' 
Condition<407>, REDUCE Production by '<=': 
pid <68>: 
columnName := 'ID' 
Condition<407>, REDUCE Production by '%': 
pid <68>: 
columnName := 'ID' 
Condition<407>, REDUCE Production by '>=': 
pid <68>: 
columnName := 'ID' 
Condition<407>, REDUCE Production by '!=': 
pid <68>: 
columnName := 'ID' 
Condition<407>, REDUCE Production by '+': 
pid <68>: 
columnName := 'ID' 
Condition<407>, REDUCE Production by '-': 
pid <68>: 
columnName := 'ID' 
Condition<407>, REDUCE Production by 'AND': 
pid <68>: 
columnName := 'ID' 
Condition<407>, REDUCE Production by '$eof$': 
pid <68>: 
columnName := 'ID' 
Condition<407>, REDUCE Production by 'OR': 
pid <68>: 
columnName := 'ID' 
Condition<407>, REDUCE Production by 'ORDERBY': 
pid <68>: 
columnName := 'ID' 
From Condition <407> get package:
columnName := 'ID' '.' (^)'ID' , { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, ORDERBY, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID' '.' (^)'ID' , { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, ORDERBY, }
===============================================================================

SHIFT <407> by '.' to <408>
From Condition <408> get package:
columnName := 'ID' '.' 'ID' (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, ORDERBY, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID' '.' 'ID' (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, ORDERBY, }
===============================================================================

SHIFT <408> by 'ID' to <409>
Condition<409>, REDUCE Production by '==': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<409>, REDUCE Production by '*': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<409>, REDUCE Production by '>': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<409>, REDUCE Production by '<': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<409>, REDUCE Production by '/': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<409>, REDUCE Production by '<=': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<409>, REDUCE Production by '%': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<409>, REDUCE Production by '>=': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<409>, REDUCE Production by '!=': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<409>, REDUCE Production by '+': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<409>, REDUCE Production by '-': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<409>, REDUCE Production by 'AND': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<409>, REDUCE Production by '$eof$': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<409>, REDUCE Production by 'OR': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<409>, REDUCE Production by 'ORDERBY': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
From Condition <406> get package:
constantNum := positiveNum (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, ORDERBY, }
-------------------------------------------------------------------------------

After tracing, got package:
constantNum := positiveNum (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, ORDERBY, }
===============================================================================

SHIFT <406> by positiveNum to <410>.
Condition<410>, REDUCE Production by '==': 
pid <78>: 
constantNum := positiveNum 
Condition<410>, REDUCE Production by '*': 
pid <78>: 
constantNum := positiveNum 
Condition<410>, REDUCE Production by '>': 
pid <78>: 
constantNum := positiveNum 
Condition<410>, REDUCE Production by '<': 
pid <78>: 
constantNum := positiveNum 
Condition<410>, REDUCE Production by '/': 
pid <78>: 
constantNum := positiveNum 
Condition<410>, REDUCE Production by '<=': 
pid <78>: 
constantNum := positiveNum 
Condition<410>, REDUCE Production by '%': 
pid <78>: 
constantNum := positiveNum 
Condition<410>, REDUCE Production by '>=': 
pid <78>: 
constantNum := positiveNum 
Condition<410>, REDUCE Production by '!=': 
pid <78>: 
constantNum := positiveNum 
Condition<410>, REDUCE Production by '+': 
pid <78>: 
constantNum := positiveNum 
Condition<410>, REDUCE Production by '-': 
pid <78>: 
constantNum := positiveNum 
Condition<410>, REDUCE Production by 'AND': 
pid <78>: 
constantNum := positiveNum 
Condition<410>, REDUCE Production by '$eof$': 
pid <78>: 
constantNum := positiveNum 
Condition<410>, REDUCE Production by 'OR': 
pid <78>: 
constantNum := positiveNum 
Condition<410>, REDUCE Production by 'ORDERBY': 
pid <78>: 
constantNum := positiveNum 
From Condition <406> get package:
expressionAtom := 'STR_LITERAL' (^), { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, ORDERBY, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := 'STR_LITERAL' (^), { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, ORDERBY, }
===============================================================================

SHIFT <406> by 'STR_LITERAL' to <411>
Condition<411>, REDUCE Production by '==': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<411>, REDUCE Production by '>': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<411>, REDUCE Production by '*': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<411>, REDUCE Production by '<': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<411>, REDUCE Production by '<=': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<411>, REDUCE Production by '/': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<411>, REDUCE Production by '>=': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<411>, REDUCE Production by '%': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<411>, REDUCE Production by '!=': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<411>, REDUCE Production by '+': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<411>, REDUCE Production by '-': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<411>, REDUCE Production by 'AND': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<411>, REDUCE Production by '$eof$': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<411>, REDUCE Production by 'OR': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<411>, REDUCE Production by 'ORDERBY': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
From Condition <406> get package:
expressionAtom := expressionAtom (^)mathOperator expressionAtom , { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, ORDERBY, }
expressionAtom := expressionAtom mathOperator expressionAtom (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, ORDERBY, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := (^)'*' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'%' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'-' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
expressionAtom := expressionAtom (^)mathOperator expressionAtom , { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, ORDERBY, }
expressionAtom := expressionAtom mathOperator expressionAtom (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, ORDERBY, }
mathOperator := (^)'/' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'+' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <406> by expressionAtom to <412>.
From Condition <412> get package:
mathOperator := '*' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '*' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <412> by '*' to <33>
This condition already existed.
From Condition <412> get package:
mathOperator := '%' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '%' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <412> by '%' to <26>
This condition already existed.
From Condition <412> get package:
mathOperator := '-' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '-' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <412> by '-' to <34>
This condition already existed.
From Condition <412> get package:
expressionAtom := expressionAtom mathOperator (^)expressionAtom , { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, ORDERBY, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := (^)'ID' , { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, ORDERBY, }
constantNum := (^)positiveNum , { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, ORDERBY, }
expressionAtom := (^)'STR_LITERAL' , { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, ORDERBY, }
expressionAtom := expressionAtom mathOperator (^)expressionAtom , { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, ORDERBY, }
expressionAtom := (^)expressionAtom mathOperator expressionAtom , { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, ORDERBY, }
columnName := (^)'ID' '.' 'ID' , { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, ORDERBY, }
constantNum := (^)'-' positiveNum , { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, ORDERBY, }
expressionAtom := (^)constantNum , { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, ORDERBY, }
expressionAtom := (^)columnName , { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, ORDERBY, }
positiveNum := (^)'NUMBER_CONSTANT' , { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, ORDERBY, }
===============================================================================

SHIFT <412> by mathOperator to <413>.
From Condition <413> get package:
columnName := 'ID' (^), { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, ORDERBY, }
columnName := 'ID' (^)'.' 'ID' , { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, ORDERBY, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID' (^), { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, ORDERBY, }
columnName := 'ID' (^)'.' 'ID' , { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, ORDERBY, }
===============================================================================

SHIFT <413> by 'ID' to <414>
Condition<414>, REDUCE Production by '==': 
pid <68>: 
columnName := 'ID' 
Condition<414>, REDUCE Production by '>': 
pid <68>: 
columnName := 'ID' 
Condition<414>, REDUCE Production by '*': 
pid <68>: 
columnName := 'ID' 
Condition<414>, REDUCE Production by '<': 
pid <68>: 
columnName := 'ID' 
Condition<414>, REDUCE Production by '<=': 
pid <68>: 
columnName := 'ID' 
Condition<414>, REDUCE Production by '/': 
pid <68>: 
columnName := 'ID' 
Condition<414>, REDUCE Production by '>=': 
pid <68>: 
columnName := 'ID' 
Condition<414>, REDUCE Production by '%': 
pid <68>: 
columnName := 'ID' 
Condition<414>, REDUCE Production by '!=': 
pid <68>: 
columnName := 'ID' 
Condition<414>, REDUCE Production by '+': 
pid <68>: 
columnName := 'ID' 
Condition<414>, REDUCE Production by '-': 
pid <68>: 
columnName := 'ID' 
Condition<414>, REDUCE Production by 'AND': 
pid <68>: 
columnName := 'ID' 
Condition<414>, REDUCE Production by '$eof$': 
pid <68>: 
columnName := 'ID' 
Condition<414>, REDUCE Production by 'OR': 
pid <68>: 
columnName := 'ID' 
Condition<414>, REDUCE Production by 'ORDERBY': 
pid <68>: 
columnName := 'ID' 
From Condition <414> get package:
columnName := 'ID' '.' (^)'ID' , { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, ORDERBY, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID' '.' (^)'ID' , { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, ORDERBY, }
===============================================================================

SHIFT <414> by '.' to <415>
From Condition <415> get package:
columnName := 'ID' '.' 'ID' (^), { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, ORDERBY, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID' '.' 'ID' (^), { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, ORDERBY, }
===============================================================================

SHIFT <415> by 'ID' to <416>
Condition<416>, REDUCE Production by '==': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<416>, REDUCE Production by '>': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<416>, REDUCE Production by '*': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<416>, REDUCE Production by '<': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<416>, REDUCE Production by '<=': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<416>, REDUCE Production by '/': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<416>, REDUCE Production by '>=': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<416>, REDUCE Production by '%': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<416>, REDUCE Production by '!=': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<416>, REDUCE Production by '+': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<416>, REDUCE Production by '-': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<416>, REDUCE Production by 'AND': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<416>, REDUCE Production by '$eof$': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<416>, REDUCE Production by 'OR': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<416>, REDUCE Production by 'ORDERBY': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
From Condition <413> get package:
constantNum := positiveNum (^), { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, ORDERBY, }
-------------------------------------------------------------------------------

After tracing, got package:
constantNum := positiveNum (^), { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, ORDERBY, }
===============================================================================

SHIFT <413> by positiveNum to <417>.
Condition<417>, REDUCE Production by '==': 
pid <78>: 
constantNum := positiveNum 
Condition<417>, REDUCE Production by '>': 
pid <78>: 
constantNum := positiveNum 
Condition<417>, REDUCE Production by '*': 
pid <78>: 
constantNum := positiveNum 
Condition<417>, REDUCE Production by '<': 
pid <78>: 
constantNum := positiveNum 
Condition<417>, REDUCE Production by '<=': 
pid <78>: 
constantNum := positiveNum 
Condition<417>, REDUCE Production by '/': 
pid <78>: 
constantNum := positiveNum 
Condition<417>, REDUCE Production by '>=': 
pid <78>: 
constantNum := positiveNum 
Condition<417>, REDUCE Production by '%': 
pid <78>: 
constantNum := positiveNum 
Condition<417>, REDUCE Production by '!=': 
pid <78>: 
constantNum := positiveNum 
Condition<417>, REDUCE Production by '+': 
pid <78>: 
constantNum := positiveNum 
Condition<417>, REDUCE Production by '-': 
pid <78>: 
constantNum := positiveNum 
Condition<417>, REDUCE Production by 'AND': 
pid <78>: 
constantNum := positiveNum 
Condition<417>, REDUCE Production by '$eof$': 
pid <78>: 
constantNum := positiveNum 
Condition<417>, REDUCE Production by 'OR': 
pid <78>: 
constantNum := positiveNum 
Condition<417>, REDUCE Production by 'ORDERBY': 
pid <78>: 
constantNum := positiveNum 
From Condition <413> get package:
expressionAtom := 'STR_LITERAL' (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, ORDERBY, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := 'STR_LITERAL' (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, ORDERBY, }
===============================================================================

SHIFT <413> by 'STR_LITERAL' to <418>
Condition<418>, REDUCE Production by '==': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<418>, REDUCE Production by '*': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<418>, REDUCE Production by '>': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<418>, REDUCE Production by '<': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<418>, REDUCE Production by '/': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<418>, REDUCE Production by '<=': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<418>, REDUCE Production by '%': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<418>, REDUCE Production by '>=': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<418>, REDUCE Production by '!=': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<418>, REDUCE Production by '+': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<418>, REDUCE Production by '-': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<418>, REDUCE Production by 'AND': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<418>, REDUCE Production by '$eof$': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<418>, REDUCE Production by 'OR': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<418>, REDUCE Production by 'ORDERBY': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
From Condition <413> get package:
expressionAtom := expressionAtom (^)mathOperator expressionAtom , { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, ORDERBY, }
expressionAtom := expressionAtom mathOperator expressionAtom (^), { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, ORDERBY, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := (^)'*' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'%' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'-' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
expressionAtom := expressionAtom (^)mathOperator expressionAtom , { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, ORDERBY, }
expressionAtom := expressionAtom mathOperator expressionAtom (^), { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, ORDERBY, }
mathOperator := (^)'/' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'+' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <413> by expressionAtom to <412>.
This condition already existed.
From Condition <413> get package:
constantNum := '-' (^)positiveNum , { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, ORDERBY, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := (^)'NUMBER_CONSTANT' , { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, ORDERBY, }
constantNum := '-' (^)positiveNum , { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, ORDERBY, }
===============================================================================

SHIFT <413> by '-' to <419>
From Condition <419> get package:
positiveNum := 'NUMBER_CONSTANT' (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, ORDERBY, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := 'NUMBER_CONSTANT' (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, ORDERBY, }
===============================================================================

SHIFT <419> by 'NUMBER_CONSTANT' to <420>
Condition<420>, REDUCE Production by '==': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<420>, REDUCE Production by '*': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<420>, REDUCE Production by '>': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<420>, REDUCE Production by '<': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<420>, REDUCE Production by '/': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<420>, REDUCE Production by '<=': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<420>, REDUCE Production by '%': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<420>, REDUCE Production by '>=': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<420>, REDUCE Production by '!=': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<420>, REDUCE Production by '+': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<420>, REDUCE Production by '-': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<420>, REDUCE Production by 'AND': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<420>, REDUCE Production by '$eof$': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<420>, REDUCE Production by 'OR': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<420>, REDUCE Production by 'ORDERBY': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
From Condition <419> get package:
constantNum := '-' positiveNum (^), { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, ORDERBY, }
-------------------------------------------------------------------------------

After tracing, got package:
constantNum := '-' positiveNum (^), { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, ORDERBY, }
===============================================================================

SHIFT <419> by positiveNum to <421>.
Condition<421>, REDUCE Production by '==': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<421>, REDUCE Production by '>': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<421>, REDUCE Production by '*': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<421>, REDUCE Production by '<': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<421>, REDUCE Production by '<=': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<421>, REDUCE Production by '/': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<421>, REDUCE Production by '>=': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<421>, REDUCE Production by '%': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<421>, REDUCE Production by '!=': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<421>, REDUCE Production by '+': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<421>, REDUCE Production by '-': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<421>, REDUCE Production by 'AND': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<421>, REDUCE Production by '$eof$': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<421>, REDUCE Production by 'OR': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<421>, REDUCE Production by 'ORDERBY': 
pid <77>: 
constantNum := '-' positiveNum 
From Condition <413> get package:
expressionAtom := constantNum (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, ORDERBY, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := constantNum (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, ORDERBY, }
===============================================================================

SHIFT <413> by constantNum to <380>.
This condition already existed.
From Condition <413> get package:
expressionAtom := columnName (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, ORDERBY, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := columnName (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, ORDERBY, }
===============================================================================

SHIFT <413> by columnName to <381>.
This condition already existed.
From Condition <413> get package:
positiveNum := 'NUMBER_CONSTANT' (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, ORDERBY, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := 'NUMBER_CONSTANT' (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, ORDERBY, }
===============================================================================

SHIFT <413> by 'NUMBER_CONSTANT' to <420>
This condition already existed.
Condition<412>, REDUCE Production by '==': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Already existed SHIFT by symbol'*' :
<33>
Try to set it to: REDUCE to:
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Reset Action[412]['*'] to REDUCE:
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Condition<412>, REDUCE Production by '>': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Condition<412>, REDUCE Production by '<': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Condition<412>, REDUCE Production by '/': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Condition<412>, REDUCE Production by '<=': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Already existed SHIFT by symbol'%' :
<26>
Try to set it to: REDUCE to:
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Reset Action[412]['%'] to REDUCE:
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Condition<412>, REDUCE Production by '>=': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Condition<412>, REDUCE Production by '!=': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Condition<412>, REDUCE Production by '+': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Already existed SHIFT by symbol'-' :
<34>
Try to set it to: REDUCE to:
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Reset Action[412]['-'] to REDUCE:
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Condition<412>, REDUCE Production by 'AND': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Condition<412>, REDUCE Production by '$eof$': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Condition<412>, REDUCE Production by 'OR': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Condition<412>, REDUCE Production by 'ORDERBY': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
From Condition <412> get package:
mathOperator := '/' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '/' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

Already existed REDUCE by symbol '/': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Try to set it to: SHIFT to <40>
Set SHIFT fail in: from condition <412> to condition <40>.
This condition already existed.
From Condition <412> get package:
mathOperator := '+' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '+' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

Already existed REDUCE by symbol '+': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Try to set it to: SHIFT to <41>
Set SHIFT fail in: from condition <412> to condition <41>.
This condition already existed.
From Condition <406> get package:
constantNum := '-' (^)positiveNum , { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, ORDERBY, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := (^)'NUMBER_CONSTANT' , { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, ORDERBY, }
constantNum := '-' (^)positiveNum , { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, ORDERBY, }
===============================================================================

SHIFT <406> by '-' to <422>
From Condition <422> get package:
positiveNum := 'NUMBER_CONSTANT' (^), { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, ORDERBY, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := 'NUMBER_CONSTANT' (^), { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, ORDERBY, }
===============================================================================

SHIFT <422> by 'NUMBER_CONSTANT' to <423>
Condition<423>, REDUCE Production by '==': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<423>, REDUCE Production by '>': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<423>, REDUCE Production by '*': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<423>, REDUCE Production by '<': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<423>, REDUCE Production by '<=': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<423>, REDUCE Production by '/': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<423>, REDUCE Production by '>=': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<423>, REDUCE Production by '%': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<423>, REDUCE Production by '!=': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<423>, REDUCE Production by '+': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<423>, REDUCE Production by '-': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<423>, REDUCE Production by 'AND': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<423>, REDUCE Production by '$eof$': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<423>, REDUCE Production by 'OR': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<423>, REDUCE Production by 'ORDERBY': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
From Condition <422> get package:
constantNum := '-' positiveNum (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, ORDERBY, }
-------------------------------------------------------------------------------

After tracing, got package:
constantNum := '-' positiveNum (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, ORDERBY, }
===============================================================================

SHIFT <422> by positiveNum to <424>.
Condition<424>, REDUCE Production by '==': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<424>, REDUCE Production by '*': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<424>, REDUCE Production by '>': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<424>, REDUCE Production by '<': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<424>, REDUCE Production by '/': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<424>, REDUCE Production by '<=': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<424>, REDUCE Production by '%': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<424>, REDUCE Production by '>=': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<424>, REDUCE Production by '!=': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<424>, REDUCE Production by '+': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<424>, REDUCE Production by '-': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<424>, REDUCE Production by 'AND': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<424>, REDUCE Production by '$eof$': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<424>, REDUCE Production by 'OR': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<424>, REDUCE Production by 'ORDERBY': 
pid <77>: 
constantNum := '-' positiveNum 
From Condition <406> get package:
expressionAtom := constantNum (^), { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, ORDERBY, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := constantNum (^), { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, ORDERBY, }
===============================================================================

SHIFT <406> by constantNum to <425>.
Condition<425>, REDUCE Production by '==': 
pid <73>: 
expressionAtom := constantNum 
Condition<425>, REDUCE Production by '>': 
pid <73>: 
expressionAtom := constantNum 
Condition<425>, REDUCE Production by '*': 
pid <73>: 
expressionAtom := constantNum 
Condition<425>, REDUCE Production by '<': 
pid <73>: 
expressionAtom := constantNum 
Condition<425>, REDUCE Production by '<=': 
pid <73>: 
expressionAtom := constantNum 
Condition<425>, REDUCE Production by '/': 
pid <73>: 
expressionAtom := constantNum 
Condition<425>, REDUCE Production by '>=': 
pid <73>: 
expressionAtom := constantNum 
Condition<425>, REDUCE Production by '%': 
pid <73>: 
expressionAtom := constantNum 
Condition<425>, REDUCE Production by '!=': 
pid <73>: 
expressionAtom := constantNum 
Condition<425>, REDUCE Production by '+': 
pid <73>: 
expressionAtom := constantNum 
Condition<425>, REDUCE Production by '-': 
pid <73>: 
expressionAtom := constantNum 
Condition<425>, REDUCE Production by 'AND': 
pid <73>: 
expressionAtom := constantNum 
Condition<425>, REDUCE Production by '$eof$': 
pid <73>: 
expressionAtom := constantNum 
Condition<425>, REDUCE Production by 'OR': 
pid <73>: 
expressionAtom := constantNum 
Condition<425>, REDUCE Production by 'ORDERBY': 
pid <73>: 
expressionAtom := constantNum 
From Condition <406> get package:
expressionAtom := columnName (^), { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, ORDERBY, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := columnName (^), { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, ORDERBY, }
===============================================================================

SHIFT <406> by columnName to <426>.
Condition<426>, REDUCE Production by '==': 
pid <75>: 
expressionAtom := columnName 
Condition<426>, REDUCE Production by '>': 
pid <75>: 
expressionAtom := columnName 
Condition<426>, REDUCE Production by '*': 
pid <75>: 
expressionAtom := columnName 
Condition<426>, REDUCE Production by '<': 
pid <75>: 
expressionAtom := columnName 
Condition<426>, REDUCE Production by '<=': 
pid <75>: 
expressionAtom := columnName 
Condition<426>, REDUCE Production by '/': 
pid <75>: 
expressionAtom := columnName 
Condition<426>, REDUCE Production by '>=': 
pid <75>: 
expressionAtom := columnName 
Condition<426>, REDUCE Production by '%': 
pid <75>: 
expressionAtom := columnName 
Condition<426>, REDUCE Production by '!=': 
pid <75>: 
expressionAtom := columnName 
Condition<426>, REDUCE Production by '+': 
pid <75>: 
expressionAtom := columnName 
Condition<426>, REDUCE Production by '-': 
pid <75>: 
expressionAtom := columnName 
Condition<426>, REDUCE Production by 'AND': 
pid <75>: 
expressionAtom := columnName 
Condition<426>, REDUCE Production by '$eof$': 
pid <75>: 
expressionAtom := columnName 
Condition<426>, REDUCE Production by 'OR': 
pid <75>: 
expressionAtom := columnName 
Condition<426>, REDUCE Production by 'ORDERBY': 
pid <75>: 
expressionAtom := columnName 
From Condition <406> get package:
positiveNum := 'NUMBER_CONSTANT' (^), { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, ORDERBY, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := 'NUMBER_CONSTANT' (^), { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, ORDERBY, }
===============================================================================

SHIFT <406> by 'NUMBER_CONSTANT' to <423>
This condition already existed.
From Condition <382> get package:
mathOperator := '+' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '+' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <382> by '+' to <41>
This condition already existed.
From Condition <382> get package:
mathOperator := '%' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '%' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <382> by '%' to <26>
This condition already existed.
From Condition <382> get package:
mathOperator := '/' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '/' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <382> by '/' to <40>
This condition already existed.
From Condition <379> get package:
expression := expression (^)logicalOperator expression , { $eof$, AND, OR, ORDERBY, }
expression := expression logicalOperator expression (^), { AND, $eof$, OR, ORDERBY, }
-------------------------------------------------------------------------------

After tracing, got package:
logicalOperator := (^)'OR' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
expression := expression (^)logicalOperator expression , { $eof$, AND, OR, ORDERBY, }
expression := expression logicalOperator expression (^), { AND, $eof$, OR, ORDERBY, }
logicalOperator := (^)'AND' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <379> by expression to <427>.
From Condition <427> get package:
logicalOperator := 'OR' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
logicalOperator := 'OR' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <427> by 'OR' to <377>
This condition already existed.
From Condition <427> get package:
expression := expression logicalOperator (^)expression , { $eof$, AND, OR, ORDERBY, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := (^)constantNum , { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, ORDERBY, }
expressionAtom := (^)columnName , { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, ORDERBY, }
predicate := (^)expressionAtom comparisonOperator expressionAtom , { $eof$, AND, OR, ORDERBY, }
expression := expression logicalOperator (^)expression , { $eof$, AND, OR, ORDERBY, }
expression := (^)expression logicalOperator expression , { AND, $eof$, OR, ORDERBY, }
expressionAtom := (^)'STR_LITERAL' , { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, ORDERBY, }
expressionAtom := (^)expressionAtom mathOperator expressionAtom , { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, ORDERBY, }
predicate := (^)expressionAtom , { $eof$, AND, OR, ORDERBY, }
expression := (^)predicate , { AND, $eof$, OR, ORDERBY, }
constantNum := (^)positiveNum , { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, ORDERBY, }
constantNum := (^)'-' positiveNum , { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, ORDERBY, }
columnName := (^)'ID' , { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, ORDERBY, }
columnName := (^)'ID' '.' 'ID' , { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, ORDERBY, }
positiveNum := (^)'NUMBER_CONSTANT' , { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, ORDERBY, }
===============================================================================

SHIFT <427> by logicalOperator to <428>.
From Condition <428> get package:
expressionAtom := constantNum (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, ORDERBY, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := constantNum (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, ORDERBY, }
===============================================================================

SHIFT <428> by constantNum to <332>.
This condition already existed.
From Condition <428> get package:
expressionAtom := columnName (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, ORDERBY, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := columnName (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, ORDERBY, }
===============================================================================

SHIFT <428> by columnName to <335>.
This condition already existed.
From Condition <428> get package:
predicate := expressionAtom (^)comparisonOperator expressionAtom , { $eof$, AND, OR, ORDERBY, }
predicate := expressionAtom (^), { $eof$, AND, OR, ORDERBY, }
expressionAtom := expressionAtom (^)mathOperator expressionAtom , { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, ORDERBY, }
-------------------------------------------------------------------------------

After tracing, got package:
comparisonOperator := (^)'>' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
comparisonOperator := (^)'<=' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
comparisonOperator := (^)'!=' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
predicate := expressionAtom (^)comparisonOperator expressionAtom , { $eof$, AND, OR, ORDERBY, }
comparisonOperator := (^)'==' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
comparisonOperator := (^)'<' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
comparisonOperator := (^)'>=' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'*' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
predicate := expressionAtom (^), { $eof$, AND, OR, ORDERBY, }
mathOperator := (^)'-' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
expressionAtom := expressionAtom (^)mathOperator expressionAtom , { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, ORDERBY, }
mathOperator := (^)'+' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'%' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'/' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <428> by expressionAtom to <429>.
From Condition <429> get package:
comparisonOperator := '>' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
comparisonOperator := '>' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <429> by '>' to <346>
This condition already existed.
From Condition <429> get package:
comparisonOperator := '<=' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
comparisonOperator := '<=' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <429> by '<=' to <344>
This condition already existed.
From Condition <429> get package:
comparisonOperator := '!=' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
comparisonOperator := '!=' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <429> by '!=' to <342>
This condition already existed.
From Condition <429> get package:
predicate := expressionAtom comparisonOperator (^)expressionAtom , { $eof$, AND, OR, ORDERBY, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := (^)'ID' '.' 'ID' , { $eof$, AND, OR, ORDERBY, *, /, %, +, -, }
constantNum := (^)'-' positiveNum , { $eof$, AND, OR, ORDERBY, *, /, %, +, -, }
expressionAtom := (^)constantNum , { AND, $eof$, OR, *, ORDERBY, /, %, +, -, }
expressionAtom := (^)columnName , { AND, $eof$, OR, *, ORDERBY, /, %, +, -, }
predicate := expressionAtom comparisonOperator (^)expressionAtom , { $eof$, AND, OR, ORDERBY, }
columnName := (^)'ID' , { $eof$, AND, OR, ORDERBY, *, /, %, +, -, }
constantNum := (^)positiveNum , { $eof$, AND, OR, ORDERBY, *, /, %, +, -, }
expressionAtom := (^)'STR_LITERAL' , { AND, $eof$, OR, *, ORDERBY, /, %, +, -, }
expressionAtom := (^)expressionAtom mathOperator expressionAtom , { AND, $eof$, OR, *, ORDERBY, /, %, +, -, }
positiveNum := (^)'NUMBER_CONSTANT' , { AND, $eof$, OR, *, ORDERBY, /, %, +, -, }
===============================================================================

SHIFT <429> by comparisonOperator to <348>.
This condition already existed.
From Condition <429> get package:
comparisonOperator := '==' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
comparisonOperator := '==' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <429> by '==' to <347>
This condition already existed.
From Condition <429> get package:
comparisonOperator := '<' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
comparisonOperator := '<' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <429> by '<' to <345>
This condition already existed.
From Condition <429> get package:
comparisonOperator := '>=' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
comparisonOperator := '>=' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <429> by '>=' to <343>
This condition already existed.
From Condition <429> get package:
mathOperator := '*' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '*' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <429> by '*' to <33>
This condition already existed.
Condition<429>, REDUCE Production by '$eof$': 
pid <72>: 
predicate := expressionAtom 
Condition<429>, REDUCE Production by 'AND': 
pid <72>: 
predicate := expressionAtom 
Condition<429>, REDUCE Production by 'OR': 
pid <72>: 
predicate := expressionAtom 
Condition<429>, REDUCE Production by 'ORDERBY': 
pid <72>: 
predicate := expressionAtom 
From Condition <429> get package:
mathOperator := '-' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '-' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <429> by '-' to <34>
This condition already existed.
From Condition <429> get package:
expressionAtom := expressionAtom mathOperator (^)expressionAtom , { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, ORDERBY, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := (^)'ID' , { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, ORDERBY, }
constantNum := (^)positiveNum , { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, ORDERBY, }
expressionAtom := (^)'STR_LITERAL' , { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, ORDERBY, }
expressionAtom := expressionAtom mathOperator (^)expressionAtom , { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, ORDERBY, }
expressionAtom := (^)expressionAtom mathOperator expressionAtom , { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, ORDERBY, }
columnName := (^)'ID' '.' 'ID' , { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, ORDERBY, }
constantNum := (^)'-' positiveNum , { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, ORDERBY, }
expressionAtom := (^)constantNum , { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, ORDERBY, }
expressionAtom := (^)columnName , { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, ORDERBY, }
positiveNum := (^)'NUMBER_CONSTANT' , { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, ORDERBY, }
===============================================================================

SHIFT <429> by mathOperator to <320>.
This condition already existed.
From Condition <429> get package:
mathOperator := '+' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '+' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <429> by '+' to <41>
This condition already existed.
From Condition <429> get package:
mathOperator := '%' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '%' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <429> by '%' to <26>
This condition already existed.
From Condition <429> get package:
mathOperator := '/' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '/' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <429> by '/' to <40>
This condition already existed.
From Condition <428> get package:
expression := expression (^)logicalOperator expression , { AND, $eof$, OR, ORDERBY, }
expression := expression logicalOperator expression (^), { $eof$, AND, OR, ORDERBY, }
-------------------------------------------------------------------------------

After tracing, got package:
logicalOperator := (^)'OR' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
expression := expression (^)logicalOperator expression , { AND, $eof$, OR, ORDERBY, }
expression := expression logicalOperator expression (^), { $eof$, AND, OR, ORDERBY, }
logicalOperator := (^)'AND' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <428> by expression to <430>.
From Condition <430> get package:
logicalOperator := 'OR' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
logicalOperator := 'OR' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <430> by 'OR' to <377>
This condition already existed.
From Condition <430> get package:
expression := expression logicalOperator (^)expression , { AND, $eof$, OR, ORDERBY, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := (^)constantNum , { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, ORDERBY, }
expressionAtom := (^)columnName , { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, ORDERBY, }
predicate := (^)expressionAtom comparisonOperator expressionAtom , { AND, $eof$, OR, ORDERBY, }
expression := expression logicalOperator (^)expression , { AND, $eof$, OR, ORDERBY, }
expression := (^)expression logicalOperator expression , { $eof$, AND, OR, ORDERBY, }
expressionAtom := (^)'STR_LITERAL' , { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, ORDERBY, }
expressionAtom := (^)expressionAtom mathOperator expressionAtom , { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, ORDERBY, }
predicate := (^)expressionAtom , { AND, $eof$, OR, ORDERBY, }
expression := (^)predicate , { $eof$, AND, OR, ORDERBY, }
constantNum := (^)positiveNum , { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, ORDERBY, }
constantNum := (^)'-' positiveNum , { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, ORDERBY, }
columnName := (^)'ID' , { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, ORDERBY, }
columnName := (^)'ID' '.' 'ID' , { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, ORDERBY, }
positiveNum := (^)'NUMBER_CONSTANT' , { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, ORDERBY, }
===============================================================================

SHIFT <430> by logicalOperator to <379>.
This condition already existed.
Condition<430>, REDUCE Production by '$eof$': 
pid <69>: 
expression := expression logicalOperator expression 
Condition<430>, REDUCE Production by 'AND': 
pid <69>: 
expression := expression logicalOperator expression 
Already existed SHIFT by symbol'OR' :
<377>
Try to set it to: REDUCE to:
pid <69>: 
expression := expression logicalOperator expression 
Reset Action[430]['OR'] to REDUCE:
pid <69>: 
expression := expression logicalOperator expression 
Condition<430>, REDUCE Production by 'ORDERBY': 
pid <69>: 
expression := expression logicalOperator expression 
From Condition <430> get package:
logicalOperator := 'AND' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
logicalOperator := 'AND' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

Already existed REDUCE by symbol 'AND': 
pid <69>: 
expression := expression logicalOperator expression 
Try to set it to: SHIFT to <376>
Set SHIFT fail in: from condition <430> to condition <376>.
This condition already existed.
From Condition <428> get package:
expressionAtom := 'STR_LITERAL' (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, ORDERBY, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := 'STR_LITERAL' (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, ORDERBY, }
===============================================================================

SHIFT <428> by 'STR_LITERAL' to <318>
This condition already existed.
From Condition <428> get package:
expression := predicate (^), { AND, $eof$, OR, ORDERBY, }
-------------------------------------------------------------------------------

After tracing, got package:
expression := predicate (^), { AND, $eof$, OR, ORDERBY, }
===============================================================================

SHIFT <428> by predicate to <374>.
This condition already existed.
From Condition <428> get package:
constantNum := positiveNum (^), { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, ORDERBY, }
-------------------------------------------------------------------------------

After tracing, got package:
constantNum := positiveNum (^), { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, ORDERBY, }
===============================================================================

SHIFT <428> by positiveNum to <329>.
This condition already existed.
From Condition <428> get package:
constantNum := '-' (^)positiveNum , { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, ORDERBY, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := (^)'NUMBER_CONSTANT' , { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, ORDERBY, }
constantNum := '-' (^)positiveNum , { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, ORDERBY, }
===============================================================================

SHIFT <428> by '-' to <333>
This condition already existed.
From Condition <428> get package:
columnName := 'ID' (^), { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, ORDERBY, }
columnName := 'ID' (^)'.' 'ID' , { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, ORDERBY, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID' (^), { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, ORDERBY, }
columnName := 'ID' (^)'.' 'ID' , { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, ORDERBY, }
===============================================================================

SHIFT <428> by 'ID' to <328>
This condition already existed.
From Condition <428> get package:
positiveNum := 'NUMBER_CONSTANT' (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, ORDERBY, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := 'NUMBER_CONSTANT' (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, ORDERBY, }
===============================================================================

SHIFT <428> by 'NUMBER_CONSTANT' to <334>
This condition already existed.
Condition<427>, REDUCE Production by 'AND': 
pid <69>: 
expression := expression logicalOperator expression 
Condition<427>, REDUCE Production by '$eof$': 
pid <69>: 
expression := expression logicalOperator expression 
Already existed SHIFT by symbol'OR' :
<377>
Try to set it to: REDUCE to:
pid <69>: 
expression := expression logicalOperator expression 
Reset Action[427]['OR'] to REDUCE:
pid <69>: 
expression := expression logicalOperator expression 
Condition<427>, REDUCE Production by 'ORDERBY': 
pid <69>: 
expression := expression logicalOperator expression 
From Condition <427> get package:
logicalOperator := 'AND' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
logicalOperator := 'AND' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

Already existed REDUCE by symbol 'AND': 
pid <69>: 
expression := expression logicalOperator expression 
Try to set it to: SHIFT to <376>
Set SHIFT fail in: from condition <427> to condition <376>.
This condition already existed.
From Condition <379> get package:
expressionAtom := 'STR_LITERAL' (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, ORDERBY, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := 'STR_LITERAL' (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, ORDERBY, }
===============================================================================

SHIFT <379> by 'STR_LITERAL' to <418>
This condition already existed.
From Condition <379> get package:
expression := predicate (^), { $eof$, AND, OR, ORDERBY, }
-------------------------------------------------------------------------------

After tracing, got package:
expression := predicate (^), { $eof$, AND, OR, ORDERBY, }
===============================================================================

SHIFT <379> by predicate to <431>.
Condition<431>, REDUCE Production by '$eof$': 
pid <70>: 
expression := predicate 
Condition<431>, REDUCE Production by 'AND': 
pid <70>: 
expression := predicate 
Condition<431>, REDUCE Production by 'OR': 
pid <70>: 
expression := predicate 
Condition<431>, REDUCE Production by 'ORDERBY': 
pid <70>: 
expression := predicate 
From Condition <379> get package:
constantNum := positiveNum (^), { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, ORDERBY, }
-------------------------------------------------------------------------------

After tracing, got package:
constantNum := positiveNum (^), { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, ORDERBY, }
===============================================================================

SHIFT <379> by positiveNum to <417>.
This condition already existed.
From Condition <379> get package:
constantNum := '-' (^)positiveNum , { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, ORDERBY, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := (^)'NUMBER_CONSTANT' , { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, ORDERBY, }
constantNum := '-' (^)positiveNum , { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, ORDERBY, }
===============================================================================

SHIFT <379> by '-' to <419>
This condition already existed.
From Condition <379> get package:
columnName := 'ID' (^), { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, ORDERBY, }
columnName := 'ID' (^)'.' 'ID' , { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, ORDERBY, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID' (^), { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, ORDERBY, }
columnName := 'ID' (^)'.' 'ID' , { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, ORDERBY, }
===============================================================================

SHIFT <379> by 'ID' to <414>
This condition already existed.
From Condition <379> get package:
positiveNum := 'NUMBER_CONSTANT' (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, ORDERBY, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := 'NUMBER_CONSTANT' (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, ORDERBY, }
===============================================================================

SHIFT <379> by 'NUMBER_CONSTANT' to <420>
This condition already existed.
From Condition <206> get package:
selectStatement := 'SELECT' selectElements fromClause orderByClause (^), { $eof$, }
-------------------------------------------------------------------------------

After tracing, got package:
selectStatement := 'SELECT' selectElements fromClause orderByClause (^), { $eof$, }
===============================================================================

SHIFT <206> by orderByClause to <432>.
Condition<432>, REDUCE Production by '$eof$': 
pid <37>: 
selectStatement := 'SELECT' selectElements fromClause orderByClause 
From Condition <64> get package:
columnName := 'ID' (^), { FROM, *, /, %, +, -, ,, }
columnName := 'ID' (^)'.' 'ID' , { FROM, *, /, %, +, -, ,, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID' (^), { FROM, *, /, %, +, -, ,, }
columnName := 'ID'From Condition < (^)'.' 64> get package:'ID' 
, { FROM, *, expressionAtom/ , := %, +, columnName- , ,, (^)}, { 
FROM===============================================================================, 
*
, /, %, +, ,, -, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := columnName (^), { FROM, *, /, %, +, ,, -, }
===============================================================================

SHIFT <64> by 'ID' to <89>
This condition already existed.
SHIFT <64> by columnName to <108>.
This condition already existed.
From Condition <64> get package:
selectElements := '$' (^), { FROM, }
-------------------------------------------------------------------------------

After tracing, got package:
selectElements := '$' (^), { FROM, }
===============================================================================

From Condition <64> get package:
expressionAtom := 'STR_LITERAL' (^), { FROM, *, /, %, +, ,, -, }
-------------------------------------------------------------------------------

After tracing, got package:
SHIFT <expressionAtom64 > by ':= $' to <433'STR_LITERAL'> 
(^), { FROM, *, /, %, +, ,, -, }
===============================================================================
Condition<
433>, REDUCE Production by 'FROM': 
pid <49>: 
selectElements := '$' 
SHIFT <64> by 'STR_LITERAL' to <96>
This condition already existed.
From Condition <64> get package:
expressionAtom := constantNum (^), { FROM, *, /, %, +, ,, -, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := constantNum (^), { FROM, *, /, %, +, ,, -, }
===============================================================================

From Condition <64> get package:
constantNum := positiveNum (^), { FROM, *, /, %, +, -, ,, }
-------------------------------------------------------------------------------

After tracing, got package:
constantNum := positiveNum (^), { FROM, *, /, %, +, -, ,, }
===============================================================================

SHIFT <64> by constantNum to <107>.
This condition already existed.
SHIFT <64> by positiveNum to <95>.
This condition already existed.
From Condition <64> get package:
constantNum := '-' (^)positiveNum , { FROM, *, /, %, +, -, ,, }
-------------------------------------------------------------------------------

From Condition <64> get package:
positiveNum := 'NUMBER_CONSTANT' (^), { FROM, *, /, %, +, ,, -, }
-------------------------------------------------------------------------------

After tracing, got package:After tracing, got package:

positiveNumpositiveNum  := := (^)'NUMBER_CONSTANT' 'NUMBER_CONSTANT'(^) , { FROM, { , *FROM, , *, /, /%, , +, %,, , +-, , ,}, -, 
}constantNum := 
'-'=============================================================================== 
(^)positiveNum
 , { FROM, *, /, %, +, -, ,, }
===============================================================================

SHIFT <64> by 'NUMBER_CONSTANT' to <103>
This condition already existed.
SHIFT <64> by '-' to <101>
This condition already existed.
From Condition <1> get package:
ddlStatement := createTable (^), { $eof$, }
-------------------------------------------------------------------------------

After tracing, got package:
ddlStatement := createTable (^), { $eof$, }
===============================================================================

From Condition <1> get package:
updateStatement := 'UPDATE' (^)tableName 'SET' updateElements , { $eof$, }
SHIFT <updateStatement1 > by := createTable to <434'UPDATE'>. 
(^)tableName 'SET' updateElements 'WHERE' expression , { $eof$, }
-------------------------------------------------------------------------------Condition<434
>, REDUCE Production by '$eof$
': 
pid <4>: 
ddlStatement := createTable 
After tracing, got package:
tableName := (^)'ID' , { SET, }
updateStatement := 'UPDATE' (^)tableName 'SET' updateElements , { $eof$, }
updateStatement := 'UPDATE' (^)tableName 'SET' updateElements 'WHERE' expression , { $eof$, }
===============================================================================

SHIFT <1> by 'UPDATE' to <435>
From Condition <435> get package:
tableName := 'ID' (^), { SET, }
-------------------------------------------------------------------------------

After tracing, got package:
tableName := 'ID' (^), { SET, }
===============================================================================

From Condition <435> get package:
SHIFT <435updateStatement> by ' ID' to <436:= >
'UPDATE' tableName (^)'SET' updateElements , { Condition<436$eof$>, REDUCE Production by ', SET': }

pid <66>: 
updateStatementtableName  := := 'ID' 
'UPDATE' tableName (^)'SET' updateElements 'WHERE' expression , { $eof$, }
-------------------------------------------------------------------------------

After tracing, got package:
updateStatement := 'UPDATE' tableName (^)'SET' updateElements , { $eof$, }
updateStatement := 'UPDATE' tableName (^)'SET' updateElements 'WHERE' expression , { $eof$, }
===============================================================================

SHIFT <435> by tableName to <437>.
From Condition <437> get package:
updateStatement := 'UPDATE' tableName 'SET' (^)updateElements , { $eof$, }
updateStatement := 'UPDATE' tableName 'SET' (^)updateElements 'WHERE' expression , { $eof$, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := (^)'ID' , { =, }
updateElement := (^)columnName '=' 'DEFAULT' , { ,, $eof$, WHERE, }
updateElements := (^)updateElement , { $eof$, WHERE, }
updateStatement := 'UPDATE' tableName 'SET' (^)updateElements , { $eof$, }
columnName := (^)'ID' '.' 'ID' , { =, }
updateElement := (^)columnName '=' expressionAtom , { ,, $eof$, WHERE, }
updateElements := (^)updateElement $__ann_36 , { $eof$, WHERE, }
updateStatement := 'UPDATE' tableName 'SET' (^)updateElements 'WHERE' expression , { $eof$, }
===============================================================================

SHIFT <437> by 'SET' to <438>
From Condition <438> get package:
columnName := 'ID' (^), { =, }
columnName := 'ID' (^)'.' 'ID' , { =, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID' (^), { =, }
columnName := 'ID' (^)'.' 'ID' , { =, }
===============================================================================

SHIFT <438> by 'ID' to <439>
Condition<439>, REDUCE Production by '=': 
pid <68>: 
columnName := 'ID' 
From Condition <439> get package:
columnName := 'ID' '.' (^)'ID' , { =, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID' '.' (^)'ID' , { =, }
===============================================================================

SHIFT <439> by '.' to <440>
From Condition <440> get package:
columnName := 'ID' '.' 'ID' (^), { =, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID' '.' 'ID' (^), { =, }
===============================================================================

SHIFT <440> by 'ID' to <441>
Condition<441>, REDUCE Production by '=': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
From Condition <438> get package:
updateElement := columnName (^)'=' 'DEFAULT' , { ,, $eof$, WHERE, }
updateElement := columnName (^)'=' expressionAtom , { ,, $eof$, WHERE, }
-------------------------------------------------------------------------------

After tracing, got package:
updateElement := columnName (^)'=' 'DEFAULT' , { ,, $eof$, WHERE, }
updateElement := columnName (^)'=' expressionAtom , { ,, $eof$, WHERE, }
===============================================================================

SHIFT <438> by columnName to <442>.
From Condition <442> get package:
updateElement := columnName '=' (^)'DEFAULT' , { ,, $eof$, WHERE, }
updateElement := columnName '=' (^)expressionAtom , { ,, $eof$, WHERE, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := (^)'ID' , { ,, -, $eof$, WHERE, +, *, /, %, }
constantNum := (^)positiveNum , { ,, -, $eof$, WHERE, +, *, /, %, }
expressionAtom := (^)'STR_LITERAL' , { -, ,, $eof$, +, WHERE, *, /, %, }
expressionAtom := (^)expressionAtom mathOperator expressionAtom , { -, ,, $eof$, +, WHERE, *, /, %, }
updateElement := columnName '=' (^)'DEFAULT' , { ,, $eof$, WHERE, }
constantNum := (^)'-' positiveNum , { ,, -, $eof$, WHERE, +, *, /, %, }
expressionAtom := (^)constantNum , { -, ,, $eof$, +, WHERE, *, /, %, }
expressionAtom := (^)columnName , { -, ,, $eof$, +, WHERE, *, /, %, }
positiveNum := (^)'NUMBER_CONSTANT' , { -, ,, $eof$, +, WHERE, *, /, %, }
updateElement := columnName '=' (^)expressionAtom , { ,, $eof$, WHERE, }
columnName := (^)'ID' '.' 'ID' , { ,, -, $eof$, WHERE, +, *, /, %, }
===============================================================================

SHIFT <442> by '=' to <443>
From Condition <443> get package:
columnName := 'ID' (^), { ,, -, $eof$, WHERE, +, *, /, %, }
columnName := 'ID' (^)'.' 'ID' , { ,, -, $eof$, WHERE, +, *, /, %, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID' (^), { ,, -, $eof$, WHERE, +, *, /, %, }
columnName := 'ID' (^)'.' 'ID' , { ,, -, $eof$, WHERE, +, *, /, %, }
===============================================================================

SHIFT <443> by 'ID' to <444>
Condition<444>, REDUCE Production by ',': 
pid <68>: 
columnName := 'ID' 
Condition<444>, REDUCE Production by '-': 
pid <68>: 
columnName := 'ID' 
Condition<444>, REDUCE Production by '$eof$': 
pid <68>: 
columnName := 'ID' 
Condition<444>, REDUCE Production by 'WHERE': 
pid <68>: 
columnName := 'ID' 
Condition<444>, REDUCE Production by '+': 
pid <68>: 
columnName := 'ID' 
Condition<444>, REDUCE Production by '*': 
pid <68>: 
columnName := 'ID' 
Condition<444>, REDUCE Production by '/': 
pid <68>: 
columnName := 'ID' 
Condition<444>, REDUCE Production by '%': 
pid <68>: 
columnName := 'ID' 
From Condition <444> get package:
columnName := 'ID' '.' (^)'ID' , { ,, -, $eof$, WHERE, +, *, /, %, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID' '.' (^)'ID' , { ,, -, $eof$, WHERE, +, *, /, %, }
===============================================================================

SHIFT <444> by '.' to <445>
From Condition <445> get package:
columnName := 'ID' '.' 'ID' (^), { ,, -, $eof$, WHERE, +, *, /, %, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID' '.' 'ID' (^), { ,, -, $eof$, WHERE, +, *, /, %, }
===============================================================================

SHIFT <445> by 'ID' to <446>
Condition<446>, REDUCE Production by ',': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<446>, REDUCE Production by '-': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<446>, REDUCE Production by '$eof$': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<446>, REDUCE Production by 'WHERE': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<446>, REDUCE Production by '+': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<446>, REDUCE Production by '*': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<446>, REDUCE Production by '/': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<446>, REDUCE Production by '%': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
From Condition <443> get package:
constantNum := positiveNum (^), { ,, -, $eof$, WHERE, +, *, /, %, }
-------------------------------------------------------------------------------

After tracing, got package:
constantNum := positiveNum (^), { ,, -, $eof$, WHERE, +, *, /, %, }
===============================================================================

SHIFT <443> by positiveNum to <447>.
Condition<447>, REDUCE Production by ',': 
pid <78>: 
constantNum := positiveNum 
Condition<447>, REDUCE Production by '-': 
pid <78>: 
constantNum := positiveNum 
Condition<447>, REDUCE Production by '$eof$': 
pid <78>: 
constantNum := positiveNum 
Condition<447>, REDUCE Production by 'WHERE': 
pid <78>: 
constantNum := positiveNum 
Condition<447>, REDUCE Production by '+': 
pid <78>: 
constantNum := positiveNum 
Condition<447>, REDUCE Production by '*': 
pid <78>: 
constantNum := positiveNum 
Condition<447>, REDUCE Production by '/': 
pid <78>: 
constantNum := positiveNum 
Condition<447>, REDUCE Production by '%': 
pid <78>: 
constantNum := positiveNum 
From Condition <443> get package:
expressionAtom := 'STR_LITERAL' (^), { -, ,, $eof$, +, WHERE, *, /, %, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := 'STR_LITERAL' (^), { -, ,, $eof$, +, WHERE, *, /, %, }
===============================================================================

SHIFT <443> by 'STR_LITERAL' to <448>
Condition<448>, REDUCE Production by '-': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<448>, REDUCE Production by ',': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<448>, REDUCE Production by '$eof$': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<448>, REDUCE Production by '+': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<448>, REDUCE Production by 'WHERE': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<448>, REDUCE Production by '*': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<448>, REDUCE Production by '/': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<448>, REDUCE Production by '%': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
From Condition <443> get package:
expressionAtom := expressionAtom (^)mathOperator expressionAtom , { -, ,, $eof$, +, WHERE, *, /, %, }
updateElement := columnName '=' expressionAtom (^), { ,, $eof$, WHERE, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := (^)'*' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'%' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'-' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
expressionAtom := expressionAtom (^)mathOperator expressionAtom , { -, ,, $eof$, +, WHERE, *, /, %, }
mathOperator := (^)'/' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'+' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
updateElement := columnName '=' expressionAtom (^), { ,, $eof$, WHERE, }
===============================================================================

SHIFT <443> by expressionAtom to <449>.
From Condition <449> get package:
mathOperator := '*' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '*' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <449> by '*' to <33>
This condition already existed.
From Condition <449> get package:
mathOperator := '%' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '%' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <449> by '%' to <26>
This condition already existed.
From Condition <449> get package:
mathOperator := '-' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '-' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <449> by '-' to <34>
This condition already existed.
From Condition <449> get package:
expressionAtom := expressionAtom mathOperator (^)expressionAtom , { -, ,, $eof$, +, WHERE, *, /, %, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := (^)'ID' , { -, ,, $eof$, +, WHERE, *, /, %, }
constantNum := (^)positiveNum , { -, ,, $eof$, +, WHERE, *, /, %, }
expressionAtom := (^)'STR_LITERAL' , { ,, -, $eof$, WHERE, +, *, /, %, }
expressionAtom := expressionAtom mathOperator (^)expressionAtom , { -, ,, $eof$, +, WHERE, *, /, %, }
expressionAtom := (^)expressionAtom mathOperator expressionAtom , { ,, -, $eof$, WHERE, +, *, /, %, }
columnName := (^)'ID' '.' 'ID' , { -, ,, $eof$, +, WHERE, *, /, %, }
constantNum := (^)'-' positiveNum , { -, ,, $eof$, +, WHERE, *, /, %, }
expressionAtom := (^)constantNum , { ,, -, $eof$, WHERE, +, *, /, %, }
expressionAtom := (^)columnName , { ,, -, $eof$, WHERE, +, *, /, %, }
positiveNum := (^)'NUMBER_CONSTANT' , { ,, -, $eof$, WHERE, +, *, /, %, }
===============================================================================

SHIFT <449> by mathOperator to <450>.
From Condition <450> get package:
columnName := 'ID' (^), { -, ,, $eof$, +, WHERE, *, /, %, }
columnName := 'ID' (^)'.' 'ID' , { -, ,, $eof$, +, WHERE, *, /, %, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID' (^), { -, ,, $eof$, +, WHERE, *, /, %, }
columnName := 'ID' (^)'.' 'ID' , { -, ,, $eof$, +, WHERE, *, /, %, }
===============================================================================

SHIFT <450> by 'ID' to <451>
Condition<451>, REDUCE Production by '-': 
pid <68>: 
columnName := 'ID' 
Condition<451>, REDUCE Production by ',': 
pid <68>: 
columnName := 'ID' 
Condition<451>, REDUCE Production by '$eof$': 
pid <68>: 
columnName := 'ID' 
Condition<451>, REDUCE Production by '+': 
pid <68>: 
columnName := 'ID' 
Condition<451>, REDUCE Production by 'WHERE': 
pid <68>: 
columnName := 'ID' 
Condition<451>, REDUCE Production by '*': 
pid <68>: 
columnName := 'ID' 
Condition<451>, REDUCE Production by '/': 
pid <68>: 
columnName := 'ID' 
Condition<451>, REDUCE Production by '%': 
pid <68>: 
columnName := 'ID' 
From Condition <451> get package:
columnName := 'ID' '.' (^)'ID' , { -, ,, $eof$, +, WHERE, *, /, %, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID' '.' (^)'ID' , { -, ,, $eof$, +, WHERE, *, /, %, }
===============================================================================

SHIFT <451> by '.' to <452>
From Condition <452> get package:
columnName := 'ID' '.' 'ID' (^), { -, ,, $eof$, +, WHERE, *, /, %, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID' '.' 'ID' (^), { -, ,, $eof$, +, WHERE, *, /, %, }
===============================================================================

SHIFT <452> by 'ID' to <453>
Condition<453>, REDUCE Production by '-': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<453>, REDUCE Production by ',': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<453>, REDUCE Production by '$eof$': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<453>, REDUCE Production by '+': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<453>, REDUCE Production by 'WHERE': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<453>, REDUCE Production by '*': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<453>, REDUCE Production by '/': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<453>, REDUCE Production by '%': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
From Condition <450> get package:
constantNum := positiveNum (^), { -, ,, $eof$, +, WHERE, *, /, %, }
-------------------------------------------------------------------------------

After tracing, got package:
constantNum := positiveNum (^), { -, ,, $eof$, +, WHERE, *, /, %, }
===============================================================================

SHIFT <450> by positiveNum to <454>.
Condition<454>, REDUCE Production by '-': 
pid <78>: 
constantNum := positiveNum 
Condition<454>, REDUCE Production by ',': 
pid <78>: 
constantNum := positiveNum 
Condition<454>, REDUCE Production by '$eof$': 
pid <78>: 
constantNum := positiveNum 
Condition<454>, REDUCE Production by '+': 
pid <78>: 
constantNum := positiveNum 
Condition<454>, REDUCE Production by 'WHERE': 
pid <78>: 
constantNum := positiveNum 
Condition<454>, REDUCE Production by '*': 
pid <78>: 
constantNum := positiveNum 
Condition<454>, REDUCE Production by '/': 
pid <78>: 
constantNum := positiveNum 
Condition<454>, REDUCE Production by '%': 
pid <78>: 
constantNum := positiveNum 
From Condition <450> get package:
expressionAtom := 'STR_LITERAL' (^), { ,, -, $eof$, WHERE, +, *, /, %, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := 'STR_LITERAL' (^), { ,, -, $eof$, WHERE, +, *, /, %, }
===============================================================================

SHIFT <450> by 'STR_LITERAL' to <455>
Condition<455>, REDUCE Production by ',': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<455>, REDUCE Production by '-': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<455>, REDUCE Production by '$eof$': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<455>, REDUCE Production by 'WHERE': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<455>, REDUCE Production by '+': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<455>, REDUCE Production by '*': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<455>, REDUCE Production by '/': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<455>, REDUCE Production by '%': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
From Condition <450> get package:
expressionAtom := expressionAtom (^)mathOperator expressionAtom , { ,, -, $eof$, WHERE, +, *, /, %, }
expressionAtom := expressionAtom mathOperator expressionAtom (^), { -, ,, $eof$, +, WHERE, *, /, %, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := (^)'*' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'%' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'-' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
expressionAtom := expressionAtom (^)mathOperator expressionAtom , { ,, -, $eof$, WHERE, +, *, /, %, }
expressionAtom := expressionAtom mathOperator expressionAtom (^), { -, ,, $eof$, +, WHERE, *, /, %, }
mathOperator := (^)'/' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'+' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <450> by expressionAtom to <456>.
From Condition <456> get package:
mathOperator := '*' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '*' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <456> by '*' to <33>
This condition already existed.
From Condition <456> get package:
mathOperator := '%' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '%' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <456> by '%' to <26>
This condition already existed.
From Condition <456> get package:
mathOperator := '-' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '-' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <456> by '-' to <34>
This condition already existed.
From Condition <456> get package:
expressionAtom := expressionAtom mathOperator (^)expressionAtom , { ,, -, $eof$, WHERE, +, *, /, %, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := (^)'ID' , { ,, -, $eof$, WHERE, +, *, /, %, }
constantNum := (^)positiveNum , { ,, -, $eof$, WHERE, +, *, /, %, }
expressionAtom := (^)'STR_LITERAL' , { -, ,, $eof$, +, WHERE, *, /, %, }
expressionAtom := expressionAtom mathOperator (^)expressionAtom , { ,, -, $eof$, WHERE, +, *, /, %, }
expressionAtom := (^)expressionAtom mathOperator expressionAtom , { -, ,, $eof$, +, WHERE, *, /, %, }
columnName := (^)'ID' '.' 'ID' , { ,, -, $eof$, WHERE, +, *, /, %, }
constantNum := (^)'-' positiveNum , { ,, -, $eof$, WHERE, +, *, /, %, }
expressionAtom := (^)constantNum , { -, ,, $eof$, +, WHERE, *, /, %, }
expressionAtom := (^)columnName , { -, ,, $eof$, +, WHERE, *, /, %, }
positiveNum := (^)'NUMBER_CONSTANT' , { -, ,, $eof$, +, WHERE, *, /, %, }
===============================================================================

SHIFT <456> by mathOperator to <457>.
From Condition <457> get package:
columnName := 'ID' (^), { ,, -, $eof$, WHERE, +, *, /, %, }
columnName := 'ID' (^)'.' 'ID' , { ,, -, $eof$, WHERE, +, *, /, %, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID' (^), { ,, -, $eof$, WHERE, +, *, /, %, }
columnName := 'ID' (^)'.' 'ID' , { ,, -, $eof$, WHERE, +, *, /, %, }
===============================================================================

SHIFT <457> by 'ID' to <444>
This condition already existed.
From Condition <457> get package:
constantNum := positiveNum (^), { ,, -, $eof$, WHERE, +, *, /, %, }
-------------------------------------------------------------------------------

After tracing, got package:
constantNum := positiveNum (^), { ,, -, $eof$, WHERE, +, *, /, %, }
===============================================================================

SHIFT <457> by positiveNum to <447>.
This condition already existed.
From Condition <457> get package:
expressionAtom := 'STR_LITERAL' (^), { -, ,, $eof$, +, WHERE, *, /, %, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := 'STR_LITERAL' (^), { -, ,, $eof$, +, WHERE, *, /, %, }
===============================================================================

SHIFT <457> by 'STR_LITERAL' to <448>
This condition already existed.
From Condition <457> get package:
expressionAtom := expressionAtom (^)mathOperator expressionAtom , { -, ,, $eof$, +, WHERE, *, /, %, }
expressionAtom := expressionAtom mathOperator expressionAtom (^), { ,, -, $eof$, WHERE, +, *, /, %, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := (^)'*' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'%' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'-' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
expressionAtom := expressionAtom (^)mathOperator expressionAtom , { -, ,, $eof$, +, WHERE, *, /, %, }
expressionAtom := expressionAtom mathOperator expressionAtom (^), { ,, -, $eof$, WHERE, +, *, /, %, }
mathOperator := (^)'/' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'+' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <457> by expressionAtom to <458>.
From Condition <458> get package:
mathOperator := '*' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '*' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <458> by '*' to <33>
This condition already existed.
From Condition <458> get package:
mathOperator := '%' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '%' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <458> by '%' to <26>
This condition already existed.
From Condition <458> get package:
mathOperator := '-' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '-' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <458> by '-' to <34>
This condition already existed.
From Condition <458> get package:
expressionAtom := expressionAtom mathOperator (^)expressionAtom , { -, ,, $eof$, +, WHERE, *, /, %, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := (^)'ID' , { -, ,, $eof$, +, WHERE, *, /, %, }
constantNum := (^)positiveNum , { -, ,, $eof$, +, WHERE, *, /, %, }
expressionAtom := (^)'STR_LITERAL' , { ,, -, $eof$, WHERE, +, *, /, %, }
expressionAtom := expressionAtom mathOperator (^)expressionAtom , { -, ,, $eof$, +, WHERE, *, /, %, }
expressionAtom := (^)expressionAtom mathOperator expressionAtom , { ,, -, $eof$, WHERE, +, *, /, %, }
columnName := (^)'ID' '.' 'ID' , { -, ,, $eof$, +, WHERE, *, /, %, }
constantNum := (^)'-' positiveNum , { -, ,, $eof$, +, WHERE, *, /, %, }
expressionAtom := (^)constantNum , { ,, -, $eof$, WHERE, +, *, /, %, }
expressionAtom := (^)columnName , { ,, -, $eof$, WHERE, +, *, /, %, }
positiveNum := (^)'NUMBER_CONSTANT' , { ,, -, $eof$, WHERE, +, *, /, %, }
===============================================================================

SHIFT <458> by mathOperator to <450>.
This condition already existed.
Condition<458>, REDUCE Production by ',': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Already existed SHIFT by symbol'-' :
<34>
Try to set it to: REDUCE to:
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Reset Action[458]['-'] to REDUCE:
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Condition<458>, REDUCE Production by '$eof$': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Condition<458>, REDUCE Production by 'WHERE': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Condition<458>, REDUCE Production by '+': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Already existed SHIFT by symbol'*' :
<33>
Try to set it to: REDUCE to:
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Reset Action[458]['*'] to REDUCE:
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Condition<458>, REDUCE Production by '/': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Already existed SHIFT by symbol'%' :
<26>
Try to set it to: REDUCE to:
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Reset Action[458]['%'] to REDUCE:
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
From Condition <458> get package:
mathOperator := '/' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '/' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

Already existed REDUCE by symbol '/': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Try to set it to: SHIFT to <40>
Set SHIFT fail in: from condition <458> to condition <40>.
This condition already existed.
From Condition <458> get package:
mathOperator := '+' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '+' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

Already existed REDUCE by symbol '+': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Try to set it to: SHIFT to <41>
Set SHIFT fail in: from condition <458> to condition <41>.
This condition already existed.
From Condition <457> get package:
constantNum := '-' (^)positiveNum , { ,, -, $eof$, WHERE, +, *, /, %, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := (^)'NUMBER_CONSTANT' , { -, ,, $eof$, +, WHERE, *, /, %, }
constantNum := '-' (^)positiveNum , { ,, -, $eof$, WHERE, +, *, /, %, }
===============================================================================

SHIFT <457> by '-' to <459>
From Condition <459> get package:
positiveNum := 'NUMBER_CONSTANT' (^), { -, ,, $eof$, +, WHERE, *, /, %, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := 'NUMBER_CONSTANT' (^), { -, ,, $eof$, +, WHERE, *, /, %, }
===============================================================================

SHIFT <459> by 'NUMBER_CONSTANT' to <460>
Condition<460>, REDUCE Production by '-': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<460>, REDUCE Production by ',': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<460>, REDUCE Production by '$eof$': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<460>, REDUCE Production by '+': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<460>, REDUCE Production by 'WHERE': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<460>, REDUCE Production by '*': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<460>, REDUCE Production by '/': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<460>, REDUCE Production by '%': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
From Condition <459> get package:
constantNum := '-' positiveNum (^), { ,, -, $eof$, WHERE, +, *, /, %, }
-------------------------------------------------------------------------------

After tracing, got package:
constantNum := '-' positiveNum (^), { ,, -, $eof$, WHERE, +, *, /, %, }
===============================================================================

SHIFT <459> by positiveNum to <461>.
Condition<461>, REDUCE Production by ',': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<461>, REDUCE Production by '-': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<461>, REDUCE Production by '$eof$': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<461>, REDUCE Production by 'WHERE': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<461>, REDUCE Production by '+': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<461>, REDUCE Production by '*': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<461>, REDUCE Production by '/': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<461>, REDUCE Production by '%': 
pid <77>: 
constantNum := '-' positiveNum 
From Condition <457> get package:
expressionAtom := constantNum (^), { -, ,, $eof$, +, WHERE, *, /, %, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := constantNum (^), { -, ,, $eof$, +, WHERE, *, /, %, }
===============================================================================

SHIFT <457> by constantNum to <462>.
Condition<462>, REDUCE Production by '-': 
pid <73>: 
expressionAtom := constantNum 
Condition<462>, REDUCE Production by ',': 
pid <73>: 
expressionAtom := constantNum 
Condition<462>, REDUCE Production by '$eof$': 
pid <73>: 
expressionAtom := constantNum 
Condition<462>, REDUCE Production by '+': 
pid <73>: 
expressionAtom := constantNum 
Condition<462>, REDUCE Production by 'WHERE': 
pid <73>: 
expressionAtom := constantNum 
Condition<462>, REDUCE Production by '*': 
pid <73>: 
expressionAtom := constantNum 
Condition<462>, REDUCE Production by '/': 
pid <73>: 
expressionAtom := constantNum 
Condition<462>, REDUCE Production by '%': 
pid <73>: 
expressionAtom := constantNum 
From Condition <457> get package:
expressionAtom := columnName (^), { -, ,, $eof$, +, WHERE, *, /, %, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := columnName (^), { -, ,, $eof$, +, WHERE, *, /, %, }
===============================================================================

SHIFT <457> by columnName to <463>.
Condition<463>, REDUCE Production by '-': 
pid <75>: 
expressionAtom := columnName 
Condition<463>, REDUCE Production by ',': 
pid <75>: 
expressionAtom := columnName 
Condition<463>, REDUCE Production by '$eof$': 
pid <75>: 
expressionAtom := columnName 
Condition<463>, REDUCE Production by '+': 
pid <75>: 
expressionAtom := columnName 
Condition<463>, REDUCE Production by 'WHERE': 
pid <75>: 
expressionAtom := columnName 
Condition<463>, REDUCE Production by '*': 
pid <75>: 
expressionAtom := columnName 
Condition<463>, REDUCE Production by '/': 
pid <75>: 
expressionAtom := columnName 
Condition<463>, REDUCE Production by '%': 
pid <75>: 
expressionAtom := columnName 
From Condition <457> get package:
positiveNum := 'NUMBER_CONSTANT' (^), { -, ,, $eof$, +, WHERE, *, /, %, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := 'NUMBER_CONSTANT' (^), { -, ,, $eof$, +, WHERE, *, /, %, }
===============================================================================

SHIFT <457> by 'NUMBER_CONSTANT' to <460>
This condition already existed.
Already existed SHIFT by symbol'-' :
<34>
Try to set it to: REDUCE to:
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Reset Action[456]['-'] to REDUCE:
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Condition<456>, REDUCE Production by ',': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Condition<456>, REDUCE Production by '$eof$': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Condition<456>, REDUCE Production by '+': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Condition<456>, REDUCE Production by 'WHERE': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Already existed SHIFT by symbol'*' :
<33>
Try to set it to: REDUCE to:
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Reset Action[456]['*'] to REDUCE:
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Condition<456>, REDUCE Production by '/': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Already existed SHIFT by symbol'%' :
<26>
Try to set it to: REDUCE to:
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Reset Action[456]['%'] to REDUCE:
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
From Condition <456> get package:
mathOperator := '/' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '/' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

Already existed REDUCE by symbol '/': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Try to set it to: SHIFT to <40>
Set SHIFT fail in: from condition <456> to condition <40>.
This condition already existed.
From Condition <456> get package:
mathOperator := '+' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '+' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

Already existed REDUCE by symbol '+': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Try to set it to: SHIFT to <41>
Set SHIFT fail in: from condition <456> to condition <41>.
This condition already existed.
From Condition <450> get package:
constantNum := '-' (^)positiveNum , { -, ,, $eof$, +, WHERE, *, /, %, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := (^)'NUMBER_CONSTANT' , { ,, -, $eof$, WHERE, +, *, /, %, }
constantNum := '-' (^)positiveNum , { -, ,, $eof$, +, WHERE, *, /, %, }
===============================================================================

SHIFT <450> by '-' to <464>
From Condition <464> get package:
positiveNum := 'NUMBER_CONSTANT' (^), { ,, -, $eof$, WHERE, +, *, /, %, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := 'NUMBER_CONSTANT' (^), { ,, -, $eof$, WHERE, +, *, /, %, }
===============================================================================

SHIFT <464> by 'NUMBER_CONSTANT' to <465>
Condition<465>, REDUCE Production by ',': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<465>, REDUCE Production by '-': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<465>, REDUCE Production by '$eof$': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<465>, REDUCE Production by 'WHERE': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<465>, REDUCE Production by '+': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<465>, REDUCE Production by '*': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<465>, REDUCE Production by '/': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<465>, REDUCE Production by '%': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
From Condition <464> get package:
constantNum := '-' positiveNum (^), { -, ,, $eof$, +, WHERE, *, /, %, }
-------------------------------------------------------------------------------

After tracing, got package:
constantNum := '-' positiveNum (^), { -, ,, $eof$, +, WHERE, *, /, %, }
===============================================================================

SHIFT <464> by positiveNum to <466>.
Condition<466>, REDUCE Production by '-': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<466>, REDUCE Production by ',': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<466>, REDUCE Production by '$eof$': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<466>, REDUCE Production by '+': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<466>, REDUCE Production by 'WHERE': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<466>, REDUCE Production by '*': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<466>, REDUCE Production by '/': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<466>, REDUCE Production by '%': 
pid <77>: 
constantNum := '-' positiveNum 
From Condition <450> get package:
expressionAtom := constantNum (^), { ,, -, $eof$, WHERE, +, *, /, %, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := constantNum (^), { ,, -, $eof$, WHERE, +, *, /, %, }
===============================================================================

SHIFT <450> by constantNum to <467>.
Condition<467>, REDUCE Production by ',': 
pid <73>: 
expressionAtom := constantNum 
Condition<467>, REDUCE Production by '-': 
pid <73>: 
expressionAtom := constantNum 
Condition<467>, REDUCE Production by '$eof$': 
pid <73>: 
expressionAtom := constantNum 
Condition<467>, REDUCE Production by 'WHERE': 
pid <73>: 
expressionAtom := constantNum 
Condition<467>, REDUCE Production by '+': 
pid <73>: 
expressionAtom := constantNum 
Condition<467>, REDUCE Production by '*': 
pid <73>: 
expressionAtom := constantNum 
Condition<467>, REDUCE Production by '/': 
pid <73>: 
expressionAtom := constantNum 
Condition<467>, REDUCE Production by '%': 
pid <73>: 
expressionAtom := constantNum 
From Condition <450> get package:
expressionAtom := columnName (^), { ,, -, $eof$, WHERE, +, *, /, %, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := columnName (^), { ,, -, $eof$, WHERE, +, *, /, %, }
===============================================================================

SHIFT <450> by columnName to <468>.
Condition<468>, REDUCE Production by ',': 
pid <75>: 
expressionAtom := columnName 
Condition<468>, REDUCE Production by '-': 
pid <75>: 
expressionAtom := columnName 
Condition<468>, REDUCE Production by '$eof$': 
pid <75>: 
expressionAtom := columnName 
Condition<468>, REDUCE Production by 'WHERE': 
pid <75>: 
expressionAtom := columnName 
Condition<468>, REDUCE Production by '+': 
pid <75>: 
expressionAtom := columnName 
Condition<468>, REDUCE Production by '*': 
pid <75>: 
expressionAtom := columnName 
Condition<468>, REDUCE Production by '/': 
pid <75>: 
expressionAtom := columnName 
Condition<468>, REDUCE Production by '%': 
pid <75>: 
expressionAtom := columnName 
From Condition <450> get package:
positiveNum := 'NUMBER_CONSTANT' (^), { ,, -, $eof$, WHERE, +, *, /, %, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := 'NUMBER_CONSTANT' (^), { ,, -, $eof$, WHERE, +, *, /, %, }
===============================================================================

SHIFT <450> by 'NUMBER_CONSTANT' to <465>
This condition already existed.
From Condition <449> get package:
mathOperator := '/' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '/' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <449> by '/' to <40>
This condition already existed.
From Condition <449> get package:
mathOperator := '+' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '+' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <449> by '+' to <41>
This condition already existed.
Condition<449>, REDUCE Production by ',': 
pid <47>: 
updateElement := columnName '=' expressionAtom 
Condition<449>, REDUCE Production by '$eof$': 
pid <47>: 
updateElement := columnName '=' expressionAtom 
Condition<449>, REDUCE Production by 'WHERE': 
pid <47>: 
updateElement := columnName '=' expressionAtom 
From Condition <443> get package:
updateElement := columnName '=' 'DEFAULT' (^), { ,, $eof$, WHERE, }
-------------------------------------------------------------------------------

After tracing, got package:
updateElement := columnName '=' 'DEFAULT' (^), { ,, $eof$, WHERE, }
===============================================================================

SHIFT <443> by 'DEFAULT' to <469>
Condition<469>, REDUCE Production by ',': 
pid <48>: 
updateElement := columnName '=' 'DEFAULT' 
Condition<469>, REDUCE Production by '$eof$': 
pid <48>: 
updateElement := columnName '=' 'DEFAULT' 
Condition<469>, REDUCE Production by 'WHERE': 
pid <48>: 
updateElement := columnName '=' 'DEFAULT' 
From Condition <443> get package:
constantNum := '-' (^)positiveNum , { ,, -, $eof$, WHERE, +, *, /, %, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := (^)'NUMBER_CONSTANT' , { -, ,, $eof$, +, WHERE, *, /, %, }
constantNum := '-' (^)positiveNum , { ,, -, $eof$, WHERE, +, *, /, %, }
===============================================================================

SHIFT <443> by '-' to <459>
This condition already existed.
From Condition <443> get package:
expressionAtom := constantNum (^), { -, ,, $eof$, +, WHERE, *, /, %, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := constantNum (^), { -, ,, $eof$, +, WHERE, *, /, %, }
===============================================================================

SHIFT <443> by constantNum to <462>.
This condition already existed.
From Condition <443> get package:
expressionAtom := columnName (^), { -, ,, $eof$, +, WHERE, *, /, %, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := columnName (^), { -, ,, $eof$, +, WHERE, *, /, %, }
===============================================================================

SHIFT <443> by columnName to <463>.
This condition already existed.
From Condition <443> get package:
positiveNum := 'NUMBER_CONSTANT' (^), { -, ,, $eof$, +, WHERE, *, /, %, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := 'NUMBER_CONSTANT' (^), { -, ,, $eof$, +, WHERE, *, /, %, }
===============================================================================

SHIFT <443> by 'NUMBER_CONSTANT' to <460>
This condition already existed.
From Condition <438> get package:
updateElements := updateElement (^), { $eof$, WHERE, }
updateElements := updateElement (^)$__ann_36 , { $eof$, WHERE, }
-------------------------------------------------------------------------------

After tracing, got package:
$__ann_36 := (^)',' updateElement , { $eof$, WHERE, ,, }
updateElements := updateElement (^), { $eof$, WHERE, }
$__ann_36 := (^)$__ann_36 ',' updateElement , { $eof$, WHERE, ,, }
updateElements := updateElement (^)$__ann_36 , { $eof$, WHERE, }
===============================================================================

SHIFT <438> by updateElement to <470>.
From Condition <470> get package:
$__ann_36 := ',' (^)updateElement , { $eof$, WHERE, ,, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := (^)'ID' , { =, }
updateElement := (^)columnName '=' 'DEFAULT' , { $eof$, WHERE, ,, }
$__ann_36 := ',' (^)updateElement , { $eof$, WHERE, ,, }
columnName := (^)'ID' '.' 'ID' , { =, }
updateElement := (^)columnName '=' expressionAtom , { $eof$, WHERE, ,, }
===============================================================================

SHIFT <470> by ',' to <471>
From Condition <471> get package:
columnName := 'ID' (^), { =, }
columnName := 'ID' (^)'.' 'ID' , { =, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID' (^), { =, }
columnName := 'ID' (^)'.' 'ID' , { =, }
===============================================================================

SHIFT <471> by 'ID' to <439>
This condition already existed.
From Condition <471> get package:
updateElement := columnName (^)'=' 'DEFAULT' , { $eof$, WHERE, ,, }
updateElement := columnName (^)'=' expressionAtom , { $eof$, WHERE, ,, }
-------------------------------------------------------------------------------

After tracing, got package:
updateElement := columnName (^)'=' 'DEFAULT' , { $eof$, WHERE, ,, }
updateElement := columnName (^)'=' expressionAtom , { $eof$, WHERE, ,, }
===============================================================================

SHIFT <471> by columnName to <472>.
From Condition <472> get package:
updateElement := columnName '=' (^)'DEFAULT' , { $eof$, WHERE, ,, }
updateElement := columnName '=' (^)expressionAtom , { $eof$, WHERE, ,, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := (^)'ID' , { $eof$, WHERE, +, ,, -, *, /, %, }
constantNum := (^)positiveNum , { $eof$, WHERE, +, ,, -, *, /, %, }
expressionAtom := (^)'STR_LITERAL' , { $eof$, +, WHERE, -, ,, *, /, %, }
expressionAtom := (^)expressionAtom mathOperator expressionAtom , { $eof$, +, WHERE, -, ,, *, /, %, }
updateElement := columnName '=' (^)'DEFAULT' , { $eof$, WHERE, ,, }
constantNum := (^)'-' positiveNum , { $eof$, WHERE, +, ,, -, *, /, %, }
expressionAtom := (^)constantNum , { $eof$, +, WHERE, -, ,, *, /, %, }
expressionAtom := (^)columnName , { $eof$, +, WHERE, -, ,, *, /, %, }
positiveNum := (^)'NUMBER_CONSTANT' , { $eof$, +, WHERE, -, ,, *, /, %, }
updateElement := columnName '=' (^)expressionAtom , { $eof$, WHERE, ,, }
columnName := (^)'ID' '.' 'ID' , { $eof$, WHERE, +, ,, -, *, /, %, }
===============================================================================

SHIFT <472> by '=' to <473>
From Condition <473> get package:
columnName := 'ID' (^), { $eof$, WHERE, +, ,, -, *, /, %, }
columnName := 'ID' (^)'.' 'ID' , { $eof$, WHERE, +, ,, -, *, /, %, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID' (^), { $eof$, WHERE, +, ,, -, *, /, %, }
columnName := 'ID' (^)'.' 'ID' , { $eof$, WHERE, +, ,, -, *, /, %, }
===============================================================================

SHIFT <473> by 'ID' to <474>
Condition<474>, REDUCE Production by '$eof$': 
pid <68>: 
columnName := 'ID' 
Condition<474>, REDUCE Production by 'WHERE': 
pid <68>: 
columnName := 'ID' 
Condition<474>, REDUCE Production by '+': 
pid <68>: 
columnName := 'ID' 
Condition<474>, REDUCE Production by ',': 
pid <68>: 
columnName := 'ID' 
Condition<474>, REDUCE Production by '-': 
pid <68>: 
columnName := 'ID' 
Condition<474>, REDUCE Production by '*': 
pid <68>: 
columnName := 'ID' 
Condition<474>, REDUCE Production by '/': 
pid <68>: 
columnName := 'ID' 
Condition<474>, REDUCE Production by '%': 
pid <68>: 
columnName := 'ID' 
From Condition <474> get package:
columnName := 'ID' '.' (^)'ID' , { $eof$, WHERE, +, ,, -, *, /, %, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID' '.' (^)'ID' , { $eof$, WHERE, +, ,, -, *, /, %, }
===============================================================================

SHIFT <474> by '.' to <475>
From Condition <475> get package:
columnName := 'ID' '.' 'ID' (^), { $eof$, WHERE, +, ,, -, *, /, %, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID' '.' 'ID' (^), { $eof$, WHERE, +, ,, -, *, /, %, }
===============================================================================

SHIFT <475> by 'ID' to <476>
Condition<476>, REDUCE Production by '$eof$': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<476>, REDUCE Production by 'WHERE': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<476>, REDUCE Production by '+': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<476>, REDUCE Production by ',': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<476>, REDUCE Production by '-': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<476>, REDUCE Production by '*': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<476>, REDUCE Production by '/': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<476>, REDUCE Production by '%': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
From Condition <473> get package:
constantNum := positiveNum (^), { $eof$, WHERE, +, ,, -, *, /, %, }
-------------------------------------------------------------------------------

After tracing, got package:
constantNum := positiveNum (^), { $eof$, WHERE, +, ,, -, *, /, %, }
===============================================================================

SHIFT <473> by positiveNum to <477>.
Condition<477>, REDUCE Production by '$eof$': 
pid <78>: 
constantNum := positiveNum 
Condition<477>, REDUCE Production by 'WHERE': 
pid <78>: 
constantNum := positiveNum 
Condition<477>, REDUCE Production by '+': 
pid <78>: 
constantNum := positiveNum 
Condition<477>, REDUCE Production by ',': 
pid <78>: 
constantNum := positiveNum 
Condition<477>, REDUCE Production by '-': 
pid <78>: 
constantNum := positiveNum 
Condition<477>, REDUCE Production by '*': 
pid <78>: 
constantNum := positiveNum 
Condition<477>, REDUCE Production by '/': 
pid <78>: 
constantNum := positiveNum 
Condition<477>, REDUCE Production by '%': 
pid <78>: 
constantNum := positiveNum 
From Condition <473> get package:
expressionAtom := 'STR_LITERAL' (^), { $eof$, +, WHERE, -, ,, *, /, %, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := 'STR_LITERAL' (^), { $eof$, +, WHERE, -, ,, *, /, %, }
===============================================================================

SHIFT <473> by 'STR_LITERAL' to <478>
Condition<478>, REDUCE Production by '$eof$': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<478>, REDUCE Production by '+': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<478>, REDUCE Production by 'WHERE': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<478>, REDUCE Production by '-': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<478>, REDUCE Production by ',': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<478>, REDUCE Production by '*': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<478>, REDUCE Production by '/': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<478>, REDUCE Production by '%': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
From Condition <473> get package:
expressionAtom := expressionAtom (^)mathOperator expressionAtom , { $eof$, +, WHERE, -, ,, *, /, %, }
updateElement := columnName '=' expressionAtom (^), { $eof$, WHERE, ,, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := (^)'*' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'%' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'-' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
expressionAtom := expressionAtom (^)mathOperator expressionAtom , { $eof$, +, WHERE, -, ,, *, /, %, }
mathOperator := (^)'/' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'+' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
updateElement := columnName '=' expressionAtom (^), { $eof$, WHERE, ,, }
===============================================================================

SHIFT <473> by expressionAtom to <479>.
From Condition <479> get package:
mathOperator := '*' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '*' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <479> by '*' to <33>
This condition already existed.
From Condition <479> get package:
mathOperator := '%' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '%' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <479> by '%' to <26>
This condition already existed.
From Condition <479> get package:
mathOperator := '-' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '-' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <479> by '-' to <34>
This condition already existed.
From Condition <479> get package:
expressionAtom := expressionAtom mathOperator (^)expressionAtom , { $eof$, +, WHERE, -, ,, *, /, %, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := (^)'ID' , { $eof$, +, WHERE, -, ,, *, /, %, }
constantNum := (^)positiveNum , { $eof$, +, WHERE, -, ,, *, /, %, }
expressionAtom := (^)'STR_LITERAL' , { $eof$, WHERE, +, ,, -, *, /, %, }
expressionAtom := expressionAtom mathOperator (^)expressionAtom , { $eof$, +, WHERE, -, ,, *, /, %, }
expressionAtom := (^)expressionAtom mathOperator expressionAtom , { $eof$, WHERE, +, ,, -, *, /, %, }
columnName := (^)'ID' '.' 'ID' , { $eof$, +, WHERE, -, ,, *, /, %, }
constantNum := (^)'-' positiveNum , { $eof$, +, WHERE, -, ,, *, /, %, }
expressionAtom := (^)constantNum , { $eof$, WHERE, +, ,, -, *, /, %, }
expressionAtom := (^)columnName , { $eof$, WHERE, +, ,, -, *, /, %, }
positiveNum := (^)'NUMBER_CONSTANT' , { $eof$, WHERE, +, ,, -, *, /, %, }
===============================================================================

SHIFT <479> by mathOperator to <480>.
From Condition <480> get package:
columnName := 'ID' (^), { $eof$, +, WHERE, -, ,, *, /, %, }
columnName := 'ID' (^)'.' 'ID' , { $eof$, +, WHERE, -, ,, *, /, %, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID' (^), { $eof$, +, WHERE, -, ,, *, /, %, }
columnName := 'ID' (^)'.' 'ID' , { $eof$, +, WHERE, -, ,, *, /, %, }
===============================================================================

SHIFT <480> by 'ID' to <481>
Condition<481>, REDUCE Production by '$eof$': 
pid <68>: 
columnName := 'ID' 
Condition<481>, REDUCE Production by '+': 
pid <68>: 
columnName := 'ID' 
Condition<481>, REDUCE Production by 'WHERE': 
pid <68>: 
columnName := 'ID' 
Condition<481>, REDUCE Production by '-': 
pid <68>: 
columnName := 'ID' 
Condition<481>, REDUCE Production by ',': 
pid <68>: 
columnName := 'ID' 
Condition<481>, REDUCE Production by '*': 
pid <68>: 
columnName := 'ID' 
Condition<481>, REDUCE Production by '/': 
pid <68>: 
columnName := 'ID' 
Condition<481>, REDUCE Production by '%': 
pid <68>: 
columnName := 'ID' 
From Condition <481> get package:
columnName := 'ID' '.' (^)'ID' , { $eof$, +, WHERE, -, ,, *, /, %, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID' '.' (^)'ID' , { $eof$, +, WHERE, -, ,, *, /, %, }
===============================================================================

SHIFT <481> by '.' to <482>
From Condition <482> get package:
columnName := 'ID' '.' 'ID' (^), { $eof$, +, WHERE, -, ,, *, /, %, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID' '.' 'ID' (^), { $eof$, +, WHERE, -, ,, *, /, %, }
===============================================================================

SHIFT <482> by 'ID' to <483>
Condition<483>, REDUCE Production by '$eof$': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<483>, REDUCE Production by '+': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<483>, REDUCE Production by 'WHERE': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<483>, REDUCE Production by '-': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<483>, REDUCE Production by ',': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<483>, REDUCE Production by '*': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<483>, REDUCE Production by '/': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<483>, REDUCE Production by '%': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
From Condition <480> get package:
constantNum := positiveNum (^), { $eof$, +, WHERE, -, ,, *, /, %, }
-------------------------------------------------------------------------------

After tracing, got package:
constantNum := positiveNum (^), { $eof$, +, WHERE, -, ,, *, /, %, }
===============================================================================

SHIFT <480> by positiveNum to <484>.
Condition<484>, REDUCE Production by '$eof$': 
pid <78>: 
constantNum := positiveNum 
Condition<484>, REDUCE Production by '+': 
pid <78>: 
constantNum := positiveNum 
Condition<484>, REDUCE Production by 'WHERE': 
pid <78>: 
constantNum := positiveNum 
Condition<484>, REDUCE Production by '-': 
pid <78>: 
constantNum := positiveNum 
Condition<484>, REDUCE Production by ',': 
pid <78>: 
constantNum := positiveNum 
Condition<484>, REDUCE Production by '*': 
pid <78>: 
constantNum := positiveNum 
Condition<484>, REDUCE Production by '/': 
pid <78>: 
constantNum := positiveNum 
Condition<484>, REDUCE Production by '%': 
pid <78>: 
constantNum := positiveNum 
From Condition <480> get package:
expressionAtom := 'STR_LITERAL' (^), { $eof$, WHERE, +, ,, -, *, /, %, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := 'STR_LITERAL' (^), { $eof$, WHERE, +, ,, -, *, /, %, }
===============================================================================

SHIFT <480> by 'STR_LITERAL' to <485>
Condition<485>, REDUCE Production by '$eof$': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<485>, REDUCE Production by 'WHERE': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<485>, REDUCE Production by '+': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<485>, REDUCE Production by ',': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<485>, REDUCE Production by '-': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<485>, REDUCE Production by '*': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<485>, REDUCE Production by '/': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<485>, REDUCE Production by '%': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
From Condition <480> get package:
expressionAtom := expressionAtom (^)mathOperator expressionAtom , { $eof$, WHERE, +, ,, -, *, /, %, }
expressionAtom := expressionAtom mathOperator expressionAtom (^), { $eof$, +, WHERE, -, ,, *, /, %, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := (^)'*' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'%' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'-' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
expressionAtom := expressionAtom (^)mathOperator expressionAtom , { $eof$, WHERE, +, ,, -, *, /, %, }
expressionAtom := expressionAtom mathOperator expressionAtom (^), { $eof$, +, WHERE, -, ,, *, /, %, }
mathOperator := (^)'/' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'+' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <480> by expressionAtom to <486>.
From Condition <486> get package:
mathOperator := '*' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '*' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <486> by '*' to <33>
This condition already existed.
From Condition <486> get package:
mathOperator := '%' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '%' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <486> by '%' to <26>
This condition already existed.
From Condition <486> get package:
mathOperator := '-' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '-' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <486> by '-' to <34>
This condition already existed.
From Condition <486> get package:
expressionAtom := expressionAtom mathOperator (^)expressionAtom , { $eof$, WHERE, +, ,, -, *, /, %, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := (^)'ID' , { $eof$, WHERE, +, ,, -, *, /, %, }
constantNum := (^)positiveNum , { $eof$, WHERE, +, ,, -, *, /, %, }
expressionAtom := (^)'STR_LITERAL' , { $eof$, +, WHERE, -, ,, *, /, %, }
expressionAtom := expressionAtom mathOperator (^)expressionAtom , { $eof$, WHERE, +, ,, -, *, /, %, }
expressionAtom := (^)expressionAtom mathOperator expressionAtom , { $eof$, +, WHERE, -, ,, *, /, %, }
columnName := (^)'ID' '.' 'ID' , { $eof$, WHERE, +, ,, -, *, /, %, }
constantNum := (^)'-' positiveNum , { $eof$, WHERE, +, ,, -, *, /, %, }
expressionAtom := (^)constantNum , { $eof$, +, WHERE, -, ,, *, /, %, }
expressionAtom := (^)columnName , { $eof$, +, WHERE, -, ,, *, /, %, }
positiveNum := (^)'NUMBER_CONSTANT' , { $eof$, +, WHERE, -, ,, *, /, %, }
===============================================================================

SHIFT <486> by mathOperator to <487>.
From Condition <487> get package:
columnName := 'ID' (^), { $eof$, WHERE, +, ,, -, *, /, %, }
columnName := 'ID' (^)'.' 'ID' , { $eof$, WHERE, +, ,, -, *, /, %, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID' (^), { $eof$, WHERE, +, ,, -, *, /, %, }
columnName := 'ID' (^)'.' 'ID' , { $eof$, WHERE, +, ,, -, *, /, %, }
===============================================================================

SHIFT <487> by 'ID' to <474>
This condition already existed.
From Condition <487> get package:
constantNum := positiveNum (^), { $eof$, WHERE, +, ,, -, *, /, %, }
-------------------------------------------------------------------------------

After tracing, got package:
constantNum := positiveNum (^), { $eof$, WHERE, +, ,, -, *, /, %, }
===============================================================================

SHIFT <487> by positiveNum to <477>.
This condition already existed.
From Condition <487> get package:
expressionAtom := 'STR_LITERAL' (^), { $eof$, +, WHERE, -, ,, *, /, %, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := 'STR_LITERAL' (^), { $eof$, +, WHERE, -, ,, *, /, %, }
===============================================================================

SHIFT <487> by 'STR_LITERAL' to <478>
This condition already existed.
From Condition <487> get package:
expressionAtom := expressionAtom (^)mathOperator expressionAtom , { $eof$, +, WHERE, -, ,, *, /, %, }
expressionAtom := expressionAtom mathOperator expressionAtom (^), { $eof$, WHERE, +, ,, -, *, /, %, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := (^)'*' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'%' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'-' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
expressionAtom := expressionAtom (^)mathOperator expressionAtom , { $eof$, +, WHERE, -, ,, *, /, %, }
expressionAtom := expressionAtom mathOperator expressionAtom (^), { $eof$, WHERE, +, ,, -, *, /, %, }
mathOperator := (^)'/' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'+' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <487> by expressionAtom to <486>.
This condition already existed.
From Condition <487> get package:
constantNum := '-' (^)positiveNum , { $eof$, WHERE, +, ,, -, *, /, %, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := (^)'NUMBER_CONSTANT' , { $eof$, +, WHERE, -, ,, *, /, %, }
constantNum := '-' (^)positiveNum , { $eof$, WHERE, +, ,, -, *, /, %, }
===============================================================================

SHIFT <487> by '-' to <488>
From Condition <488> get package:
positiveNum := 'NUMBER_CONSTANT' (^), { $eof$, +, WHERE, -, ,, *, /, %, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := 'NUMBER_CONSTANT' (^), { $eof$, +, WHERE, -, ,, *, /, %, }
===============================================================================

SHIFT <488> by 'NUMBER_CONSTANT' to <489>
Condition<489>, REDUCE Production by '$eof$': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<489>, REDUCE Production by '+': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<489>, REDUCE Production by 'WHERE': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<489>, REDUCE Production by '-': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<489>, REDUCE Production by ',': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<489>, REDUCE Production by '*': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<489>, REDUCE Production by '/': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<489>, REDUCE Production by '%': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
From Condition <488> get package:
constantNum := '-' positiveNum (^), { $eof$, WHERE, +, ,, -, *, /, %, }
-------------------------------------------------------------------------------

After tracing, got package:
constantNum := '-' positiveNum (^), { $eof$, WHERE, +, ,, -, *, /, %, }
===============================================================================

SHIFT <488> by positiveNum to <490>.
Condition<490>, REDUCE Production by '$eof$': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<490>, REDUCE Production by 'WHERE': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<490>, REDUCE Production by '+': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<490>, REDUCE Production by ',': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<490>, REDUCE Production by '-': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<490>, REDUCE Production by '*': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<490>, REDUCE Production by '/': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<490>, REDUCE Production by '%': 
pid <77>: 
constantNum := '-' positiveNum 
From Condition <487> get package:
expressionAtom := constantNum (^), { $eof$, +, WHERE, -, ,, *, /, %, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := constantNum (^), { $eof$, +, WHERE, -, ,, *, /, %, }
===============================================================================

SHIFT <487> by constantNum to <491>.
Condition<491>, REDUCE Production by '$eof$': 
pid <73>: 
expressionAtom := constantNum 
Condition<491>, REDUCE Production by '+': 
pid <73>: 
expressionAtom := constantNum 
Condition<491>, REDUCE Production by 'WHERE': 
pid <73>: 
expressionAtom := constantNum 
Condition<491>, REDUCE Production by '-': 
pid <73>: 
expressionAtom := constantNum 
Condition<491>, REDUCE Production by ',': 
pid <73>: 
expressionAtom := constantNum 
Condition<491>, REDUCE Production by '*': 
pid <73>: 
expressionAtom := constantNum 
Condition<491>, REDUCE Production by '/': 
pid <73>: 
expressionAtom := constantNum 
Condition<491>, REDUCE Production by '%': 
pid <73>: 
expressionAtom := constantNum 
From Condition <487> get package:
expressionAtom := columnName (^), { $eof$, +, WHERE, -, ,, *, /, %, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := columnName (^), { $eof$, +, WHERE, -, ,, *, /, %, }
===============================================================================

SHIFT <487> by columnName to <492>.
Condition<492>, REDUCE Production by '$eof$': 
pid <75>: 
expressionAtom := columnName 
Condition<492>, REDUCE Production by '+': 
pid <75>: 
expressionAtom := columnName 
Condition<492>, REDUCE Production by 'WHERE': 
pid <75>: 
expressionAtom := columnName 
Condition<492>, REDUCE Production by '-': 
pid <75>: 
expressionAtom := columnName 
Condition<492>, REDUCE Production by ',': 
pid <75>: 
expressionAtom := columnName 
Condition<492>, REDUCE Production by '*': 
pid <75>: 
expressionAtom := columnName 
Condition<492>, REDUCE Production by '/': 
pid <75>: 
expressionAtom := columnName 
Condition<492>, REDUCE Production by '%': 
pid <75>: 
expressionAtom := columnName 
From Condition <487> get package:
positiveNum := 'NUMBER_CONSTANT' (^), { $eof$, +, WHERE, -, ,, *, /, %, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := 'NUMBER_CONSTANT' (^), { $eof$, +, WHERE, -, ,, *, /, %, }
===============================================================================

SHIFT <487> by 'NUMBER_CONSTANT' to <489>
This condition already existed.
Condition<486>, REDUCE Production by '$eof$': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Condition<486>, REDUCE Production by '+': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Condition<486>, REDUCE Production by 'WHERE': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Already existed SHIFT by symbol'-' :
<34>
Try to set it to: REDUCE to:
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Reset Action[486]['-'] to REDUCE:
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Condition<486>, REDUCE Production by ',': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Already existed SHIFT by symbol'*' :
<33>
Try to set it to: REDUCE to:
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Reset Action[486]['*'] to REDUCE:
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Condition<486>, REDUCE Production by '/': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Already existed SHIFT by symbol'%' :
<26>
Try to set it to: REDUCE to:
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Reset Action[486]['%'] to REDUCE:
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
From Condition <486> get package:
mathOperator := '/' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '/' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

Already existed REDUCE by symbol '/': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Try to set it to: SHIFT to <40>
Set SHIFT fail in: from condition <486> to condition <40>.
This condition already existed.
From Condition <486> get package:
mathOperator := '+' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '+' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

Already existed REDUCE by symbol '+': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Try to set it to: SHIFT to <41>
Set SHIFT fail in: from condition <486> to condition <41>.
This condition already existed.
From Condition <480> get package:
constantNum := '-' (^)positiveNum , { $eof$, +, WHERE, -, ,, *, /, %, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := (^)'NUMBER_CONSTANT' , { $eof$, WHERE, +, ,, -, *, /, %, }
constantNum := '-' (^)positiveNum , { $eof$, +, WHERE, -, ,, *, /, %, }
===============================================================================

SHIFT <480> by '-' to <493>
From Condition <493> get package:
positiveNum := 'NUMBER_CONSTANT' (^), { $eof$, WHERE, +, ,, -, *, /, %, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := 'NUMBER_CONSTANT' (^), { $eof$, WHERE, +, ,, -, *, /, %, }
===============================================================================

SHIFT <493> by 'NUMBER_CONSTANT' to <494>
Condition<494>, REDUCE Production by '$eof$': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<494>, REDUCE Production by 'WHERE': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<494>, REDUCE Production by '+': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<494>, REDUCE Production by ',': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<494>, REDUCE Production by '-': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<494>, REDUCE Production by '*': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<494>, REDUCE Production by '/': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<494>, REDUCE Production by '%': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
From Condition <493> get package:
constantNum := '-' positiveNum (^), { $eof$, +, WHERE, -, ,, *, /, %, }
-------------------------------------------------------------------------------

After tracing, got package:
constantNum := '-' positiveNum (^), { $eof$, +, WHERE, -, ,, *, /, %, }
===============================================================================

SHIFT <493> by positiveNum to <495>.
Condition<495>, REDUCE Production by '$eof$': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<495>, REDUCE Production by '+': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<495>, REDUCE Production by 'WHERE': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<495>, REDUCE Production by '-': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<495>, REDUCE Production by ',': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<495>, REDUCE Production by '*': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<495>, REDUCE Production by '/': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<495>, REDUCE Production by '%': 
pid <77>: 
constantNum := '-' positiveNum 
From Condition <480> get package:
expressionAtom := constantNum (^), { $eof$, WHERE, +, ,, -, *, /, %, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := constantNum (^), { $eof$, WHERE, +, ,, -, *, /, %, }
===============================================================================

SHIFT <480> by constantNum to <496>.
Condition<496>, REDUCE Production by '$eof$': 
pid <73>: 
expressionAtom := constantNum 
Condition<496>, REDUCE Production by 'WHERE': 
pid <73>: 
expressionAtom := constantNum 
Condition<496>, REDUCE Production by '+': 
pid <73>: 
expressionAtom := constantNum 
Condition<496>, REDUCE Production by ',': 
pid <73>: 
expressionAtom := constantNum 
Condition<496>, REDUCE Production by '-': 
pid <73>: 
expressionAtom := constantNum 
Condition<496>, REDUCE Production by '*': 
pid <73>: 
expressionAtom := constantNum 
Condition<496>, REDUCE Production by '/': 
pid <73>: 
expressionAtom := constantNum 
Condition<496>, REDUCE Production by '%': 
pid <73>: 
expressionAtom := constantNum 
From Condition <480> get package:
expressionAtom := columnName (^), { $eof$, WHERE, +, ,, -, *, /, %, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := columnName (^), { $eof$, WHERE, +, ,, -, *, /, %, }
===============================================================================

SHIFT <480> by columnName to <497>.
Condition<497>, REDUCE Production by '$eof$': 
pid <75>: 
expressionAtom := columnName 
Condition<497>, REDUCE Production by 'WHERE': 
pid <75>: 
expressionAtom := columnName 
Condition<497>, REDUCE Production by '+': 
pid <75>: 
expressionAtom := columnName 
Condition<497>, REDUCE Production by ',': 
pid <75>: 
expressionAtom := columnName 
Condition<497>, REDUCE Production by '-': 
pid <75>: 
expressionAtom := columnName 
Condition<497>, REDUCE Production by '*': 
pid <75>: 
expressionAtom := columnName 
Condition<497>, REDUCE Production by '/': 
pid <75>: 
expressionAtom := columnName 
Condition<497>, REDUCE Production by '%': 
pid <75>: 
expressionAtom := columnName 
From Condition <480> get package:
positiveNum := 'NUMBER_CONSTANT' (^), { $eof$, WHERE, +, ,, -, *, /, %, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := 'NUMBER_CONSTANT' (^), { $eof$, WHERE, +, ,, -, *, /, %, }
===============================================================================

SHIFT <480> by 'NUMBER_CONSTANT' to <494>
This condition already existed.
From Condition <479> get package:
mathOperator := '/' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '/' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <479> by '/' to <40>
This condition already existed.
From Condition <479> get package:
mathOperator := '+' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '+' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <479> by '+' to <41>
This condition already existed.
Condition<479>, REDUCE Production by '$eof$': 
pid <47>: 
updateElement := columnName '=' expressionAtom 
Condition<479>, REDUCE Production by 'WHERE': 
pid <47>: 
updateElement := columnName '=' expressionAtom 
Condition<479>, REDUCE Production by ',': 
pid <47>: 
updateElement := columnName '=' expressionAtom 
From Condition <473> get package:
updateElement := columnName '=' 'DEFAULT' (^), { $eof$, WHERE, ,, }
-------------------------------------------------------------------------------

After tracing, got package:
updateElement := columnName '=' 'DEFAULT' (^), { $eof$, WHERE, ,, }
===============================================================================

SHIFT <473> by 'DEFAULT' to <498>
Condition<498>, REDUCE Production by '$eof$': 
pid <48>: 
updateElement := columnName '=' 'DEFAULT' 
Condition<498>, REDUCE Production by 'WHERE': 
pid <48>: 
updateElement := columnName '=' 'DEFAULT' 
Condition<498>, REDUCE Production by ',': 
pid <48>: 
updateElement := columnName '=' 'DEFAULT' 
From Condition <473> get package:
constantNum := '-' (^)positiveNum , { $eof$, WHERE, +, ,, -, *, /, %, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := (^)'NUMBER_CONSTANT' , { $eof$, +, WHERE, -, ,, *, /, %, }
constantNum := '-' (^)positiveNum , { $eof$, WHERE, +, ,, -, *, /, %, }
===============================================================================

SHIFT <473> by '-' to <488>
This condition already existed.
From Condition <473> get package:
expressionAtom := constantNum (^), { $eof$, +, WHERE, -, ,, *, /, %, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := constantNum (^), { $eof$, +, WHERE, -, ,, *, /, %, }
===============================================================================

SHIFT <473> by constantNum to <491>.
This condition already existed.
From Condition <473> get package:
expressionAtom := columnName (^), { $eof$, +, WHERE, -, ,, *, /, %, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := columnName (^), { $eof$, +, WHERE, -, ,, *, /, %, }
===============================================================================

SHIFT <473> by columnName to <492>.
This condition already existed.
From Condition <473> get package:
positiveNum := 'NUMBER_CONSTANT' (^), { $eof$, +, WHERE, -, ,, *, /, %, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := 'NUMBER_CONSTANT' (^), { $eof$, +, WHERE, -, ,, *, /, %, }
===============================================================================

SHIFT <473> by 'NUMBER_CONSTANT' to <489>
This condition already existed.
From Condition <471> get package:
$__ann_36 := ',' updateElement (^), { $eof$, WHERE, ,, }
-------------------------------------------------------------------------------

After tracing, got package:
$__ann_36 := ',' updateElement (^), { $eof$, WHERE, ,, }
===============================================================================

SHIFT <471> by updateElement to <499>.
Condition<499>, REDUCE Production by '$eof$': 
pid <46>: 
$__ann_36 := ',' updateElement 
Condition<499>, REDUCE Production by 'WHERE': 
pid <46>: 
$__ann_36 := ',' updateElement 
Condition<499>, REDUCE Production by ',': 
pid <46>: 
$__ann_36 := ',' updateElement 
Condition<470>, REDUCE Production by '$eof$': 
pid <44>: 
updateElements := updateElement 
Condition<470>, REDUCE Production by 'WHERE': 
pid <44>: 
updateElements := updateElement 
From Condition <470> get package:
updateElements := updateElement $__ann_36 (^), { $eof$, WHERE, }
$__ann_36 := $__ann_36 (^)',' updateElement , { $eof$, WHERE, ,, }
-------------------------------------------------------------------------------

After tracing, got package:
updateElements := updateElement $__ann_36 (^), { $eof$, WHERE, }
$__ann_36 := $__ann_36 (^)',' updateElement , { $eof$, WHERE, ,, }
===============================================================================

SHIFT <470> by $__ann_36 to <500>.
Condition<500>, REDUCE Production by '$eof$': 
pid <43>: 
updateElements := updateElement $__ann_36 
Condition<500>, REDUCE Production by 'WHERE': 
pid <43>: 
updateElements := updateElement $__ann_36 
From Condition <500> get package:
$__ann_36 := $__ann_36 ',' (^)updateElement , { $eof$, WHERE, ,, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := (^)'ID' '.' 'ID' , { =, }
updateElement := (^)columnName '=' expressionAtom , { $eof$, WHERE, ,, }
$__ann_36 := $__ann_36 ',' (^)updateElement , { $eof$, WHERE, ,, }
columnName := (^)'ID' , { =, }
updateElement := (^)columnName '=' 'DEFAULT' , { $eof$, WHERE, ,, }
===============================================================================

SHIFT <500> by ',' to <501>
From Condition <501> get package:
columnName := 'ID' (^)'.' 'ID' , { =, }
columnName := 'ID' (^), { =, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID' (^)'.' 'ID' , { =, }
columnName := 'ID' (^), { =, }
===============================================================================

SHIFT <501> by 'ID' to <439>
This condition already existed.
From Condition <501> get package:
updateElement := columnName (^)'=' expressionAtom , { $eof$, WHERE, ,, }
updateElement := columnName (^)'=' 'DEFAULT' , { $eof$, WHERE, ,, }
-------------------------------------------------------------------------------

After tracing, got package:
updateElement := columnName (^)'=' expressionAtom , { $eof$, WHERE, ,, }
updateElement := columnName (^)'=' 'DEFAULT' , { $eof$, WHERE, ,, }
===============================================================================

SHIFT <501> by columnName to <502>.
From Condition <502> get package:
updateElement := columnName '=' (^)expressionAtom , { $eof$, WHERE, ,, }
updateElement := columnName '=' (^)'DEFAULT' , { $eof$, WHERE, ,, }
-------------------------------------------------------------------------------

After tracing, got package:
constantNum := (^)'-' positiveNum , { $eof$, WHERE, +, ,, -, *, /, %, }
expressionAtom := (^)constantNum , { $eof$, +, WHERE, -, ,, *, /, %, }
expressionAtom := (^)columnName , { $eof$, +, WHERE, -, ,, *, /, %, }
positiveNum := (^)'NUMBER_CONSTANT' , { $eof$, +, WHERE, -, ,, *, /, %, }
updateElement := columnName '=' (^)expressionAtom , { $eof$, WHERE, ,, }
columnName := (^)'ID' , { $eof$, WHERE, +, ,, -, *, /, %, }
constantNum := (^)positiveNum , { $eof$, WHERE, +, ,, -, *, /, %, }
expressionAtom := (^)'STR_LITERAL' , { $eof$, +, WHERE, -, ,, *, /, %, }
expressionAtom := (^)expressionAtom mathOperator expressionAtom , { $eof$, +, WHERE, -, ,, *, /, %, }
updateElement := columnName '=' (^)'DEFAULT' , { $eof$, WHERE, ,, }
columnName := (^)'ID' '.' 'ID' , { $eof$, WHERE, +, ,, -, *, /, %, }
===============================================================================

SHIFT <502> by '=' to <503>
From Condition <503> get package:
constantNum := '-' (^)positiveNum , { $eof$, WHERE, +, ,, -, *, /, %, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := (^)'NUMBER_CONSTANT' , { $eof$, +, WHERE, -, ,, *, /, %, }
constantNum := '-' (^)positiveNum , { $eof$, WHERE, +, ,, -, *, /, %, }
===============================================================================

SHIFT <503> by '-' to <488>
This condition already existed.
From Condition <503> get package:
expressionAtom := constantNum (^), { $eof$, +, WHERE, -, ,, *, /, %, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := constantNum (^), { $eof$, +, WHERE, -, ,, *, /, %, }
===============================================================================

SHIFT <503> by constantNum to <491>.
This condition already existed.
From Condition <503> get package:
expressionAtom := columnName (^), { $eof$, +, WHERE, -, ,, *, /, %, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := columnName (^), { $eof$, +, WHERE, -, ,, *, /, %, }
===============================================================================

SHIFT <503> by columnName to <492>.
This condition already existed.
From Condition <503> get package:
positiveNum := 'NUMBER_CONSTANT' (^), { $eof$, +, WHERE, -, ,, *, /, %, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := 'NUMBER_CONSTANT' (^), { $eof$, +, WHERE, -, ,, *, /, %, }
===============================================================================

SHIFT <503> by 'NUMBER_CONSTANT' to <489>
This condition already existed.
From Condition <503> get package:
updateElement := columnName '=' expressionAtom (^), { $eof$, WHERE, ,, }
expressionAtom := expressionAtom (^)mathOperator expressionAtom , { $eof$, +, WHERE, -, ,, *, /, %, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := (^)'/' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'+' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
updateElement := columnName '=' expressionAtom (^), { $eof$, WHERE, ,, }
mathOperator := (^)'*' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'%' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'-' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
expressionAtom := expressionAtom (^)mathOperator expressionAtom , { $eof$, +, WHERE, -, ,, *, /, %, }
===============================================================================

SHIFT <503> by expressionAtom to <504>.
From Condition <504> get package:
mathOperator := '/' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '/' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <504> by '/' to <40>
This condition already existed.
From Condition <504> get package:
mathOperator := '+' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '+' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <504> by '+' to <41>
This condition already existed.
Condition<504>, REDUCE Production by '$eof$': 
pid <47>: 
updateElement := columnName '=' expressionAtom 
Condition<504>, REDUCE Production by 'WHERE': 
pid <47>: 
updateElement := columnName '=' expressionAtom 
Condition<504>, REDUCE Production by ',': 
pid <47>: 
updateElement := columnName '=' expressionAtom 
From Condition <504> get package:
mathOperator := '*' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '*' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <504> by '*' to <33>
This condition already existed.
From Condition <504> get package:
mathOperator := '%' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '%' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <504> by '%' to <26>
This condition already existed.
From Condition <504> get package:
mathOperator := '-' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '-' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <504> by '-' to <34>
This condition already existed.
From Condition <504> get package:
expressionAtom := expressionAtom mathOperator (^)expressionAtom , { $eof$, +, WHERE, -, ,, *, /, %, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := (^)'ID' , { $eof$, +, WHERE, -, ,, *, /, %, }
constantNum := (^)positiveNum , { $eof$, +, WHERE, -, ,, *, /, %, }
expressionAtom := (^)'STR_LITERAL' , { $eof$, WHERE, +, ,, -, *, /, %, }
expressionAtom := expressionAtom mathOperator (^)expressionAtom , { $eof$, +, WHERE, -, ,, *, /, %, }
expressionAtom := (^)expressionAtom mathOperator expressionAtom , { $eof$, WHERE, +, ,, -, *, /, %, }
columnName := (^)'ID' '.' 'ID' , { $eof$, +, WHERE, -, ,, *, /, %, }
constantNum := (^)'-' positiveNum , { $eof$, +, WHERE, -, ,, *, /, %, }
expressionAtom := (^)constantNum , { $eof$, WHERE, +, ,, -, *, /, %, }
expressionAtom := (^)columnName , { $eof$, WHERE, +, ,, -, *, /, %, }
positiveNum := (^)'NUMBER_CONSTANT' , { $eof$, WHERE, +, ,, -, *, /, %, }
===============================================================================

SHIFT <504> by mathOperator to <480>.
This condition already existed.
From Condition <503> get package:
columnName := 'ID' (^), { $eof$, WHERE, +, ,, -, *, /, %, }
columnName := 'ID' (^)'.' 'ID' , { $eof$, WHERE, +, ,, -, *, /, %, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID' (^), { $eof$, WHERE, +, ,, -, *, /, %, }
columnName := 'ID' (^)'.' 'ID' , { $eof$, WHERE, +, ,, -, *, /, %, }
===============================================================================

SHIFT <503> by 'ID' to <474>
This condition already existed.
From Condition <503> get package:
constantNum := positiveNum (^), { $eof$, WHERE, +, ,, -, *, /, %, }
-------------------------------------------------------------------------------

After tracing, got package:
constantNum := positiveNum (^), { $eof$, WHERE, +, ,, -, *, /, %, }
===============================================================================

SHIFT <503> by positiveNum to <477>.
This condition already existed.
From Condition <503> get package:
expressionAtom := 'STR_LITERAL' (^), { $eof$, +, WHERE, -, ,, *, /, %, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := 'STR_LITERAL' (^), { $eof$, +, WHERE, -, ,, *, /, %, }
===============================================================================

SHIFT <503> by 'STR_LITERAL' to <478>
This condition already existed.
From Condition <503> get package:
updateElement := columnName '=' 'DEFAULT' (^), { $eof$, WHERE, ,, }
-------------------------------------------------------------------------------

After tracing, got package:
updateElement := columnName '=' 'DEFAULT' (^), { $eof$, WHERE, ,, }
===============================================================================

SHIFT <503> by 'DEFAULT' to <498>
This condition already existed.
From Condition <501> get package:
$__ann_36 := $__ann_36 ',' updateElement (^), { $eof$, WHERE, ,, }
-------------------------------------------------------------------------------

After tracing, got package:
$__ann_36 := $__ann_36 ',' updateElement (^), { $eof$, WHERE, ,, }
===============================================================================

SHIFT <501> by updateElement to <505>.
Condition<505>, REDUCE Production by '$eof$': 
pid <45>: 
$__ann_36 := $__ann_36 ',' updateElement 
Condition<505>, REDUCE Production by 'WHERE': 
pid <45>: 
$__ann_36 := $__ann_36 ',' updateElement 
Condition<505>, REDUCE Production by ',': 
pid <45>: 
$__ann_36 := $__ann_36 ',' updateElement 
From Condition <438> get package:
updateStatement := 'UPDATE' tableName 'SET' updateElements (^), { $eof$, }
updateStatement := 'UPDATE' tableName 'SET' updateElements (^)'WHERE' expression , { $eof$, }
-------------------------------------------------------------------------------

After tracing, got package:
updateStatement := 'UPDATE' tableName 'SET' updateElements (^), { $eof$, }
updateStatement := 'UPDATE' tableName 'SET' updateElements (^)'WHERE' expression , { $eof$, }
===============================================================================

SHIFT <438> by updateElements to <506>.
Condition<506>, REDUCE Production by '$eof$': 
pid <34>: 
updateStatement := 'UPDATE' tableName 'SET' updateElements 
From Condition <506> get package:
updateStatement := 'UPDATE' tableName 'SET' updateElements 'WHERE' (^)expression , { $eof$, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := (^)constantNum , { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, }
expressionAtom := (^)columnName , { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, }
predicate := (^)expressionAtom comparisonOperator expressionAtom , { AND, $eof$, OR, }
expression := (^)expression logicalOperator expression , { AND, $eof$, OR, }
updateStatement := 'UPDATE' tableName 'SET' updateElements 'WHERE' (^)expression , { $eof$, }
expressionAtom := (^)'STR_LITERAL' , { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, }
expressionAtom := (^)expressionAtom mathOperator expressionAtom , { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, }
predicate := (^)expressionAtom , { AND, $eof$, OR, }
expression := (^)predicate , { AND, $eof$, OR, }
constantNum := (^)positiveNum , { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, }
constantNum := (^)'-' positiveNum , { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, }
columnName := (^)'ID' , { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, }
columnName := (^)'ID' '.' 'ID' , { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, }
positiveNum := (^)'NUMBER_CONSTANT' , { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, }
===============================================================================

SHIFT <506> by 'WHERE' to <507>
From Condition <507> get package:
expressionAtom := constantNum (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := constantNum (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, }
===============================================================================

SHIFT <507> by constantNum to <508>.
Condition<508>, REDUCE Production by '==': 
pid <73>: 
expressionAtom := constantNum 
Condition<508>, REDUCE Production by '*': 
pid <73>: 
expressionAtom := constantNum 
Condition<508>, REDUCE Production by '>': 
pid <73>: 
expressionAtom := constantNum 
Condition<508>, REDUCE Production by '<': 
pid <73>: 
expressionAtom := constantNum 
Condition<508>, REDUCE Production by '/': 
pid <73>: 
expressionAtom := constantNum 
Condition<508>, REDUCE Production by '<=': 
pid <73>: 
expressionAtom := constantNum 
Condition<508>, REDUCE Production by '%': 
pid <73>: 
expressionAtom := constantNum 
Condition<508>, REDUCE Production by '>=': 
pid <73>: 
expressionAtom := constantNum 
Condition<508>, REDUCE Production by '!=': 
pid <73>: 
expressionAtom := constantNum 
Condition<508>, REDUCE Production by '+': 
pid <73>: 
expressionAtom := constantNum 
Condition<508>, REDUCE Production by '-': 
pid <73>: 
expressionAtom := constantNum 
Condition<508>, REDUCE Production by '$eof$': 
pid <73>: 
expressionAtom := constantNum 
Condition<508>, REDUCE Production by 'AND': 
pid <73>: 
expressionAtom := constantNum 
Condition<508>, REDUCE Production by 'OR': 
pid <73>: 
expressionAtom := constantNum 
From Condition <507> get package:
expressionAtom := columnName (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := columnName (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, }
===============================================================================

SHIFT <507> by columnName to <509>.
Condition<509>, REDUCE Production by '==': 
pid <75>: 
expressionAtom := columnName 
Condition<509>, REDUCE Production by '*': 
pid <75>: 
expressionAtom := columnName 
Condition<509>, REDUCE Production by '>': 
pid <75>: 
expressionAtom := columnName 
Condition<509>, REDUCE Production by '<': 
pid <75>: 
expressionAtom := columnName 
Condition<509>, REDUCE Production by '/': 
pid <75>: 
expressionAtom := columnName 
Condition<509>, REDUCE Production by '<=': 
pid <75>: 
expressionAtom := columnName 
Condition<509>, REDUCE Production by '%': 
pid <75>: 
expressionAtom := columnName 
Condition<509>, REDUCE Production by '>=': 
pid <75>: 
expressionAtom := columnName 
Condition<509>, REDUCE Production by '!=': 
pid <75>: 
expressionAtom := columnName 
Condition<509>, REDUCE Production by '+': 
pid <75>: 
expressionAtom := columnName 
Condition<509>, REDUCE Production by '-': 
pid <75>: 
expressionAtom := columnName 
Condition<509>, REDUCE Production by '$eof$': 
pid <75>: 
expressionAtom := columnName 
Condition<509>, REDUCE Production by 'AND': 
pid <75>: 
expressionAtom := columnName 
Condition<509>, REDUCE Production by 'OR': 
pid <75>: 
expressionAtom := columnName 
From Condition <507> get package:
predicate := expressionAtom (^)comparisonOperator expressionAtom , { AND, $eof$, OR, }
predicate := expressionAtom (^), { AND, $eof$, OR, }
expressionAtom := expressionAtom (^)mathOperator expressionAtom , { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, }
-------------------------------------------------------------------------------

After tracing, got package:
comparisonOperator := (^)'>' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
comparisonOperator := (^)'<=' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
comparisonOperator := (^)'!=' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
predicate := expressionAtom (^)comparisonOperator expressionAtom , { AND, $eof$, OR, }
comparisonOperator := (^)'==' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
comparisonOperator := (^)'<' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
comparisonOperator := (^)'>=' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'*' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
predicate := expressionAtom (^), { AND, $eof$, OR, }
mathOperator := (^)'-' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
expressionAtom := expressionAtom (^)mathOperator expressionAtom , { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, }
mathOperator := (^)'+' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'%' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'/' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <507> by expressionAtom to <510>.
From Condition <510> get package:
comparisonOperator := '>' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
comparisonOperator := '>' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <510> by '>' to <346>
This condition already existed.
From Condition <510> get package:
comparisonOperator := '<=' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
comparisonOperator := '<=' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <510> by '<=' to <344>
This condition already existed.
From Condition <510> get package:
comparisonOperator := '!=' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
comparisonOperator := '!=' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <510> by '!=' to <342>
This condition already existed.
From Condition <510> get package:
predicate := expressionAtom comparisonOperator (^)expressionAtom , { AND, $eof$, OR, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := (^)'ID' '.' 'ID' , { AND, $eof$, OR, *, /, %, +, -, }
constantNum := (^)'-' positiveNum , { AND, $eof$, OR, *, /, %, +, -, }
expressionAtom := (^)constantNum , { $eof$, AND, OR, *, /, %, +, -, }
expressionAtom := (^)columnName , { $eof$, AND, OR, *, /, %, +, -, }
predicate := expressionAtom comparisonOperator (^)expressionAtom , { AND, $eof$, OR, }
columnName := (^)'ID' , { AND, $eof$, OR, *, /, %, +, -, }
constantNum := (^)positiveNum , { AND, $eof$, OR, *, /, %, +, -, }
expressionAtom := (^)'STR_LITERAL' , { $eof$, AND, OR, *, /, %, +, -, }
expressionAtom := (^)expressionAtom mathOperator expressionAtom , { $eof$, AND, OR, *, /, %, +, -, }
positiveNum := (^)'NUMBER_CONSTANT' , { $eof$, AND, OR, *, /, %, +, -, }
===============================================================================

SHIFT <510> by comparisonOperator to <511>.
From Condition <511> get package:
columnName := 'ID' (^)'.' 'ID' , { AND, $eof$, OR, *, /, %, +, -, }
columnName := 'ID' (^), { AND, $eof$, OR, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID' (^)'.' 'ID' , { AND, $eof$, OR, *, /, %, +, -, }
columnName := 'ID' (^), { AND, $eof$, OR, *, /, %, +, -, }
===============================================================================

SHIFT <511> by 'ID' to <512>
From Condition <512> get package:
columnName := 'ID' '.' (^)'ID' , { AND, $eof$, OR, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID' '.' (^)'ID' , { AND, $eof$, OR, *, /, %, +, -, }
===============================================================================

SHIFT <512> by '.' to <513>
From Condition <513> get package:
columnName := 'ID' '.' 'ID' (^), { AND, $eof$, OR, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID' '.' 'ID' (^), { AND, $eof$, OR, *, /, %, +, -, }
===============================================================================

SHIFT <513> by 'ID' to <514>
Condition<514>, REDUCE Production by 'AND': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<514>, REDUCE Production by '$eof$': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<514>, REDUCE Production by 'OR': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<514>, REDUCE Production by '*': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<514>, REDUCE Production by '/': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<514>, REDUCE Production by '%': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<514>, REDUCE Production by '+': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<514>, REDUCE Production by '-': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<512>, REDUCE Production by 'AND': 
pid <68>: 
columnName := 'ID' 
Condition<512>, REDUCE Production by '$eof$': 
pid <68>: 
columnName := 'ID' 
Condition<512>, REDUCE Production by 'OR': 
pid <68>: 
columnName := 'ID' 
Condition<512>, REDUCE Production by '*': 
pid <68>: 
columnName := 'ID' 
Condition<512>, REDUCE Production by '/': 
pid <68>: 
columnName := 'ID' 
Condition<512>, REDUCE Production by '%': 
pid <68>: 
columnName := 'ID' 
Condition<512>, REDUCE Production by '+': 
pid <68>: 
columnName := 'ID' 
Condition<512>, REDUCE Production by '-': 
pid <68>: 
columnName := 'ID' 
From Condition <511> get package:
constantNum := '-' (^)positiveNum , { AND, $eof$, OR, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := (^)'NUMBER_CONSTANT' , { $eof$, AND, OR, *, /, %, +, -, }
constantNum := '-' (^)positiveNum , { AND, $eof$, OR, *, /, %, +, -, }
===============================================================================

SHIFT <511> by '-' to <515>
From Condition <515> get package:
positiveNum := 'NUMBER_CONSTANT' (^), { $eof$, AND, OR, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := 'NUMBER_CONSTANT' (^), { $eof$, AND, OR, *, /, %, +, -, }
===============================================================================

SHIFT <515> by 'NUMBER_CONSTANT' to <516>
Condition<516>, REDUCE Production by '$eof$': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<516>, REDUCE Production by 'AND': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<516>, REDUCE Production by 'OR': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<516>, REDUCE Production by '*': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<516>, REDUCE Production by '/': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<516>, REDUCE Production by '%': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<516>, REDUCE Production by '+': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<516>, REDUCE Production by '-': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
From Condition <515> get package:
constantNum := '-' positiveNum (^), { AND, $eof$, OR, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
constantNum := '-' positiveNum (^), { AND, $eof$, OR, *, /, %, +, -, }
===============================================================================

SHIFT <515> by positiveNum to <517>.
Condition<517>, REDUCE Production by 'AND': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<517>, REDUCE Production by '$eof$': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<517>, REDUCE Production by 'OR': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<517>, REDUCE Production by '*': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<517>, REDUCE Production by '/': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<517>, REDUCE Production by '%': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<517>, REDUCE Production by '+': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<517>, REDUCE Production by '-': 
pid <77>: 
constantNum := '-' positiveNum 
From Condition <511> get package:
expressionAtom := constantNum (^), { $eof$, AND, OR, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := constantNum (^), { $eof$, AND, OR, *, /, %, +, -, }
===============================================================================

SHIFT <511> by constantNum to <518>.
Condition<518>, REDUCE Production by '$eof$': 
pid <73>: 
expressionAtom := constantNum 
Condition<518>, REDUCE Production by 'AND': 
pid <73>: 
expressionAtom := constantNum 
Condition<518>, REDUCE Production by 'OR': 
pid <73>: 
expressionAtom := constantNum 
Condition<518>, REDUCE Production by '*': 
pid <73>: 
expressionAtom := constantNum 
Condition<518>, REDUCE Production by '/': 
pid <73>: 
expressionAtom := constantNum 
Condition<518>, REDUCE Production by '%': 
pid <73>: 
expressionAtom := constantNum 
Condition<518>, REDUCE Production by '+': 
pid <73>: 
expressionAtom := constantNum 
Condition<518>, REDUCE Production by '-': 
pid <73>: 
expressionAtom := constantNum 
From Condition <511> get package:
expressionAtom := columnName (^), { $eof$, AND, OR, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := columnName (^), { $eof$, AND, OR, *, /, %, +, -, }
===============================================================================

SHIFT <511> by columnName to <519>.
Condition<519>, REDUCE Production by '$eof$': 
pid <75>: 
expressionAtom := columnName 
Condition<519>, REDUCE Production by 'AND': 
pid <75>: 
expressionAtom := columnName 
Condition<519>, REDUCE Production by 'OR': 
pid <75>: 
expressionAtom := columnName 
Condition<519>, REDUCE Production by '*': 
pid <75>: 
expressionAtom := columnName 
Condition<519>, REDUCE Production by '/': 
pid <75>: 
expressionAtom := columnName 
Condition<519>, REDUCE Production by '%': 
pid <75>: 
expressionAtom := columnName 
Condition<519>, REDUCE Production by '+': 
pid <75>: 
expressionAtom := columnName 
Condition<519>, REDUCE Production by '-': 
pid <75>: 
expressionAtom := columnName 
From Condition <511> get package:
predicate := expressionAtom comparisonOperator expressionAtom (^), { AND, $eof$, OR, }
expressionAtom := expressionAtom (^)mathOperator expressionAtom , { $eof$, AND, OR, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := (^)'/' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'+' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
predicate := expressionAtom comparisonOperator expressionAtom (^), { AND, $eof$, OR, }
mathOperator := (^)'*' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'%' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'-' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
expressionAtom := expressionAtom (^)mathOperator expressionAtom , { $eof$, AND, OR, *, /, %, +, -, }
===============================================================================

SHIFT <511> by expressionAtom to <520>.
From Condition <520> get package:
mathOperator := '/' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '/' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <520> by '/' to <40>
This condition already existed.
From Condition <520> get package:
mathOperator := '+' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '+' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <520> by '+' to <41>
This condition already existed.
Condition<520>, REDUCE Production by 'AND': 
pid <71>: 
predicate := expressionAtom comparisonOperator expressionAtom 
Condition<520>, REDUCE Production by '$eof$': 
pid <71>: 
predicate := expressionAtom comparisonOperator expressionAtom 
Condition<520>, REDUCE Production by 'OR': 
pid <71>: 
predicate := expressionAtom comparisonOperator expressionAtom 
From Condition <520> get package:
mathOperator := '*' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '*' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <520> by '*' to <33>
This condition already existed.
From Condition <520> get package:
mathOperator := '%' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '%' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <520> by '%' to <26>
This condition already existed.
From Condition <520> get package:
mathOperator := '-' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '-' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <520> by '-' to <34>
This condition already existed.
From Condition <520> get package:
expressionAtom := expressionAtom mathOperator (^)expressionAtom , { $eof$, AND, OR, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := (^)'ID' , { $eof$, AND, OR, *, /, %, +, -, }
constantNum := (^)positiveNum , { $eof$, AND, OR, *, /, %, +, -, }
expressionAtom := (^)'STR_LITERAL' , { AND, $eof$, OR, *, /, %, +, -, }
expressionAtom := expressionAtom mathOperator (^)expressionAtom , { $eof$, AND, OR, *, /, %, +, -, }
expressionAtom := (^)expressionAtom mathOperator expressionAtom , { AND, $eof$, OR, *, /, %, +, -, }
columnName := (^)'ID' '.' 'ID' , { $eof$, AND, OR, *, /, %, +, -, }
constantNum := (^)'-' positiveNum , { $eof$, AND, OR, *, /, %, +, -, }
expressionAtom := (^)constantNum , { AND, $eof$, OR, *, /, %, +, -, }
expressionAtom := (^)columnName , { AND, $eof$, OR, *, /, %, +, -, }
positiveNum := (^)'NUMBER_CONSTANT' , { AND, $eof$, OR, *, /, %, +, -, }
===============================================================================

SHIFT <520> by mathOperator to <521>.
From Condition <521> get package:
columnName := 'ID' (^), { $eof$, AND, OR, *, /, %, +, -, }
columnName := 'ID' (^)'.' 'ID' , { $eof$, AND, OR, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID' (^), { $eof$, AND, OR, *, /, %, +, -, }
columnName := 'ID' (^)'.' 'ID' , { $eof$, AND, OR, *, /, %, +, -, }
===============================================================================

SHIFT <521> by 'ID' to <522>
Condition<522>, REDUCE Production by '$eof$': 
pid <68>: 
columnName := 'ID' 
Condition<522>, REDUCE Production by 'AND': 
pid <68>: 
columnName := 'ID' 
Condition<522>, REDUCE Production by 'OR': 
pid <68>: 
columnName := 'ID' 
Condition<522>, REDUCE Production by '*': 
pid <68>: 
columnName := 'ID' 
Condition<522>, REDUCE Production by '/': 
pid <68>: 
columnName := 'ID' 
Condition<522>, REDUCE Production by '%': 
pid <68>: 
columnName := 'ID' 
Condition<522>, REDUCE Production by '+': 
pid <68>: 
columnName := 'ID' 
Condition<522>, REDUCE Production by '-': 
pid <68>: 
columnName := 'ID' 
From Condition <522> get package:
columnName := 'ID' '.' (^)'ID' , { $eof$, AND, OR, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID' '.' (^)'ID' , { $eof$, AND, OR, *, /, %, +, -, }
===============================================================================

SHIFT <522> by '.' to <523>
From Condition <523> get package:
columnName := 'ID' '.' 'ID' (^), { $eof$, AND, OR, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID' '.' 'ID' (^), { $eof$, AND, OR, *, /, %, +, -, }
===============================================================================

SHIFT <523> by 'ID' to <524>
Condition<524>, REDUCE Production by '$eof$': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<524>, REDUCE Production by 'AND': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<524>, REDUCE Production by 'OR': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<524>, REDUCE Production by '*': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<524>, REDUCE Production by '/': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<524>, REDUCE Production by '%': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<524>, REDUCE Production by '+': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<524>, REDUCE Production by '-': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
From Condition <521> get package:
constantNum := positiveNum (^), { $eof$, AND, OR, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
constantNum := positiveNum (^), { $eof$, AND, OR, *, /, %, +, -, }
===============================================================================

SHIFT <521> by positiveNum to <525>.
Condition<525>, REDUCE Production by '$eof$': 
pid <78>: 
constantNum := positiveNum 
Condition<525>, REDUCE Production by 'AND': 
pid <78>: 
constantNum := positiveNum 
Condition<525>, REDUCE Production by 'OR': 
pid <78>: 
constantNum := positiveNum 
Condition<525>, REDUCE Production by '*': 
pid <78>: 
constantNum := positiveNum 
Condition<525>, REDUCE Production by '/': 
pid <78>: 
constantNum := positiveNum 
Condition<525>, REDUCE Production by '%': 
pid <78>: 
constantNum := positiveNum 
Condition<525>, REDUCE Production by '+': 
pid <78>: 
constantNum := positiveNum 
Condition<525>, REDUCE Production by '-': 
pid <78>: 
constantNum := positiveNum 
From Condition <521> get package:
expressionAtom := 'STR_LITERAL' (^), { AND, $eof$, OR, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := 'STR_LITERAL' (^), { AND, $eof$, OR, *, /, %, +, -, }
===============================================================================

SHIFT <521> by 'STR_LITERAL' to <526>
Condition<526>, REDUCE Production by 'AND': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<526>, REDUCE Production by '$eof$': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<526>, REDUCE Production by 'OR': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<526>, REDUCE Production by '*': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<526>, REDUCE Production by '/': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<526>, REDUCE Production by '%': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<526>, REDUCE Production by '+': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<526>, REDUCE Production by '-': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
From Condition <521> get package:
expressionAtom := expressionAtom (^)mathOperator expressionAtom , { AND, $eof$, OR, *, /, %, +, -, }
expressionAtom := expressionAtom mathOperator expressionAtom (^), { $eof$, AND, OR, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := (^)'*' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'%' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'-' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
expressionAtom := expressionAtom (^)mathOperator expressionAtom , { AND, $eof$, OR, *, /, %, +, -, }
expressionAtom := expressionAtom mathOperator expressionAtom (^), { $eof$, AND, OR, *, /, %, +, -, }
mathOperator := (^)'/' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'+' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <521> by expressionAtom to <527>.
From Condition <527> get package:
mathOperator := '*' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '*' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <527> by '*' to <33>
This condition already existed.
From Condition <527> get package:
mathOperator := '%' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '%' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <527> by '%' to <26>
This condition already existed.
From Condition <527> get package:
mathOperator := '-' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '-' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <527> by '-' to <34>
This condition already existed.
From Condition <527> get package:
expressionAtom := expressionAtom mathOperator (^)expressionAtom , { AND, $eof$, OR, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := (^)'ID' , { AND, $eof$, OR, *, /, %, +, -, }
constantNum := (^)positiveNum , { AND, $eof$, OR, *, /, %, +, -, }
expressionAtom := (^)'STR_LITERAL' , { $eof$, AND, OR, *, /, %, +, -, }
expressionAtom := expressionAtom mathOperator (^)expressionAtom , { AND, $eof$, OR, *, /, %, +, -, }
expressionAtom := (^)expressionAtom mathOperator expressionAtom , { $eof$, AND, OR, *, /, %, +, -, }
columnName := (^)'ID' '.' 'ID' , { AND, $eof$, OR, *, /, %, +, -, }
constantNum := (^)'-' positiveNum , { AND, $eof$, OR, *, /, %, +, -, }
expressionAtom := (^)constantNum , { $eof$, AND, OR, *, /, %, +, -, }
expressionAtom := (^)columnName , { $eof$, AND, OR, *, /, %, +, -, }
positiveNum := (^)'NUMBER_CONSTANT' , { $eof$, AND, OR, *, /, %, +, -, }
===============================================================================

SHIFT <527> by mathOperator to <528>.
From Condition <528> get package:
columnName := 'ID' (^), { AND, $eof$, OR, *, /, %, +, -, }
columnName := 'ID' (^)'.' 'ID' , { AND, $eof$, OR, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID' (^), { AND, $eof$, OR, *, /, %, +, -, }
columnName := 'ID' (^)'.' 'ID' , { AND, $eof$, OR, *, /, %, +, -, }
===============================================================================

SHIFT <528> by 'ID' to <529>
Condition<529>, REDUCE Production by 'AND': 
pid <68>: 
columnName := 'ID' 
Condition<529>, REDUCE Production by '$eof$': 
pid <68>: 
columnName := 'ID' 
Condition<529>, REDUCE Production by 'OR': 
pid <68>: 
columnName := 'ID' 
Condition<529>, REDUCE Production by '*': 
pid <68>: 
columnName := 'ID' 
Condition<529>, REDUCE Production by '/': 
pid <68>: 
columnName := 'ID' 
Condition<529>, REDUCE Production by '%': 
pid <68>: 
columnName := 'ID' 
Condition<529>, REDUCE Production by '+': 
pid <68>: 
columnName := 'ID' 
Condition<529>, REDUCE Production by '-': 
pid <68>: 
columnName := 'ID' 
From Condition <529> get package:
columnName := 'ID' '.' (^)'ID' , { AND, $eof$, OR, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID' '.' (^)'ID' , { AND, $eof$, OR, *, /, %, +, -, }
===============================================================================

SHIFT <529> by '.' to <513>
This condition already existed.
From Condition <528> get package:
constantNum := positiveNum (^), { AND, $eof$, OR, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
constantNum := positiveNum (^), { AND, $eof$, OR, *, /, %, +, -, }
===============================================================================

SHIFT <528> by positiveNum to <530>.
Condition<530>, REDUCE Production by 'AND': 
pid <78>: 
constantNum := positiveNum 
Condition<530>, REDUCE Production by '$eof$': 
pid <78>: 
constantNum := positiveNum 
Condition<530>, REDUCE Production by 'OR': 
pid <78>: 
constantNum := positiveNum 
Condition<530>, REDUCE Production by '*': 
pid <78>: 
constantNum := positiveNum 
Condition<530>, REDUCE Production by '/': 
pid <78>: 
constantNum := positiveNum 
Condition<530>, REDUCE Production by '%': 
pid <78>: 
constantNum := positiveNum 
Condition<530>, REDUCE Production by '+': 
pid <78>: 
constantNum := positiveNum 
Condition<530>, REDUCE Production by '-': 
pid <78>: 
constantNum := positiveNum 
From Condition <528> get package:
expressionAtom := 'STR_LITERAL' (^), { $eof$, AND, OR, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := 'STR_LITERAL' (^), { $eof$, AND, OR, *, /, %, +, -, }
===============================================================================

SHIFT <528> by 'STR_LITERAL' to <531>
Condition<531>, REDUCE Production by '$eof$': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<531>, REDUCE Production by 'AND': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<531>, REDUCE Production by 'OR': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<531>, REDUCE Production by '*': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<531>, REDUCE Production by '/': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<531>, REDUCE Production by '%': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<531>, REDUCE Production by '+': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<531>, REDUCE Production by '-': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
From Condition <528> get package:
expressionAtom := expressionAtom (^)mathOperator expressionAtom , { $eof$, AND, OR, *, /, %, +, -, }
expressionAtom := expressionAtom mathOperator expressionAtom (^), { AND, $eof$, OR, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := (^)'*' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'%' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'-' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
expressionAtom := expressionAtom (^)mathOperator expressionAtom , { $eof$, AND, OR, *, /, %, +, -, }
expressionAtom := expressionAtom mathOperator expressionAtom (^), { AND, $eof$, OR, *, /, %, +, -, }
mathOperator := (^)'/' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'+' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <528> by expressionAtom to <527>.
This condition already existed.
From Condition <528> get package:
constantNum := '-' (^)positiveNum , { AND, $eof$, OR, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := (^)'NUMBER_CONSTANT' , { $eof$, AND, OR, *, /, %, +, -, }
constantNum := '-' (^)positiveNum , { AND, $eof$, OR, *, /, %, +, -, }
===============================================================================

SHIFT <528> by '-' to <515>
This condition already existed.
From Condition <528> get package:
expressionAtom := constantNum (^), { $eof$, AND, OR, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := constantNum (^), { $eof$, AND, OR, *, /, %, +, -, }
===============================================================================

SHIFT <528> by constantNum to <518>.
This condition already existed.
From Condition <528> get package:
expressionAtom := columnName (^), { $eof$, AND, OR, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := columnName (^), { $eof$, AND, OR, *, /, %, +, -, }
===============================================================================

SHIFT <528> by columnName to <519>.
This condition already existed.
From Condition <528> get package:
positiveNum := 'NUMBER_CONSTANT' (^), { $eof$, AND, OR, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := 'NUMBER_CONSTANT' (^), { $eof$, AND, OR, *, /, %, +, -, }
===============================================================================

SHIFT <528> by 'NUMBER_CONSTANT' to <516>
This condition already existed.
Condition<527>, REDUCE Production by '$eof$': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Condition<527>, REDUCE Production by 'AND': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Condition<527>, REDUCE Production by 'OR': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Already existed SHIFT by symbol'*' :
<33>
Try to set it to: REDUCE to:
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Reset Action[527]['*'] to REDUCE:
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Condition<527>, REDUCE Production by '/': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Already existed SHIFT by symbol'%' :
<26>
Try to set it to: REDUCE to:
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Reset Action[527]['%'] to REDUCE:
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Condition<527>, REDUCE Production by '+': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Already existed SHIFT by symbol'-' :
<34>
Try to set it to: REDUCE to:
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Reset Action[527]['-'] to REDUCE:
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
From Condition <527> get package:
mathOperator := '/' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '/' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

Already existed REDUCE by symbol '/': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Try to set it to: SHIFT to <40>
Set SHIFT fail in: from condition <527> to condition <40>.
This condition already existed.
From Condition <527> get package:
mathOperator := '+' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '+' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

Already existed REDUCE by symbol '+': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Try to set it to: SHIFT to <41>
Set SHIFT fail in: from condition <527> to condition <41>.
This condition already existed.
From Condition <521> get package:
constantNum := '-' (^)positiveNum , { $eof$, AND, OR, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := (^)'NUMBER_CONSTANT' , { AND, $eof$, OR, *, /, %, +, -, }
constantNum := '-' (^)positiveNum , { $eof$, AND, OR, *, /, %, +, -, }
===============================================================================

SHIFT <521> by '-' to <532>
From Condition <532> get package:
positiveNum := 'NUMBER_CONSTANT' (^), { AND, $eof$, OR, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := 'NUMBER_CONSTANT' (^), { AND, $eof$, OR, *, /, %, +, -, }
===============================================================================

SHIFT <532> by 'NUMBER_CONSTANT' to <533>
Condition<533>, REDUCE Production by 'AND': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<533>, REDUCE Production by '$eof$': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<533>, REDUCE Production by 'OR': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<533>, REDUCE Production by '*': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<533>, REDUCE Production by '/': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<533>, REDUCE Production by '%': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<533>, REDUCE Production by '+': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<533>, REDUCE Production by '-': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
From Condition <532> get package:
constantNum := '-' positiveNum (^), { $eof$, AND, OR, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
constantNum := '-' positiveNum (^), { $eof$, AND, OR, *, /, %, +, -, }
===============================================================================

SHIFT <532> by positiveNum to <534>.
Condition<534>, REDUCE Production by '$eof$': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<534>, REDUCE Production by 'AND': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<534>, REDUCE Production by 'OR': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<534>, REDUCE Production by '*': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<534>, REDUCE Production by '/': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<534>, REDUCE Production by '%': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<534>, REDUCE Production by '+': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<534>, REDUCE Production by '-': 
pid <77>: 
constantNum := '-' positiveNum 
From Condition <521> get package:
expressionAtom := constantNum (^), { AND, $eof$, OR, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := constantNum (^), { AND, $eof$, OR, *, /, %, +, -, }
===============================================================================

SHIFT <521> by constantNum to <535>.
Condition<535>, REDUCE Production by 'AND': 
pid <73>: 
expressionAtom := constantNum 
Condition<535>, REDUCE Production by '$eof$': 
pid <73>: 
expressionAtom := constantNum 
Condition<535>, REDUCE Production by 'OR': 
pid <73>: 
expressionAtom := constantNum 
Condition<535>, REDUCE Production by '*': 
pid <73>: 
expressionAtom := constantNum 
Condition<535>, REDUCE Production by '/': 
pid <73>: 
expressionAtom := constantNum 
Condition<535>, REDUCE Production by '%': 
pid <73>: 
expressionAtom := constantNum 
Condition<535>, REDUCE Production by '+': 
pid <73>: 
expressionAtom := constantNum 
Condition<535>, REDUCE Production by '-': 
pid <73>: 
expressionAtom := constantNum 
From Condition <521> get package:
expressionAtom := columnName (^), { AND, $eof$, OR, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := columnName (^), { AND, $eof$, OR, *, /, %, +, -, }
===============================================================================

SHIFT <521> by columnName to <536>.
Condition<536>, REDUCE Production by 'AND': 
pid <75>: 
expressionAtom := columnName 
Condition<536>, REDUCE Production by '$eof$': 
pid <75>: 
expressionAtom := columnName 
Condition<536>, REDUCE Production by 'OR': 
pid <75>: 
expressionAtom := columnName 
Condition<536>, REDUCE Production by '*': 
pid <75>: 
expressionAtom := columnName 
Condition<536>, REDUCE Production by '/': 
pid <75>: 
expressionAtom := columnName 
Condition<536>, REDUCE Production by '%': 
pid <75>: 
expressionAtom := columnName 
Condition<536>, REDUCE Production by '+': 
pid <75>: 
expressionAtom := columnName 
Condition<536>, REDUCE Production by '-': 
pid <75>: 
expressionAtom := columnName 
From Condition <521> get package:
positiveNum := 'NUMBER_CONSTANT' (^), { AND, $eof$, OR, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := 'NUMBER_CONSTANT' (^), { AND, $eof$, OR, *, /, %, +, -, }
===============================================================================

SHIFT <521> by 'NUMBER_CONSTANT' to <533>
This condition already existed.
From Condition <511> get package:
constantNum := positiveNum (^), { AND, $eof$, OR, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
constantNum := positiveNum (^), { AND, $eof$, OR, *, /, %, +, -, }
===============================================================================

SHIFT <511> by positiveNum to <530>.
This condition already existed.
From Condition <511> get package:
expressionAtom := 'STR_LITERAL' (^), { $eof$, AND, OR, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := 'STR_LITERAL' (^), { $eof$, AND, OR, *, /, %, +, -, }
===============================================================================

SHIFT <511> by 'STR_LITERAL' to <531>
This condition already existed.
From Condition <511> get package:
positiveNum := 'NUMBER_CONSTANT' (^), { $eof$, AND, OR, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := 'NUMBER_CONSTANT' (^), { $eof$, AND, OR, *, /, %, +, -, }
===============================================================================

SHIFT <511> by 'NUMBER_CONSTANT' to <516>
This condition already existed.
From Condition <510> get package:
comparisonOperator := '==' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
comparisonOperator := '==' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <510> by '==' to <347>
This condition already existed.
From Condition <510> get package:
comparisonOperator := '<' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
comparisonOperator := '<' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <510> by '<' to <345>
This condition already existed.
From Condition <510> get package:
comparisonOperator := '>=' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
comparisonOperator := '>=' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <510> by '>=' to <343>
This condition already existed.
From Condition <510> get package:
mathOperator := '*' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '*' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <510> by '*' to <33>
This condition already existed.
Condition<510>, REDUCE Production by 'AND': 
pid <72>: 
predicate := expressionAtom 
Condition<510>, REDUCE Production by '$eof$': 
pid <72>: 
predicate := expressionAtom 
Condition<510>, REDUCE Production by 'OR': 
pid <72>: 
predicate := expressionAtom 
From Condition <510> get package:
mathOperator := '-' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '-' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <510> by '-' to <34>
This condition already existed.
From Condition <510> get package:
expressionAtom := expressionAtom mathOperator (^)expressionAtom , { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := (^)'ID' , { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, }
constantNum := (^)positiveNum , { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, }
expressionAtom := (^)'STR_LITERAL' , { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, }
expressionAtom := expressionAtom mathOperator (^)expressionAtom , { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, }
expressionAtom := (^)expressionAtom mathOperator expressionAtom , { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, }
columnName := (^)'ID' '.' 'ID' , { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, }
constantNum := (^)'-' positiveNum , { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, }
expressionAtom := (^)constantNum , { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, }
expressionAtom := (^)columnName , { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, }
positiveNum := (^)'NUMBER_CONSTANT' , { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, }
===============================================================================

SHIFT <510> by mathOperator to <537>.
From Condition <537> get package:
columnName := 'ID' (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, }
columnName := 'ID' (^)'.' 'ID' , { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID' (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, }
columnName := 'ID' (^)'.' 'ID' , { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, }
===============================================================================

SHIFT <537> by 'ID' to <538>
Condition<538>, REDUCE Production by '==': 
pid <68>: 
columnName := 'ID' 
Condition<538>, REDUCE Production by '*': 
pid <68>: 
columnName := 'ID' 
Condition<538>, REDUCE Production by '>': 
pid <68>: 
columnName := 'ID' 
Condition<538>, REDUCE Production by '<': 
pid <68>: 
columnName := 'ID' 
Condition<538>, REDUCE Production by '/': 
pid <68>: 
columnName := 'ID' 
Condition<538>, REDUCE Production by '<=': 
pid <68>: 
columnName := 'ID' 
Condition<538>, REDUCE Production by '%': 
pid <68>: 
columnName := 'ID' 
Condition<538>, REDUCE Production by '>=': 
pid <68>: 
columnName := 'ID' 
Condition<538>, REDUCE Production by '!=': 
pid <68>: 
columnName := 'ID' 
Condition<538>, REDUCE Production by '+': 
pid <68>: 
columnName := 'ID' 
Condition<538>, REDUCE Production by '-': 
pid <68>: 
columnName := 'ID' 
Condition<538>, REDUCE Production by '$eof$': 
pid <68>: 
columnName := 'ID' 
Condition<538>, REDUCE Production by 'AND': 
pid <68>: 
columnName := 'ID' 
Condition<538>, REDUCE Production by 'OR': 
pid <68>: 
columnName := 'ID' 
From Condition <538> get package:
columnName := 'ID' '.' (^)'ID' , { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID' '.' (^)'ID' , { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, }
===============================================================================

SHIFT <538> by '.' to <539>
From Condition <539> get package:
columnName := 'ID' '.' 'ID' (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID' '.' 'ID' (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, }
===============================================================================

SHIFT <539> by 'ID' to <540>
Condition<540>, REDUCE Production by '==': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<540>, REDUCE Production by '*': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<540>, REDUCE Production by '>': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<540>, REDUCE Production by '<': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<540>, REDUCE Production by '/': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<540>, REDUCE Production by '<=': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<540>, REDUCE Production by '%': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<540>, REDUCE Production by '>=': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<540>, REDUCE Production by '!=': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<540>, REDUCE Production by '+': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<540>, REDUCE Production by '-': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<540>, REDUCE Production by '$eof$': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<540>, REDUCE Production by 'AND': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<540>, REDUCE Production by 'OR': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
From Condition <537> get package:
constantNum := positiveNum (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, }
-------------------------------------------------------------------------------

After tracing, got package:
constantNum := positiveNum (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, }
===============================================================================

SHIFT <537> by positiveNum to <541>.
Condition<541>, REDUCE Production by '==': 
pid <78>: 
constantNum := positiveNum 
Condition<541>, REDUCE Production by '*': 
pid <78>: 
constantNum := positiveNum 
Condition<541>, REDUCE Production by '>': 
pid <78>: 
constantNum := positiveNum 
Condition<541>, REDUCE Production by '<': 
pid <78>: 
constantNum := positiveNum 
Condition<541>, REDUCE Production by '/': 
pid <78>: 
constantNum := positiveNum 
Condition<541>, REDUCE Production by '<=': 
pid <78>: 
constantNum := positiveNum 
Condition<541>, REDUCE Production by '%': 
pid <78>: 
constantNum := positiveNum 
Condition<541>, REDUCE Production by '>=': 
pid <78>: 
constantNum := positiveNum 
Condition<541>, REDUCE Production by '!=': 
pid <78>: 
constantNum := positiveNum 
Condition<541>, REDUCE Production by '+': 
pid <78>: 
constantNum := positiveNum 
Condition<541>, REDUCE Production by '-': 
pid <78>: 
constantNum := positiveNum 
Condition<541>, REDUCE Production by '$eof$': 
pid <78>: 
constantNum := positiveNum 
Condition<541>, REDUCE Production by 'AND': 
pid <78>: 
constantNum := positiveNum 
Condition<541>, REDUCE Production by 'OR': 
pid <78>: 
constantNum := positiveNum 
From Condition <537> get package:
expressionAtom := 'STR_LITERAL' (^), { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := 'STR_LITERAL' (^), { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, }
===============================================================================

SHIFT <537> by 'STR_LITERAL' to <542>
Condition<542>, REDUCE Production by '==': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<542>, REDUCE Production by '>': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<542>, REDUCE Production by '*': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<542>, REDUCE Production by '<': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<542>, REDUCE Production by '<=': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<542>, REDUCE Production by '/': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<542>, REDUCE Production by '>=': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<542>, REDUCE Production by '%': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<542>, REDUCE Production by '!=': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<542>, REDUCE Production by '+': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<542>, REDUCE Production by '-': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<542>, REDUCE Production by '$eof$': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<542>, REDUCE Production by 'AND': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<542>, REDUCE Production by 'OR': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
From Condition <537> get package:
expressionAtom := expressionAtom (^)mathOperator expressionAtom , { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, }
expressionAtom := expressionAtom mathOperator expressionAtom (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := (^)'*' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'%' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'-' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
expressionAtom := expressionAtom (^)mathOperator expressionAtom , { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, }
expressionAtom := expressionAtom mathOperator expressionAtom (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, }
mathOperator := (^)'/' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'+' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <537> by expressionAtom to <543>.
From Condition <543> get package:
mathOperator := '*' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '*' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <543> by '*' to <33>
This condition already existed.
From Condition <543> get package:
mathOperator := '%' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '%' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <543> by '%' to <26>
This condition already existed.
From Condition <543> get package:
mathOperator := '-' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '-' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <543> by '-' to <34>
This condition already existed.
From Condition <543> get package:
expressionAtom := expressionAtom mathOperator (^)expressionAtom , { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := (^)'ID' , { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, }
constantNum := (^)positiveNum , { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, }
expressionAtom := (^)'STR_LITERAL' , { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, }
expressionAtom := expressionAtom mathOperator (^)expressionAtom , { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, }
expressionAtom := (^)expressionAtom mathOperator expressionAtom , { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, }
columnName := (^)'ID' '.' 'ID' , { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, }
constantNum := (^)'-' positiveNum , { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, }
expressionAtom := (^)constantNum , { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, }
expressionAtom := (^)columnName , { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, }
positiveNum := (^)'NUMBER_CONSTANT' , { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, }
===============================================================================

SHIFT <543> by mathOperator to <544>.
From Condition <544> get package:
columnName := 'ID' (^), { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, }
columnName := 'ID' (^)'.' 'ID' , { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID' (^), { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, }
columnName := 'ID' (^)'.' 'ID' , { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, }
===============================================================================

SHIFT <544> by 'ID' to <545>
Condition<545>, REDUCE Production by '==': 
pid <68>: 
columnName := 'ID' 
Condition<545>, REDUCE Production by '>': 
pid <68>: 
columnName := 'ID' 
Condition<545>, REDUCE Production by '*': 
pid <68>: 
columnName := 'ID' 
Condition<545>, REDUCE Production by '<': 
pid <68>: 
columnName := 'ID' 
Condition<545>, REDUCE Production by '<=': 
pid <68>: 
columnName := 'ID' 
Condition<545>, REDUCE Production by '/': 
pid <68>: 
columnName := 'ID' 
Condition<545>, REDUCE Production by '>=': 
pid <68>: 
columnName := 'ID' 
Condition<545>, REDUCE Production by '%': 
pid <68>: 
columnName := 'ID' 
Condition<545>, REDUCE Production by '!=': 
pid <68>: 
columnName := 'ID' 
Condition<545>, REDUCE Production by '+': 
pid <68>: 
columnName := 'ID' 
Condition<545>, REDUCE Production by '-': 
pid <68>: 
columnName := 'ID' 
Condition<545>, REDUCE Production by '$eof$': 
pid <68>: 
columnName := 'ID' 
Condition<545>, REDUCE Production by 'AND': 
pid <68>: 
columnName := 'ID' 
Condition<545>, REDUCE Production by 'OR': 
pid <68>: 
columnName := 'ID' 
From Condition <545> get package:
columnName := 'ID' '.' (^)'ID' , { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID' '.' (^)'ID' , { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, }
===============================================================================

SHIFT <545> by '.' to <546>
From Condition <546> get package:
columnName := 'ID' '.' 'ID' (^), { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID' '.' 'ID' (^), { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, }
===============================================================================

SHIFT <546> by 'ID' to <547>
Condition<547>, REDUCE Production by '==': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<547>, REDUCE Production by '>': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<547>, REDUCE Production by '*': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<547>, REDUCE Production by '<': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<547>, REDUCE Production by '<=': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<547>, REDUCE Production by '/': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<547>, REDUCE Production by '>=': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<547>, REDUCE Production by '%': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<547>, REDUCE Production by '!=': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<547>, REDUCE Production by '+': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<547>, REDUCE Production by '-': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<547>, REDUCE Production by '$eof$': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<547>, REDUCE Production by 'AND': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<547>, REDUCE Production by 'OR': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
From Condition <544> get package:
constantNum := positiveNum (^), { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, }
-------------------------------------------------------------------------------

After tracing, got package:
constantNum := positiveNum (^), { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, }
===============================================================================

SHIFT <544> by positiveNum to <548>.
Condition<548>, REDUCE Production by '==': 
pid <78>: 
constantNum := positiveNum 
Condition<548>, REDUCE Production by '>': 
pid <78>: 
constantNum := positiveNum 
Condition<548>, REDUCE Production by '*': 
pid <78>: 
constantNum := positiveNum 
Condition<548>, REDUCE Production by '<': 
pid <78>: 
constantNum := positiveNum 
Condition<548>, REDUCE Production by '<=': 
pid <78>: 
constantNum := positiveNum 
Condition<548>, REDUCE Production by '/': 
pid <78>: 
constantNum := positiveNum 
Condition<548>, REDUCE Production by '>=': 
pid <78>: 
constantNum := positiveNum 
Condition<548>, REDUCE Production by '%': 
pid <78>: 
constantNum := positiveNum 
Condition<548>, REDUCE Production by '!=': 
pid <78>: 
constantNum := positiveNum 
Condition<548>, REDUCE Production by '+': 
pid <78>: 
constantNum := positiveNum 
Condition<548>, REDUCE Production by '-': 
pid <78>: 
constantNum := positiveNum 
Condition<548>, REDUCE Production by '$eof$': 
pid <78>: 
constantNum := positiveNum 
Condition<548>, REDUCE Production by 'AND': 
pid <78>: 
constantNum := positiveNum 
Condition<548>, REDUCE Production by 'OR': 
pid <78>: 
constantNum := positiveNum 
From Condition <544> get package:
expressionAtom := 'STR_LITERAL' (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := 'STR_LITERAL' (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, }
===============================================================================

SHIFT <544> by 'STR_LITERAL' to <549>
Condition<549>, REDUCE Production by '==': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<549>, REDUCE Production by '*': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<549>, REDUCE Production by '>': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<549>, REDUCE Production by '<': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<549>, REDUCE Production by '/': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<549>, REDUCE Production by '<=': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<549>, REDUCE Production by '%': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<549>, REDUCE Production by '>=': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<549>, REDUCE Production by '!=': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<549>, REDUCE Production by '+': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<549>, REDUCE Production by '-': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<549>, REDUCE Production by '$eof$': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<549>, REDUCE Production by 'AND': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<549>, REDUCE Production by 'OR': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
From Condition <544> get package:
expressionAtom := expressionAtom (^)mathOperator expressionAtom , { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, }
expressionAtom := expressionAtom mathOperator expressionAtom (^), { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := (^)'*' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'%' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'-' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
expressionAtom := expressionAtom (^)mathOperator expressionAtom , { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, }
expressionAtom := expressionAtom mathOperator expressionAtom (^), { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, }
mathOperator := (^)'/' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'+' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <544> by expressionAtom to <543>.
This condition already existed.
From Condition <544> get package:
constantNum := '-' (^)positiveNum , { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := (^)'NUMBER_CONSTANT' , { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, }
constantNum := '-' (^)positiveNum , { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, }
===============================================================================

SHIFT <544> by '-' to <550>
From Condition <550> get package:
positiveNum := 'NUMBER_CONSTANT' (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := 'NUMBER_CONSTANT' (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, }
===============================================================================

SHIFT <550> by 'NUMBER_CONSTANT' to <551>
Condition<551>, REDUCE Production by '==': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<551>, REDUCE Production by '*': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<551>, REDUCE Production by '>': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<551>, REDUCE Production by '<': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<551>, REDUCE Production by '/': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<551>, REDUCE Production by '<=': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<551>, REDUCE Production by '%': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<551>, REDUCE Production by '>=': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<551>, REDUCE Production by '!=': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<551>, REDUCE Production by '+': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<551>, REDUCE Production by '-': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<551>, REDUCE Production by '$eof$': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<551>, REDUCE Production by 'AND': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<551>, REDUCE Production by 'OR': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
From Condition <550> get package:
constantNum := '-' positiveNum (^), { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, }
-------------------------------------------------------------------------------

After tracing, got package:
constantNum := '-' positiveNum (^), { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, }
===============================================================================

SHIFT <550> by positiveNum to <552>.
Condition<552>, REDUCE Production by '==': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<552>, REDUCE Production by '>': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<552>, REDUCE Production by '*': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<552>, REDUCE Production by '<': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<552>, REDUCE Production by '<=': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<552>, REDUCE Production by '/': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<552>, REDUCE Production by '>=': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<552>, REDUCE Production by '%': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<552>, REDUCE Production by '!=': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<552>, REDUCE Production by '+': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<552>, REDUCE Production by '-': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<552>, REDUCE Production by '$eof$': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<552>, REDUCE Production by 'AND': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<552>, REDUCE Production by 'OR': 
pid <77>: 
constantNum := '-' positiveNum 
From Condition <544> get package:
expressionAtom := constantNum (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := constantNum (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, }
===============================================================================

SHIFT <544> by constantNum to <508>.
This condition already existed.
From Condition <544> get package:
expressionAtom := columnName (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := columnName (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, }
===============================================================================

SHIFT <544> by columnName to <509>.
This condition already existed.
From Condition <544> get package:
positiveNum := 'NUMBER_CONSTANT' (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := 'NUMBER_CONSTANT' (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, }
===============================================================================

SHIFT <544> by 'NUMBER_CONSTANT' to <551>
This condition already existed.
Condition<543>, REDUCE Production by '==': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Already existed SHIFT by symbol'*' :
<33>
Try to set it to: REDUCE to:
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Reset Action[543]['*'] to REDUCE:
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Condition<543>, REDUCE Production by '>': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Condition<543>, REDUCE Production by '<': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Condition<543>, REDUCE Production by '/': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Condition<543>, REDUCE Production by '<=': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Already existed SHIFT by symbol'%' :
<26>
Try to set it to: REDUCE to:
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Reset Action[543]['%'] to REDUCE:
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Condition<543>, REDUCE Production by '>=': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Condition<543>, REDUCE Production by '!=': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Condition<543>, REDUCE Production by '+': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Already existed SHIFT by symbol'-' :
<34>
Try to set it to: REDUCE to:
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Reset Action[543]['-'] to REDUCE:
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Condition<543>, REDUCE Production by '$eof$': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Condition<543>, REDUCE Production by 'AND': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Condition<543>, REDUCE Production by 'OR': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
From Condition <543> get package:
mathOperator := '/' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '/' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

Already existed REDUCE by symbol '/': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Try to set it to: SHIFT to <40>
Set SHIFT fail in: from condition <543> to condition <40>.
This condition already existed.
From Condition <543> get package:
mathOperator := '+' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '+' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

Already existed REDUCE by symbol '+': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Try to set it to: SHIFT to <41>
Set SHIFT fail in: from condition <543> to condition <41>.
This condition already existed.
From Condition <537> get package:
constantNum := '-' (^)positiveNum , { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := (^)'NUMBER_CONSTANT' , { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, }
constantNum := '-' (^)positiveNum , { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, }
===============================================================================

SHIFT <537> by '-' to <553>
From Condition <553> get package:
positiveNum := 'NUMBER_CONSTANT' (^), { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := 'NUMBER_CONSTANT' (^), { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, }
===============================================================================

SHIFT <553> by 'NUMBER_CONSTANT' to <554>
Condition<554>, REDUCE Production by '==': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<554>, REDUCE Production by '>': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<554>, REDUCE Production by '*': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<554>, REDUCE Production by '<': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<554>, REDUCE Production by '<=': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<554>, REDUCE Production by '/': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<554>, REDUCE Production by '>=': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<554>, REDUCE Production by '%': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<554>, REDUCE Production by '!=': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<554>, REDUCE Production by '+': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<554>, REDUCE Production by '-': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<554>, REDUCE Production by '$eof$': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<554>, REDUCE Production by 'AND': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<554>, REDUCE Production by 'OR': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
From Condition <553> get package:
constantNum := '-' positiveNum (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, }
-------------------------------------------------------------------------------

After tracing, got package:
constantNum := '-' positiveNum (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, }
===============================================================================

SHIFT <553> by positiveNum to <555>.
Condition<555>, REDUCE Production by '==': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<555>, REDUCE Production by '*': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<555>, REDUCE Production by '>': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<555>, REDUCE Production by '<': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<555>, REDUCE Production by '/': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<555>, REDUCE Production by '<=': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<555>, REDUCE Production by '%': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<555>, REDUCE Production by '>=': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<555>, REDUCE Production by '!=': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<555>, REDUCE Production by '+': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<555>, REDUCE Production by '-': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<555>, REDUCE Production by '$eof$': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<555>, REDUCE Production by 'AND': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<555>, REDUCE Production by 'OR': 
pid <77>: 
constantNum := '-' positiveNum 
From Condition <537> get package:
expressionAtom := constantNum (^), { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := constantNum (^), { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, }
===============================================================================

SHIFT <537> by constantNum to <556>.
Condition<556>, REDUCE Production by '==': 
pid <73>: 
expressionAtom := constantNum 
Condition<556>, REDUCE Production by '>': 
pid <73>: 
expressionAtom := constantNum 
Condition<556>, REDUCE Production by '*': 
pid <73>: 
expressionAtom := constantNum 
Condition<556>, REDUCE Production by '<': 
pid <73>: 
expressionAtom := constantNum 
Condition<556>, REDUCE Production by '<=': 
pid <73>: 
expressionAtom := constantNum 
Condition<556>, REDUCE Production by '/': 
pid <73>: 
expressionAtom := constantNum 
Condition<556>, REDUCE Production by '>=': 
pid <73>: 
expressionAtom := constantNum 
Condition<556>, REDUCE Production by '%': 
pid <73>: 
expressionAtom := constantNum 
Condition<556>, REDUCE Production by '!=': 
pid <73>: 
expressionAtom := constantNum 
Condition<556>, REDUCE Production by '+': 
pid <73>: 
expressionAtom := constantNum 
Condition<556>, REDUCE Production by '-': 
pid <73>: 
expressionAtom := constantNum 
Condition<556>, REDUCE Production by '$eof$': 
pid <73>: 
expressionAtom := constantNum 
Condition<556>, REDUCE Production by 'AND': 
pid <73>: 
expressionAtom := constantNum 
Condition<556>, REDUCE Production by 'OR': 
pid <73>: 
expressionAtom := constantNum 
From Condition <537> get package:
expressionAtom := columnName (^), { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := columnName (^), { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, }
===============================================================================

SHIFT <537> by columnName to <557>.
Condition<557>, REDUCE Production by '==': 
pid <75>: 
expressionAtom := columnName 
Condition<557>, REDUCE Production by '>': 
pid <75>: 
expressionAtom := columnName 
Condition<557>, REDUCE Production by '*': 
pid <75>: 
expressionAtom := columnName 
Condition<557>, REDUCE Production by '<': 
pid <75>: 
expressionAtom := columnName 
Condition<557>, REDUCE Production by '<=': 
pid <75>: 
expressionAtom := columnName 
Condition<557>, REDUCE Production by '/': 
pid <75>: 
expressionAtom := columnName 
Condition<557>, REDUCE Production by '>=': 
pid <75>: 
expressionAtom := columnName 
Condition<557>, REDUCE Production by '%': 
pid <75>: 
expressionAtom := columnName 
Condition<557>, REDUCE Production by '!=': 
pid <75>: 
expressionAtom := columnName 
Condition<557>, REDUCE Production by '+': 
pid <75>: 
expressionAtom := columnName 
Condition<557>, REDUCE Production by '-': 
pid <75>: 
expressionAtom := columnName 
Condition<557>, REDUCE Production by '$eof$': 
pid <75>: 
expressionAtom := columnName 
Condition<557>, REDUCE Production by 'AND': 
pid <75>: 
expressionAtom := columnName 
Condition<557>, REDUCE Production by 'OR': 
pid <75>: 
expressionAtom := columnName 
From Condition <537> get package:
positiveNum := 'NUMBER_CONSTANT' (^), { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := 'NUMBER_CONSTANT' (^), { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, }
===============================================================================

SHIFT <537> by 'NUMBER_CONSTANT' to <554>
This condition already existed.
From Condition <510> get package:
mathOperator := '+' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '+' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <510> by '+' to <41>
This condition already existed.
From Condition <510> get package:
mathOperator := '%' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '%' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <510> by '%' to <26>
This condition already existed.
From Condition <510> get package:
mathOperator := '/' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '/' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <510> by '/' to <40>
This condition already existed.
From Condition <507> get package:
updateStatement := 'UPDATE' tableName 'SET' updateElements 'WHERE' expression (^), { $eof$, }
expression := expression (^)logicalOperator expression , { AND, $eof$, OR, }
-------------------------------------------------------------------------------

After tracing, got package:
logicalOperator := (^)'OR' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
updateStatement := 'UPDATE' tableName 'SET' updateElements 'WHERE' expression (^), { $eof$, }
expression := expression (^)logicalOperator expression , { AND, $eof$, OR, }
logicalOperator := (^)'AND' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <507> by expression to <558>.
From Condition <558> get package:
logicalOperator := 'OR' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
logicalOperator := 'OR' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <558> by 'OR' to <377>
This condition already existed.
Condition<558>, REDUCE Production by '$eof$': 
pid <33>: 
updateStatement := 'UPDATE' tableName 'SET' updateElements 'WHERE' expression 
From Condition <558> get package:
expression := expression logicalOperator (^)expression , { AND, $eof$, OR, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := (^)constantNum , { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, }
expressionAtom := (^)columnName , { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, }
predicate := (^)expressionAtom comparisonOperator expressionAtom , { AND, $eof$, OR, }
expression := expression logicalOperator (^)expression , { AND, $eof$, OR, }
expression := (^)expression logicalOperator expression , { $eof$, AND, OR, }
expressionAtom := (^)'STR_LITERAL' , { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, }
expressionAtom := (^)expressionAtom mathOperator expressionAtom , { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, }
predicate := (^)expressionAtom , { AND, $eof$, OR, }
expression := (^)predicate , { $eof$, AND, OR, }
constantNum := (^)positiveNum , { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, }
constantNum := (^)'-' positiveNum , { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, }
columnName := (^)'ID' , { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, }
columnName := (^)'ID' '.' 'ID' , { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, }
positiveNum := (^)'NUMBER_CONSTANT' , { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, }
===============================================================================

SHIFT <558> by logicalOperator to <559>.
From Condition <559> get package:
expressionAtom := constantNum (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := constantNum (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, }
===============================================================================

SHIFT <559> by constantNum to <560>.
Condition<560>, REDUCE Production by '==': 
pid <73>: 
expressionAtom := constantNum 
Condition<560>, REDUCE Production by '*': 
pid <73>: 
expressionAtom := constantNum 
Condition<560>, REDUCE Production by '>': 
pid <73>: 
expressionAtom := constantNum 
Condition<560>, REDUCE Production by '<': 
pid <73>: 
expressionAtom := constantNum 
Condition<560>, REDUCE Production by '/': 
pid <73>: 
expressionAtom := constantNum 
Condition<560>, REDUCE Production by '<=': 
pid <73>: 
expressionAtom := constantNum 
Condition<560>, REDUCE Production by '%': 
pid <73>: 
expressionAtom := constantNum 
Condition<560>, REDUCE Production by '>=': 
pid <73>: 
expressionAtom := constantNum 
Condition<560>, REDUCE Production by '!=': 
pid <73>: 
expressionAtom := constantNum 
Condition<560>, REDUCE Production by '+': 
pid <73>: 
expressionAtom := constantNum 
Condition<560>, REDUCE Production by '-': 
pid <73>: 
expressionAtom := constantNum 
Condition<560>, REDUCE Production by 'AND': 
pid <73>: 
expressionAtom := constantNum 
Condition<560>, REDUCE Production by '$eof$': 
pid <73>: 
expressionAtom := constantNum 
Condition<560>, REDUCE Production by 'OR': 
pid <73>: 
expressionAtom := constantNum 
From Condition <559> get package:
expressionAtom := columnName (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := columnName (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, }
===============================================================================

SHIFT <559> by columnName to <561>.
Condition<561>, REDUCE Production by '==': 
pid <75>: 
expressionAtom := columnName 
Condition<561>, REDUCE Production by '*': 
pid <75>: 
expressionAtom := columnName 
Condition<561>, REDUCE Production by '>': 
pid <75>: 
expressionAtom := columnName 
Condition<561>, REDUCE Production by '<': 
pid <75>: 
expressionAtom := columnName 
Condition<561>, REDUCE Production by '/': 
pid <75>: 
expressionAtom := columnName 
Condition<561>, REDUCE Production by '<=': 
pid <75>: 
expressionAtom := columnName 
Condition<561>, REDUCE Production by '%': 
pid <75>: 
expressionAtom := columnName 
Condition<561>, REDUCE Production by '>=': 
pid <75>: 
expressionAtom := columnName 
Condition<561>, REDUCE Production by '!=': 
pid <75>: 
expressionAtom := columnName 
Condition<561>, REDUCE Production by '+': 
pid <75>: 
expressionAtom := columnName 
Condition<561>, REDUCE Production by '-': 
pid <75>: 
expressionAtom := columnName 
Condition<561>, REDUCE Production by 'AND': 
pid <75>: 
expressionAtom := columnName 
Condition<561>, REDUCE Production by '$eof$': 
pid <75>: 
expressionAtom := columnName 
Condition<561>, REDUCE Production by 'OR': 
pid <75>: 
expressionAtom := columnName 
From Condition <559> get package:
predicate := expressionAtom (^)comparisonOperator expressionAtom , { AND, $eof$, OR, }
predicate := expressionAtom (^), { AND, $eof$, OR, }
expressionAtom := expressionAtom (^)mathOperator expressionAtom , { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, }
-------------------------------------------------------------------------------

After tracing, got package:
comparisonOperator := (^)'>' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
comparisonOperator := (^)'<=' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
comparisonOperator := (^)'!=' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
predicate := expressionAtom (^)comparisonOperator expressionAtom , { AND, $eof$, OR, }
comparisonOperator := (^)'==' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
comparisonOperator := (^)'<' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
comparisonOperator := (^)'>=' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'*' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
predicate := expressionAtom (^), { AND, $eof$, OR, }
mathOperator := (^)'-' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
expressionAtom := expressionAtom (^)mathOperator expressionAtom , { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, }
mathOperator := (^)'+' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'%' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'/' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <559> by expressionAtom to <562>.
From Condition <562> get package:
comparisonOperator := '>' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
comparisonOperator := '>' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <562> by '>' to <346>
This condition already existed.
From Condition <562> get package:
comparisonOperator := '<=' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
comparisonOperator := '<=' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <562> by '<=' to <344>
This condition already existed.
From Condition <562> get package:
comparisonOperator := '!=' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
comparisonOperator := '!=' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <562> by '!=' to <342>
This condition already existed.
From Condition <562> get package:
predicate := expressionAtom comparisonOperator (^)expressionAtom , { AND, $eof$, OR, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := (^)'ID' '.' 'ID' , { AND, $eof$, OR, *, /, %, +, -, }
constantNum := (^)'-' positiveNum , { AND, $eof$, OR, *, /, %, +, -, }
expressionAtom := (^)constantNum , { $eof$, AND, OR, *, /, %, +, -, }
expressionAtom := (^)columnName , { $eof$, AND, OR, *, /, %, +, -, }
predicate := expressionAtom comparisonOperator (^)expressionAtom , { AND, $eof$, OR, }
columnName := (^)'ID' , { AND, $eof$, OR, *, /, %, +, -, }
constantNum := (^)positiveNum , { AND, $eof$, OR, *, /, %, +, -, }
expressionAtom := (^)'STR_LITERAL' , { $eof$, AND, OR, *, /, %, +, -, }
expressionAtom := (^)expressionAtom mathOperator expressionAtom , { $eof$, AND, OR, *, /, %, +, -, }
positiveNum := (^)'NUMBER_CONSTANT' , { $eof$, AND, OR, *, /, %, +, -, }
===============================================================================

SHIFT <562> by comparisonOperator to <511>.
This condition already existed.
From Condition <562> get package:
comparisonOperator := '==' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
comparisonOperator := '==' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <562> by '==' to <347>
This condition already existed.
From Condition <562> get package:
comparisonOperator := '<' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
comparisonOperator := '<' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <562> by '<' to <345>
This condition already existed.
From Condition <562> get package:
comparisonOperator := '>=' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
comparisonOperator := '>=' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <562> by '>=' to <343>
This condition already existed.
From Condition <562> get package:
mathOperator := '*' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '*' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <562> by '*' to <33>
This condition already existed.
Condition<562>, REDUCE Production by 'AND': 
pid <72>: 
predicate := expressionAtom 
Condition<562>, REDUCE Production by '$eof$': 
pid <72>: 
predicate := expressionAtom 
Condition<562>, REDUCE Production by 'OR': 
pid <72>: 
predicate := expressionAtom 
From Condition <562> get package:
mathOperator := '-' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '-' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <562> by '-' to <34>
This condition already existed.
From Condition <562> get package:
expressionAtom := expressionAtom mathOperator (^)expressionAtom , { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := (^)'ID' , { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, }
constantNum := (^)positiveNum , { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, }
expressionAtom := (^)'STR_LITERAL' , { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, }
expressionAtom := expressionAtom mathOperator (^)expressionAtom , { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, }
expressionAtom := (^)expressionAtom mathOperator expressionAtom , { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, }
columnName := (^)'ID' '.' 'ID' , { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, }
constantNum := (^)'-' positiveNum , { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, }
expressionAtom := (^)constantNum , { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, }
expressionAtom := (^)columnName , { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, }
positiveNum := (^)'NUMBER_CONSTANT' , { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, }
===============================================================================

SHIFT <562> by mathOperator to <563>.
From Condition <563> get package:
columnName := 'ID' (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, }
columnName := 'ID' (^)'.' 'ID' , { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID' (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, }
columnName := 'ID' (^)'.' 'ID' , { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, }
===============================================================================

SHIFT <563> by 'ID' to <564>
Condition<564>, REDUCE Production by '==': 
pid <68>: 
columnName := 'ID' 
Condition<564>, REDUCE Production by '*': 
pid <68>: 
columnName := 'ID' 
Condition<564>, REDUCE Production by '>': 
pid <68>: 
columnName := 'ID' 
Condition<564>, REDUCE Production by '<': 
pid <68>: 
columnName := 'ID' 
Condition<564>, REDUCE Production by '/': 
pid <68>: 
columnName := 'ID' 
Condition<564>, REDUCE Production by '<=': 
pid <68>: 
columnName := 'ID' 
Condition<564>, REDUCE Production by '%': 
pid <68>: 
columnName := 'ID' 
Condition<564>, REDUCE Production by '>=': 
pid <68>: 
columnName := 'ID' 
Condition<564>, REDUCE Production by '!=': 
pid <68>: 
columnName := 'ID' 
Condition<564>, REDUCE Production by '+': 
pid <68>: 
columnName := 'ID' 
Condition<564>, REDUCE Production by '-': 
pid <68>: 
columnName := 'ID' 
Condition<564>, REDUCE Production by 'AND': 
pid <68>: 
columnName := 'ID' 
Condition<564>, REDUCE Production by '$eof$': 
pid <68>: 
columnName := 'ID' 
Condition<564>, REDUCE Production by 'OR': 
pid <68>: 
columnName := 'ID' 
From Condition <564> get package:
columnName := 'ID' '.' (^)'ID' , { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID' '.' (^)'ID' , { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, }
===============================================================================

SHIFT <564> by '.' to <565>
From Condition <565> get package:
columnName := 'ID' '.' 'ID' (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID' '.' 'ID' (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, }
===============================================================================

SHIFT <565> by 'ID' to <566>
Condition<566>, REDUCE Production by '==': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<566>, REDUCE Production by '*': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<566>, REDUCE Production by '>': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<566>, REDUCE Production by '<': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<566>, REDUCE Production by '/': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<566>, REDUCE Production by '<=': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<566>, REDUCE Production by '%': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<566>, REDUCE Production by '>=': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<566>, REDUCE Production by '!=': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<566>, REDUCE Production by '+': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<566>, REDUCE Production by '-': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<566>, REDUCE Production by 'AND': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<566>, REDUCE Production by '$eof$': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<566>, REDUCE Production by 'OR': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
From Condition <563> get package:
constantNum := positiveNum (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, }
-------------------------------------------------------------------------------

After tracing, got package:
constantNum := positiveNum (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, }
===============================================================================

SHIFT <563> by positiveNum to <567>.
Condition<567>, REDUCE Production by '==': 
pid <78>: 
constantNum := positiveNum 
Condition<567>, REDUCE Production by '*': 
pid <78>: 
constantNum := positiveNum 
Condition<567>, REDUCE Production by '>': 
pid <78>: 
constantNum := positiveNum 
Condition<567>, REDUCE Production by '<': 
pid <78>: 
constantNum := positiveNum 
Condition<567>, REDUCE Production by '/': 
pid <78>: 
constantNum := positiveNum 
Condition<567>, REDUCE Production by '<=': 
pid <78>: 
constantNum := positiveNum 
Condition<567>, REDUCE Production by '%': 
pid <78>: 
constantNum := positiveNum 
Condition<567>, REDUCE Production by '>=': 
pid <78>: 
constantNum := positiveNum 
Condition<567>, REDUCE Production by '!=': 
pid <78>: 
constantNum := positiveNum 
Condition<567>, REDUCE Production by '+': 
pid <78>: 
constantNum := positiveNum 
Condition<567>, REDUCE Production by '-': 
pid <78>: 
constantNum := positiveNum 
Condition<567>, REDUCE Production by 'AND': 
pid <78>: 
constantNum := positiveNum 
Condition<567>, REDUCE Production by '$eof$': 
pid <78>: 
constantNum := positiveNum 
Condition<567>, REDUCE Production by 'OR': 
pid <78>: 
constantNum := positiveNum 
From Condition <563> get package:
expressionAtom := 'STR_LITERAL' (^), { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := 'STR_LITERAL' (^), { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, }
===============================================================================

SHIFT <563> by 'STR_LITERAL' to <568>
Condition<568>, REDUCE Production by '==': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<568>, REDUCE Production by '>': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<568>, REDUCE Production by '*': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<568>, REDUCE Production by '<': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<568>, REDUCE Production by '<=': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<568>, REDUCE Production by '/': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<568>, REDUCE Production by '>=': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<568>, REDUCE Production by '%': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<568>, REDUCE Production by '!=': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<568>, REDUCE Production by '+': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<568>, REDUCE Production by '-': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<568>, REDUCE Production by 'AND': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<568>, REDUCE Production by '$eof$': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<568>, REDUCE Production by 'OR': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
From Condition <563> get package:
expressionAtom := expressionAtom (^)mathOperator expressionAtom , { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, }
expressionAtom := expressionAtom mathOperator expressionAtom (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := (^)'*' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'%' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'-' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
expressionAtom := expressionAtom (^)mathOperator expressionAtom , { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, }
expressionAtom := expressionAtom mathOperator expressionAtom (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, }
mathOperator := (^)'/' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'+' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <563> by expressionAtom to <569>.
From Condition <569> get package:
mathOperator := '*' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '*' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <569> by '*' to <33>
This condition already existed.
From Condition <569> get package:
mathOperator := '%' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '%' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <569> by '%' to <26>
This condition already existed.
From Condition <569> get package:
mathOperator := '-' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '-' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <569> by '-' to <34>
This condition already existed.
From Condition <569> get package:
expressionAtom := expressionAtom mathOperator (^)expressionAtom , { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := (^)'ID' , { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, }
constantNum := (^)positiveNum , { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, }
expressionAtom := (^)'STR_LITERAL' , { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, }
expressionAtom := expressionAtom mathOperator (^)expressionAtom , { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, }
expressionAtom := (^)expressionAtom mathOperator expressionAtom , { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, }
columnName := (^)'ID' '.' 'ID' , { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, }
constantNum := (^)'-' positiveNum , { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, }
expressionAtom := (^)constantNum , { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, }
expressionAtom := (^)columnName , { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, }
positiveNum := (^)'NUMBER_CONSTANT' , { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, }
===============================================================================

SHIFT <569> by mathOperator to <570>.
From Condition <570> get package:
columnName := 'ID' (^), { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, }
columnName := 'ID' (^)'.' 'ID' , { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID' (^), { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, }
columnName := 'ID' (^)'.' 'ID' , { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, }
===============================================================================

SHIFT <570> by 'ID' to <571>
Condition<571>, REDUCE Production by '==': 
pid <68>: 
columnName := 'ID' 
Condition<571>, REDUCE Production by '>': 
pid <68>: 
columnName := 'ID' 
Condition<571>, REDUCE Production by '*': 
pid <68>: 
columnName := 'ID' 
Condition<571>, REDUCE Production by '<': 
pid <68>: 
columnName := 'ID' 
Condition<571>, REDUCE Production by '<=': 
pid <68>: 
columnName := 'ID' 
Condition<571>, REDUCE Production by '/': 
pid <68>: 
columnName := 'ID' 
Condition<571>, REDUCE Production by '>=': 
pid <68>: 
columnName := 'ID' 
Condition<571>, REDUCE Production by '%': 
pid <68>: 
columnName := 'ID' 
Condition<571>, REDUCE Production by '!=': 
pid <68>: 
columnName := 'ID' 
Condition<571>, REDUCE Production by '+': 
pid <68>: 
columnName := 'ID' 
Condition<571>, REDUCE Production by '-': 
pid <68>: 
columnName := 'ID' 
Condition<571>, REDUCE Production by 'AND': 
pid <68>: 
columnName := 'ID' 
Condition<571>, REDUCE Production by '$eof$': 
pid <68>: 
columnName := 'ID' 
Condition<571>, REDUCE Production by 'OR': 
pid <68>: 
columnName := 'ID' 
From Condition <571> get package:
columnName := 'ID' '.' (^)'ID' , { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID' '.' (^)'ID' , { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, }
===============================================================================

SHIFT <571> by '.' to <572>
From Condition <572> get package:
columnName := 'ID' '.' 'ID' (^), { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID' '.' 'ID' (^), { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, }
===============================================================================

SHIFT <572> by 'ID' to <573>
Condition<573>, REDUCE Production by '==': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<573>, REDUCE Production by '>': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<573>, REDUCE Production by '*': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<573>, REDUCE Production by '<': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<573>, REDUCE Production by '<=': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<573>, REDUCE Production by '/': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<573>, REDUCE Production by '>=': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<573>, REDUCE Production by '%': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<573>, REDUCE Production by '!=': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<573>, REDUCE Production by '+': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<573>, REDUCE Production by '-': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<573>, REDUCE Production by 'AND': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<573>, REDUCE Production by '$eof$': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
Condition<573>, REDUCE Production by 'OR': 
pid <67>: 
columnName := 'ID' '.' 'ID' 
From Condition <570> get package:
constantNum := positiveNum (^), { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, }
-------------------------------------------------------------------------------

After tracing, got package:
constantNum := positiveNum (^), { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, }
===============================================================================

SHIFT <570> by positiveNum to <574>.
Condition<574>, REDUCE Production by '==': 
pid <78>: 
constantNum := positiveNum 
Condition<574>, REDUCE Production by '>': 
pid <78>: 
constantNum := positiveNum 
Condition<574>, REDUCE Production by '*': 
pid <78>: 
constantNum := positiveNum 
Condition<574>, REDUCE Production by '<': 
pid <78>: 
constantNum := positiveNum 
Condition<574>, REDUCE Production by '<=': 
pid <78>: 
constantNum := positiveNum 
Condition<574>, REDUCE Production by '/': 
pid <78>: 
constantNum := positiveNum 
Condition<574>, REDUCE Production by '>=': 
pid <78>: 
constantNum := positiveNum 
Condition<574>, REDUCE Production by '%': 
pid <78>: 
constantNum := positiveNum 
Condition<574>, REDUCE Production by '!=': 
pid <78>: 
constantNum := positiveNum 
Condition<574>, REDUCE Production by '+': 
pid <78>: 
constantNum := positiveNum 
Condition<574>, REDUCE Production by '-': 
pid <78>: 
constantNum := positiveNum 
Condition<574>, REDUCE Production by 'AND': 
pid <78>: 
constantNum := positiveNum 
Condition<574>, REDUCE Production by '$eof$': 
pid <78>: 
constantNum := positiveNum 
Condition<574>, REDUCE Production by 'OR': 
pid <78>: 
constantNum := positiveNum 
From Condition <570> get package:
expressionAtom := 'STR_LITERAL' (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := 'STR_LITERAL' (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, }
===============================================================================

SHIFT <570> by 'STR_LITERAL' to <575>
Condition<575>, REDUCE Production by '==': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<575>, REDUCE Production by '*': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<575>, REDUCE Production by '>': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<575>, REDUCE Production by '<': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<575>, REDUCE Production by '/': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<575>, REDUCE Production by '<=': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<575>, REDUCE Production by '%': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<575>, REDUCE Production by '>=': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<575>, REDUCE Production by '!=': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<575>, REDUCE Production by '+': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<575>, REDUCE Production by '-': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<575>, REDUCE Production by 'AND': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<575>, REDUCE Production by '$eof$': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
Condition<575>, REDUCE Production by 'OR': 
pid <74>: 
expressionAtom := 'STR_LITERAL' 
From Condition <570> get package:
expressionAtom := expressionAtom (^)mathOperator expressionAtom , { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, }
expressionAtom := expressionAtom mathOperator expressionAtom (^), { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := (^)'*' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'%' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'-' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
expressionAtom := expressionAtom (^)mathOperator expressionAtom , { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, }
expressionAtom := expressionAtom mathOperator expressionAtom (^), { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, }
mathOperator := (^)'/' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'+' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <570> by expressionAtom to <569>.
This condition already existed.
From Condition <570> get package:
constantNum := '-' (^)positiveNum , { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := (^)'NUMBER_CONSTANT' , { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, }
constantNum := '-' (^)positiveNum , { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, }
===============================================================================

SHIFT <570> by '-' to <576>
From Condition <576> get package:
positiveNum := 'NUMBER_CONSTANT' (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := 'NUMBER_CONSTANT' (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, }
===============================================================================

SHIFT <576> by 'NUMBER_CONSTANT' to <577>
Condition<577>, REDUCE Production by '==': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<577>, REDUCE Production by '*': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<577>, REDUCE Production by '>': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<577>, REDUCE Production by '<': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<577>, REDUCE Production by '/': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<577>, REDUCE Production by '<=': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<577>, REDUCE Production by '%': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<577>, REDUCE Production by '>=': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<577>, REDUCE Production by '!=': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<577>, REDUCE Production by '+': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<577>, REDUCE Production by '-': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<577>, REDUCE Production by 'AND': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<577>, REDUCE Production by '$eof$': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<577>, REDUCE Production by 'OR': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
From Condition <576> get package:
constantNum := '-' positiveNum (^), { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, }
-------------------------------------------------------------------------------

After tracing, got package:
constantNum := '-' positiveNum (^), { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, }
===============================================================================

SHIFT <576> by positiveNum to <578>.
Condition<578>, REDUCE Production by '==': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<578>, REDUCE Production by '>': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<578>, REDUCE Production by '*': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<578>, REDUCE Production by '<': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<578>, REDUCE Production by '<=': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<578>, REDUCE Production by '/': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<578>, REDUCE Production by '>=': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<578>, REDUCE Production by '%': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<578>, REDUCE Production by '!=': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<578>, REDUCE Production by '+': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<578>, REDUCE Production by '-': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<578>, REDUCE Production by 'AND': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<578>, REDUCE Production by '$eof$': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<578>, REDUCE Production by 'OR': 
pid <77>: 
constantNum := '-' positiveNum 
From Condition <570> get package:
expressionAtom := constantNum (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := constantNum (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, }
===============================================================================

SHIFT <570> by constantNum to <560>.
This condition already existed.
From Condition <570> get package:
expressionAtom := columnName (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := columnName (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, }
===============================================================================

SHIFT <570> by columnName to <561>.
This condition already existed.
From Condition <570> get package:
positiveNum := 'NUMBER_CONSTANT' (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := 'NUMBER_CONSTANT' (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, }
===============================================================================

SHIFT <570> by 'NUMBER_CONSTANT' to <577>
This condition already existed.
Condition<569>, REDUCE Production by '==': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Already existed SHIFT by symbol'*' :
<33>
Try to set it to: REDUCE to:
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Reset Action[569]['*'] to REDUCE:
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Condition<569>, REDUCE Production by '>': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Condition<569>, REDUCE Production by '<': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Condition<569>, REDUCE Production by '/': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Condition<569>, REDUCE Production by '<=': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Already existed SHIFT by symbol'%' :
<26>
Try to set it to: REDUCE to:
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Reset Action[569]['%'] to REDUCE:
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Condition<569>, REDUCE Production by '>=': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Condition<569>, REDUCE Production by '!=': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Condition<569>, REDUCE Production by '+': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Already existed SHIFT by symbol'-' :
<34>
Try to set it to: REDUCE to:
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Reset Action[569]['-'] to REDUCE:
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Condition<569>, REDUCE Production by 'AND': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Condition<569>, REDUCE Production by '$eof$': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Condition<569>, REDUCE Production by 'OR': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
From Condition <569> get package:
mathOperator := '/' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '/' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

Already existed REDUCE by symbol '/': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Try to set it to: SHIFT to <40>
Set SHIFT fail in: from condition <569> to condition <40>.
This condition already existed.
From Condition <569> get package:
mathOperator := '+' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '+' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

Already existed REDUCE by symbol '+': 
pid <76>: 
expressionAtom := expressionAtom mathOperator expressionAtom 
Try to set it to: SHIFT to <41>
Set SHIFT fail in: from condition <569> to condition <41>.
This condition already existed.
From Condition <563> get package:
constantNum := '-' (^)positiveNum , { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := (^)'NUMBER_CONSTANT' , { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, }
constantNum := '-' (^)positiveNum , { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, }
===============================================================================

SHIFT <563> by '-' to <579>
From Condition <579> get package:
positiveNum := 'NUMBER_CONSTANT' (^), { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := 'NUMBER_CONSTANT' (^), { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, }
===============================================================================

SHIFT <579> by 'NUMBER_CONSTANT' to <580>
Condition<580>, REDUCE Production by '==': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<580>, REDUCE Production by '>': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<580>, REDUCE Production by '*': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<580>, REDUCE Production by '<': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<580>, REDUCE Production by '<=': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<580>, REDUCE Production by '/': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<580>, REDUCE Production by '>=': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<580>, REDUCE Production by '%': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<580>, REDUCE Production by '!=': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<580>, REDUCE Production by '+': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<580>, REDUCE Production by '-': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<580>, REDUCE Production by 'AND': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<580>, REDUCE Production by '$eof$': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
Condition<580>, REDUCE Production by 'OR': 
pid <79>: 
positiveNum := 'NUMBER_CONSTANT' 
From Condition <579> get package:
constantNum := '-' positiveNum (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, }
-------------------------------------------------------------------------------

After tracing, got package:
constantNum := '-' positiveNum (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, }
===============================================================================

SHIFT <579> by positiveNum to <581>.
Condition<581>, REDUCE Production by '==': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<581>, REDUCE Production by '*': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<581>, REDUCE Production by '>': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<581>, REDUCE Production by '<': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<581>, REDUCE Production by '/': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<581>, REDUCE Production by '<=': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<581>, REDUCE Production by '%': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<581>, REDUCE Production by '>=': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<581>, REDUCE Production by '!=': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<581>, REDUCE Production by '+': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<581>, REDUCE Production by '-': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<581>, REDUCE Production by 'AND': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<581>, REDUCE Production by '$eof$': 
pid <77>: 
constantNum := '-' positiveNum 
Condition<581>, REDUCE Production by 'OR': 
pid <77>: 
constantNum := '-' positiveNum 
From Condition <563> get package:
expressionAtom := constantNum (^), { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := constantNum (^), { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, }
===============================================================================

SHIFT <563> by constantNum to <582>.
Condition<582>, REDUCE Production by '==': 
pid <73>: 
expressionAtom := constantNum 
Condition<582>, REDUCE Production by '>': 
pid <73>: 
expressionAtom := constantNum 
Condition<582>, REDUCE Production by '*': 
pid <73>: 
expressionAtom := constantNum 
Condition<582>, REDUCE Production by '<': 
pid <73>: 
expressionAtom := constantNum 
Condition<582>, REDUCE Production by '<=': 
pid <73>: 
expressionAtom := constantNum 
Condition<582>, REDUCE Production by '/': 
pid <73>: 
expressionAtom := constantNum 
Condition<582>, REDUCE Production by '>=': 
pid <73>: 
expressionAtom := constantNum 
Condition<582>, REDUCE Production by '%': 
pid <73>: 
expressionAtom := constantNum 
Condition<582>, REDUCE Production by '!=': 
pid <73>: 
expressionAtom := constantNum 
Condition<582>, REDUCE Production by '+': 
pid <73>: 
expressionAtom := constantNum 
Condition<582>, REDUCE Production by '-': 
pid <73>: 
expressionAtom := constantNum 
Condition<582>, REDUCE Production by 'AND': 
pid <73>: 
expressionAtom := constantNum 
Condition<582>, REDUCE Production by '$eof$': 
pid <73>: 
expressionAtom := constantNum 
Condition<582>, REDUCE Production by 'OR': 
pid <73>: 
expressionAtom := constantNum 
From Condition <563> get package:
expressionAtom := columnName (^), { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := columnName (^), { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, }
===============================================================================

SHIFT <563> by columnName to <583>.
Condition<583>, REDUCE Production by '==': 
pid <75>: 
expressionAtom := columnName 
Condition<583>, REDUCE Production by '>': 
pid <75>: 
expressionAtom := columnName 
Condition<583>, REDUCE Production by '*': 
pid <75>: 
expressionAtom := columnName 
Condition<583>, REDUCE Production by '<': 
pid <75>: 
expressionAtom := columnName 
Condition<583>, REDUCE Production by '<=': 
pid <75>: 
expressionAtom := columnName 
Condition<583>, REDUCE Production by '/': 
pid <75>: 
expressionAtom := columnName 
Condition<583>, REDUCE Production by '>=': 
pid <75>: 
expressionAtom := columnName 
Condition<583>, REDUCE Production by '%': 
pid <75>: 
expressionAtom := columnName 
Condition<583>, REDUCE Production by '!=': 
pid <75>: 
expressionAtom := columnName 
Condition<583>, REDUCE Production by '+': 
pid <75>: 
expressionAtom := columnName 
Condition<583>, REDUCE Production by '-': 
pid <75>: 
expressionAtom := columnName 
Condition<583>, REDUCE Production by 'AND': 
pid <75>: 
expressionAtom := columnName 
Condition<583>, REDUCE Production by '$eof$': 
pid <75>: 
expressionAtom := columnName 
Condition<583>, REDUCE Production by 'OR': 
pid <75>: 
expressionAtom := columnName 
From Condition <563> get package:
positiveNum := 'NUMBER_CONSTANT' (^), { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := 'NUMBER_CONSTANT' (^), { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, }
===============================================================================

SHIFT <563> by 'NUMBER_CONSTANT' to <580>
This condition already existed.
From Condition <562> get package:
mathOperator := '+' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '+' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <562> by '+' to <41>
This condition already existed.
From Condition <562> get package:
mathOperator := '%' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '%' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <562> by '%' to <26>
This condition already existed.
From Condition <562> get package:
mathOperator := '/' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '/' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <562> by '/' to <40>
This condition already existed.
From Condition <559> get package:
expression := expression (^)logicalOperator expression , { $eof$, AND, OR, }
expression := expression logicalOperator expression (^), { AND, $eof$, OR, }
-------------------------------------------------------------------------------

After tracing, got package:
logicalOperator := (^)'OR' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
expression := expression (^)logicalOperator expression , { $eof$, AND, OR, }
expression := expression logicalOperator expression (^), { AND, $eof$, OR, }
logicalOperator := (^)'AND' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <559> by expression to <584>.
From Condition <584> get package:
logicalOperator := 'OR' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
logicalOperator := 'OR' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <584> by 'OR' to <377>
This condition already existed.
From Condition <584> get package:
expression := expression logicalOperator (^)expression , { $eof$, AND, OR, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := (^)constantNum , { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, }
expressionAtom := (^)columnName , { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, }
predicate := (^)expressionAtom comparisonOperator expressionAtom , { $eof$, AND, OR, }
expression := expression logicalOperator (^)expression , { $eof$, AND, OR, }
expression := (^)expression logicalOperator expression , { AND, $eof$, OR, }
expressionAtom := (^)'STR_LITERAL' , { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, }
expressionAtom := (^)expressionAtom mathOperator expressionAtom , { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, }
predicate := (^)expressionAtom , { $eof$, AND, OR, }
expression := (^)predicate , { AND, $eof$, OR, }
constantNum := (^)positiveNum , { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, }
constantNum := (^)'-' positiveNum , { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, }
columnName := (^)'ID' , { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, }
columnName := (^)'ID' '.' 'ID' , { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, }
positiveNum := (^)'NUMBER_CONSTANT' , { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, }
===============================================================================

SHIFT <584> by logicalOperator to <585>.
From Condition <585> get package:
expressionAtom := constantNum (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := constantNum (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, }
===============================================================================

SHIFT <585> by constantNum to <508>.
This condition already existed.
From Condition <585> get package:
expressionAtom := columnName (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := columnName (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, }
===============================================================================

SHIFT <585> by columnName to <509>.
This condition already existed.
From Condition <585> get package:
predicate := expressionAtom (^)comparisonOperator expressionAtom , { $eof$, AND, OR, }
predicate := expressionAtom (^), { $eof$, AND, OR, }
expressionAtom := expressionAtom (^)mathOperator expressionAtom , { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, }
-------------------------------------------------------------------------------

After tracing, got package:
comparisonOperator := (^)'>' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
comparisonOperator := (^)'<=' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
comparisonOperator := (^)'!=' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
predicate := expressionAtom (^)comparisonOperator expressionAtom , { $eof$, AND, OR, }
comparisonOperator := (^)'==' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
comparisonOperator := (^)'<' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
comparisonOperator := (^)'>=' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'*' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
predicate := expressionAtom (^), { $eof$, AND, OR, }
mathOperator := (^)'-' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
expressionAtom := expressionAtom (^)mathOperator expressionAtom , { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, }
mathOperator := (^)'+' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'%' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'/' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <585> by expressionAtom to <586>.
From Condition <586> get package:
comparisonOperator := '>' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
comparisonOperator := '>' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <586> by '>' to <346>
This condition already existed.
From Condition <586> get package:
comparisonOperator := '<=' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
comparisonOperator := '<=' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <586> by '<=' to <344>
This condition already existed.
From Condition <586> get package:
comparisonOperator := '!=' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
comparisonOperator := '!=' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <586> by '!=' to <342>
This condition already existed.
From Condition <586> get package:
predicate := expressionAtom comparisonOperator (^)expressionAtom , { $eof$, AND, OR, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := (^)'ID' '.' 'ID' , { $eof$, AND, OR, *, /, %, +, -, }
constantNum := (^)'-' positiveNum , { $eof$, AND, OR, *, /, %, +, -, }
expressionAtom := (^)constantNum , { AND, $eof$, OR, *, /, %, +, -, }
expressionAtom := (^)columnName , { AND, $eof$, OR, *, /, %, +, -, }
predicate := expressionAtom comparisonOperator (^)expressionAtom , { $eof$, AND, OR, }
columnName := (^)'ID' , { $eof$, AND, OR, *, /, %, +, -, }
constantNum := (^)positiveNum , { $eof$, AND, OR, *, /, %, +, -, }
expressionAtom := (^)'STR_LITERAL' , { AND, $eof$, OR, *, /, %, +, -, }
expressionAtom := (^)expressionAtom mathOperator expressionAtom , { AND, $eof$, OR, *, /, %, +, -, }
positiveNum := (^)'NUMBER_CONSTANT' , { AND, $eof$, OR, *, /, %, +, -, }
===============================================================================

SHIFT <586> by comparisonOperator to <587>.
From Condition <587> get package:
columnName := 'ID' (^)'.' 'ID' , { $eof$, AND, OR, *, /, %, +, -, }
columnName := 'ID' (^), { $eof$, AND, OR, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID' (^)'.' 'ID' , { $eof$, AND, OR, *, /, %, +, -, }
columnName := 'ID' (^), { $eof$, AND, OR, *, /, %, +, -, }
===============================================================================

SHIFT <587> by 'ID' to <588>
From Condition <588> get package:
columnName := 'ID' '.' (^)'ID' , { $eof$, AND, OR, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID' '.' (^)'ID' , { $eof$, AND, OR, *, /, %, +, -, }
===============================================================================

SHIFT <588> by '.' to <523>
This condition already existed.
Condition<588>, REDUCE Production by '$eof$': 
pid <68>: 
columnName := 'ID' 
Condition<588>, REDUCE Production by 'AND': 
pid <68>: 
columnName := 'ID' 
Condition<588>, REDUCE Production by 'OR': 
pid <68>: 
columnName := 'ID' 
Condition<588>, REDUCE Production by '*': 
pid <68>: 
columnName := 'ID' 
Condition<588>, REDUCE Production by '/': 
pid <68>: 
columnName := 'ID' 
Condition<588>, REDUCE Production by '%': 
pid <68>: 
columnName := 'ID' 
Condition<588>, REDUCE Production by '+': 
pid <68>: 
columnName := 'ID' 
Condition<588>, REDUCE Production by '-': 
pid <68>: 
columnName := 'ID' 
From Condition <587> get package:
constantNum := '-' (^)positiveNum , { $eof$, AND, OR, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := (^)'NUMBER_CONSTANT' , { AND, $eof$, OR, *, /, %, +, -, }
constantNum := '-' (^)positiveNum , { $eof$, AND, OR, *, /, %, +, -, }
===============================================================================

SHIFT <587> by '-' to <532>
This condition already existed.
From Condition <587> get package:
expressionAtom := constantNum (^), { AND, $eof$, OR, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := constantNum (^), { AND, $eof$, OR, *, /, %, +, -, }
===============================================================================

SHIFT <587> by constantNum to <535>.
This condition already existed.
From Condition <587> get package:
expressionAtom := columnName (^), { AND, $eof$, OR, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := columnName (^), { AND, $eof$, OR, *, /, %, +, -, }
===============================================================================

SHIFT <587> by columnName to <536>.
This condition already existed.
From Condition <587> get package:
predicate := expressionAtom comparisonOperator expressionAtom (^), { $eof$, AND, OR, }
expressionAtom := expressionAtom (^)mathOperator expressionAtom , { AND, $eof$, OR, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := (^)'/' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'+' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
predicate := expressionAtom comparisonOperator expressionAtom (^), { $eof$, AND, OR, }
mathOperator := (^)'*' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'%' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'-' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
expressionAtom := expressionAtom (^)mathOperator expressionAtom , { AND, $eof$, OR, *, /, %, +, -, }
===============================================================================

SHIFT <587> by expressionAtom to <589>.
From Condition <589> get package:
mathOperator := '/' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '/' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <589> by '/' to <40>
This condition already existed.
From Condition <589> get package:
mathOperator := '+' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '+' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <589> by '+' to <41>
This condition already existed.
Condition<589>, REDUCE Production by '$eof$': 
pid <71>: 
predicate := expressionAtom comparisonOperator expressionAtom 
Condition<589>, REDUCE Production by 'AND': 
pid <71>: 
predicate := expressionAtom comparisonOperator expressionAtom 
Condition<589>, REDUCE Production by 'OR': 
pid <71>: 
predicate := expressionAtom comparisonOperator expressionAtom 
From Condition <589> get package:
mathOperator := '*' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '*' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <589> by '*' to <33>
This condition already existed.
From Condition <589> get package:
mathOperator := '%' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '%' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <589> by '%' to <26>
This condition already existed.
From Condition <589> get package:
mathOperator := '-' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '-' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <589> by '-' to <34>
This condition already existed.
From Condition <589> get package:
expressionAtom := expressionAtom mathOperator (^)expressionAtom , { AND, $eof$, OR, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := (^)'ID' , { AND, $eof$, OR, *, /, %, +, -, }
constantNum := (^)positiveNum , { AND, $eof$, OR, *, /, %, +, -, }
expressionAtom := (^)'STR_LITERAL' , { $eof$, AND, OR, *, /, %, +, -, }
expressionAtom := expressionAtom mathOperator (^)expressionAtom , { AND, $eof$, OR, *, /, %, +, -, }
expressionAtom := (^)expressionAtom mathOperator expressionAtom , { $eof$, AND, OR, *, /, %, +, -, }
columnName := (^)'ID' '.' 'ID' , { AND, $eof$, OR, *, /, %, +, -, }
constantNum := (^)'-' positiveNum , { AND, $eof$, OR, *, /, %, +, -, }
expressionAtom := (^)constantNum , { $eof$, AND, OR, *, /, %, +, -, }
expressionAtom := (^)columnName , { $eof$, AND, OR, *, /, %, +, -, }
positiveNum := (^)'NUMBER_CONSTANT' , { $eof$, AND, OR, *, /, %, +, -, }
===============================================================================

SHIFT <589> by mathOperator to <528>.
This condition already existed.
From Condition <587> get package:
constantNum := positiveNum (^), { $eof$, AND, OR, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
constantNum := positiveNum (^), { $eof$, AND, OR, *, /, %, +, -, }
===============================================================================

SHIFT <587> by positiveNum to <525>.
This condition already existed.
From Condition <587> get package:
expressionAtom := 'STR_LITERAL' (^), { AND, $eof$, OR, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := 'STR_LITERAL' (^), { AND, $eof$, OR, *, /, %, +, -, }
===============================================================================

SHIFT <587> by 'STR_LITERAL' to <526>
This condition already existed.
From Condition <587> get package:
positiveNum := 'NUMBER_CONSTANT' (^), { AND, $eof$, OR, *, /, %, +, -, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := 'NUMBER_CONSTANT' (^), { AND, $eof$, OR, *, /, %, +, -, }
===============================================================================

SHIFT <587> by 'NUMBER_CONSTANT' to <533>
This condition already existed.
From Condition <586> get package:
comparisonOperator := '==' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
comparisonOperator := '==' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <586> by '==' to <347>
This condition already existed.
From Condition <586> get package:
comparisonOperator := '<' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
comparisonOperator := '<' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <586> by '<' to <345>
This condition already existed.
From Condition <586> get package:
comparisonOperator := '>=' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
comparisonOperator := '>=' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <586> by '>=' to <343>
This condition already existed.
From Condition <586> get package:
mathOperator := '*' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '*' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <586> by '*' to <33>
This condition already existed.
Condition<586>, REDUCE Production by '$eof$': 
pid <72>: 
predicate := expressionAtom 
Condition<586>, REDUCE Production by 'AND': 
pid <72>: 
predicate := expressionAtom 
Condition<586>, REDUCE Production by 'OR': 
pid <72>: 
predicate := expressionAtom 
From Condition <586> get package:
mathOperator := '-' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '-' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <586> by '-' to <34>
This condition already existed.
From Condition <586> get package:
expressionAtom := expressionAtom mathOperator (^)expressionAtom , { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := (^)'ID' , { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, }
constantNum := (^)positiveNum , { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, }
expressionAtom := (^)'STR_LITERAL' , { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, }
expressionAtom := expressionAtom mathOperator (^)expressionAtom , { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, }
expressionAtom := (^)expressionAtom mathOperator expressionAtom , { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, }
columnName := (^)'ID' '.' 'ID' , { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, }
constantNum := (^)'-' positiveNum , { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, }
expressionAtom := (^)constantNum , { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, }
expressionAtom := (^)columnName , { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, }
positiveNum := (^)'NUMBER_CONSTANT' , { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, }
===============================================================================

SHIFT <586> by mathOperator to <537>.
This condition already existed.
From Condition <586> get package:
mathOperator := '+' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '+' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <586> by '+' to <41>
This condition already existed.
From Condition <586> get package:
mathOperator := '%' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '%' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <586> by '%' to <26>
This condition already existed.
From Condition <586> get package:
mathOperator := '/' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
mathOperator := '/' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <586> by '/' to <40>
This condition already existed.
From Condition <585> get package:
expression := expression (^)logicalOperator expression , { AND, $eof$, OR, }
expression := expression logicalOperator expression (^), { $eof$, AND, OR, }
-------------------------------------------------------------------------------

After tracing, got package:
logicalOperator := (^)'OR' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
expression := expression (^)logicalOperator expression , { AND, $eof$, OR, }
expression := expression logicalOperator expression (^), { $eof$, AND, OR, }
logicalOperator := (^)'AND' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <585> by expression to <590>.
From Condition <590> get package:
logicalOperator := 'OR' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
logicalOperator := 'OR' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <590> by 'OR' to <377>
This condition already existed.
From Condition <590> get package:
expression := expression logicalOperator (^)expression , { AND, $eof$, OR, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := (^)constantNum , { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, }
expressionAtom := (^)columnName , { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, }
predicate := (^)expressionAtom comparisonOperator expressionAtom , { AND, $eof$, OR, }
expression := expression logicalOperator (^)expression , { AND, $eof$, OR, }
expression := (^)expression logicalOperator expression , { $eof$, AND, OR, }
expressionAtom := (^)'STR_LITERAL' , { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, }
expressionAtom := (^)expressionAtom mathOperator expressionAtom , { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, }
predicate := (^)expressionAtom , { AND, $eof$, OR, }
expression := (^)predicate , { $eof$, AND, OR, }
constantNum := (^)positiveNum , { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, }
constantNum := (^)'-' positiveNum , { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, }
columnName := (^)'ID' , { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, }
columnName := (^)'ID' '.' 'ID' , { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, }
positiveNum := (^)'NUMBER_CONSTANT' , { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, }
===============================================================================

SHIFT <590> by logicalOperator to <559>.
This condition already existed.
Condition<590>, REDUCE Production by '$eof$': 
pid <69>: 
expression := expression logicalOperator expression 
Condition<590>, REDUCE Production by 'AND': 
pid <69>: 
expression := expression logicalOperator expression 
Already existed SHIFT by symbol'OR' :
<377>
Try to set it to: REDUCE to:
pid <69>: 
expression := expression logicalOperator expression 
Reset Action[590]['OR'] to REDUCE:
pid <69>: 
expression := expression logicalOperator expression 
From Condition <590> get package:
logicalOperator := 'AND' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
logicalOperator := 'AND' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

Already existed REDUCE by symbol 'AND': 
pid <69>: 
expression := expression logicalOperator expression 
Try to set it to: SHIFT to <376>
Set SHIFT fail in: from condition <590> to condition <376>.
This condition already existed.
From Condition <585> get package:
expressionAtom := 'STR_LITERAL' (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := 'STR_LITERAL' (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, }
===============================================================================

SHIFT <585> by 'STR_LITERAL' to <549>
This condition already existed.
From Condition <585> get package:
expression := predicate (^), { AND, $eof$, OR, }
-------------------------------------------------------------------------------

After tracing, got package:
expression := predicate (^), { AND, $eof$, OR, }
===============================================================================

SHIFT <585> by predicate to <591>.
Condition<591>, REDUCE Production by 'AND': 
pid <70>: 
expression := predicate 
Condition<591>, REDUCE Production by '$eof$': 
pid <70>: 
expression := predicate 
Condition<591>, REDUCE Production by 'OR': 
pid <70>: 
expression := predicate 
From Condition <585> get package:
constantNum := positiveNum (^), { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, }
-------------------------------------------------------------------------------

After tracing, got package:
constantNum := positiveNum (^), { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, }
===============================================================================

SHIFT <585> by positiveNum to <548>.
This condition already existed.
From Condition <585> get package:
constantNum := '-' (^)positiveNum , { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := (^)'NUMBER_CONSTANT' , { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, }
constantNum := '-' (^)positiveNum , { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, }
===============================================================================

SHIFT <585> by '-' to <550>
This condition already existed.
From Condition <585> get package:
columnName := 'ID' (^), { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, }
columnName := 'ID' (^)'.' 'ID' , { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID' (^), { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, }
columnName := 'ID' (^)'.' 'ID' , { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, }
===============================================================================

SHIFT <585> by 'ID' to <545>
This condition already existed.
From Condition <585> get package:
positiveNum := 'NUMBER_CONSTANT' (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := 'NUMBER_CONSTANT' (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, }
===============================================================================

SHIFT <585> by 'NUMBER_CONSTANT' to <551>
This condition already existed.
Condition<584>, REDUCE Production by 'AND': 
pid <69>: 
expression := expression logicalOperator expression 
Condition<584>, REDUCE Production by '$eof$': 
pid <69>: 
expression := expression logicalOperator expression 
Already existed SHIFT by symbol'OR' :
<377>
Try to set it to: REDUCE to:
pid <69>: 
expression := expression logicalOperator expression 
Reset Action[584]['OR'] to REDUCE:
pid <69>: 
expression := expression logicalOperator expression 
From Condition <584> get package:
logicalOperator := 'AND' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
logicalOperator := 'AND' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

Already existed REDUCE by symbol 'AND': 
pid <69>: 
expression := expression logicalOperator expression 
Try to set it to: SHIFT to <376>
Set SHIFT fail in: from condition <584> to condition <376>.
This condition already existed.
From Condition <559> get package:
expressionAtom := 'STR_LITERAL' (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := 'STR_LITERAL' (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, }
===============================================================================

SHIFT <559> by 'STR_LITERAL' to <575>
This condition already existed.
From Condition <559> get package:
expression := predicate (^), { $eof$, AND, OR, }
-------------------------------------------------------------------------------

After tracing, got package:
expression := predicate (^), { $eof$, AND, OR, }
===============================================================================

SHIFT <559> by predicate to <592>.
Condition<592>, REDUCE Production by '$eof$': 
pid <70>: 
expression := predicate 
Condition<592>, REDUCE Production by 'AND': 
pid <70>: 
expression := predicate 
Condition<592>, REDUCE Production by 'OR': 
pid <70>: 
expression := predicate 
From Condition <559> get package:
constantNum := positiveNum (^), { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, }
-------------------------------------------------------------------------------

After tracing, got package:
constantNum := positiveNum (^), { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, }
===============================================================================

SHIFT <559> by positiveNum to <574>.
This condition already existed.
From Condition <559> get package:
constantNum := '-' (^)positiveNum , { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := (^)'NUMBER_CONSTANT' , { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, }
constantNum := '-' (^)positiveNum , { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, }
===============================================================================

SHIFT <559> by '-' to <576>
This condition already existed.
From Condition <559> get package:
columnName := 'ID' (^), { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, }
columnName := 'ID' (^)'.' 'ID' , { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID' (^), { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, }
columnName := 'ID' (^)'.' 'ID' , { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, }
===============================================================================

SHIFT <559> by 'ID' to <571>
This condition already existed.
From Condition <559> get package:
positiveNum := 'NUMBER_CONSTANT' (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := 'NUMBER_CONSTANT' (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, }
===============================================================================

SHIFT <559> by 'NUMBER_CONSTANT' to <577>
This condition already existed.
From Condition <558> get package:
logicalOperator := 'AND' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
logicalOperator := 'AND' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <558> by 'AND' to <376>
This condition already existed.
From Condition <507> get package:
expressionAtom := 'STR_LITERAL' (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := 'STR_LITERAL' (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, }
===============================================================================

SHIFT <507> by 'STR_LITERAL' to <549>
This condition already existed.
From Condition <507> get package:
expression := predicate (^), { AND, $eof$, OR, }
-------------------------------------------------------------------------------

After tracing, got package:
expression := predicate (^), { AND, $eof$, OR, }
===============================================================================

SHIFT <507> by predicate to <591>.
This condition already existed.
From Condition <507> get package:
constantNum := positiveNum (^), { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, }
-------------------------------------------------------------------------------

After tracing, got package:
constantNum := positiveNum (^), { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, }
===============================================================================

SHIFT <507> by positiveNum to <548>.
This condition already existed.
From Condition <507> get package:
constantNum := '-' (^)positiveNum , { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := (^)'NUMBER_CONSTANT' , { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, }
constantNum := '-' (^)positiveNum , { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, }
===============================================================================

SHIFT <507> by '-' to <550>
This condition already existed.
From Condition <507> get package:
columnName := 'ID' (^), { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, }
columnName := 'ID' (^)'.' 'ID' , { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID' (^), { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, }
columnName := 'ID' (^)'.' 'ID' , { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, }
===============================================================================

SHIFT <507> by 'ID' to <545>
This condition already existed.
From Condition <507> get package:
positiveNum := 'NUMBER_CONSTANT' (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := 'NUMBER_CONSTANT' (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, }
===============================================================================

SHIFT <507> by 'NUMBER_CONSTANT' to <551>
This condition already existed.
From Condition <1> get package:
sqlStatement := dmlStatement (^), { $eof$, }
-------------------------------------------------------------------------------

After tracing, got package:
sqlStatement := dmlStatement (^), { $eof$, }
===============================================================================

From Condition <1> get package:
deleteStatement := SHIFT <1'DELETE'> by  dmlStatement to <593(^)>.'FROM'
 tableName , { $eof$, }
deleteStatement := 'DELETE' Condition<593(^)>, REDUCE Production by ''FROM'$eof$ ': 
tableName pid <2'WHERE'>: 
 sqlStatement expression:=  dmlStatement , { 
$eof$, }
-------------------------------------------------------------------------------

After tracing, got package:
deleteStatement := 'DELETE' (^)'FROM' tableName , { $eof$, }
deleteStatement := 'DELETE' (^)'FROM' tableName 'WHERE' expression , { $eof$, }
===============================================================================

SHIFT <1> by 'DELETE' to <594>
From Condition <594> get package:
deleteStatement := 'DELETE' 'FROM' (^)tableName , { $eof$, }
deleteStatement := 'DELETE' 'FROM' (^)tableName 'WHERE' expression , { $eof$, }
-------------------------------------------------------------------------------

After tracing, got package:
tableName := (^)'ID' , { $eof$, WHERE, }
deleteStatement := 'DELETE' 'FROM' (^)tableName , { $eof$, }
deleteStatement := 'DELETE' 'FROM' (^)tableName 'WHERE' expression , { $eof$, }
===============================================================================

SHIFT <594> by 'FROM' to <595>
From Condition <595> get package:
tableName := 'ID' (^), { $eof$, WHERE, }
-------------------------------------------------------------------------------

After tracing, got package:
tableName := 'ID' (^), { $eof$, WHERE, }
===============================================================================

SHIFT <595> by 'ID' to <596>
Condition<596>, REDUCE Production by '$eof$': 
pid <66>: 
tableName := 'ID' 
Condition<596>, REDUCE Production by 'WHERE': 
pid <66>: 
tableName := 'ID' 
From Condition <595> get package:
deleteStatement := 'DELETE' 'FROM' tableName (^), { $eof$, }
deleteStatement := 'DELETE' 'FROM' tableName (^)'WHERE' expression , { $eof$, }
-------------------------------------------------------------------------------

After tracing, got package:
deleteStatement := 'DELETE' 'FROM' tableName (^), { $eof$, }
deleteStatement := 'DELETE' 'FROM' tableName (^)'WHERE' expression , { $eof$, }
===============================================================================

SHIFT <595> by tableName to <597>.
Condition<597>, REDUCE Production by '$eof$': 
pid <32>: 
deleteStatement := 'DELETE' 'FROM' tableName 
From Condition <597> get package:
deleteStatement := 'DELETE' 'FROM' tableName 'WHERE' (^)expression , { $eof$, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := (^)constantNum , { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, }
expressionAtom := (^)columnName , { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, }
predicate := (^)expressionAtom comparisonOperator expressionAtom , { AND, $eof$, OR, }
expression := (^)expression logicalOperator expression , { AND, $eof$, OR, }
positiveNum := (^)'NUMBER_CONSTANT' , { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, }
deleteStatement := 'DELETE' 'FROM' tableName 'WHERE' (^)expression , { $eof$, }
expressionAtom := (^)'STR_LITERAL' , { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, }
expressionAtom := (^)expressionAtom mathOperator expressionAtom , { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, }
predicate := (^)expressionAtom , { AND, $eof$, OR, }
expression := (^)predicate , { AND, $eof$, OR, }
constantNum := (^)positiveNum , { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, }
constantNum := (^)'-' positiveNum , { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, }
columnName := (^)'ID' , { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, }
columnName := (^)'ID' '.' 'ID' , { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, }
===============================================================================

SHIFT <597> by 'WHERE' to <598>
From Condition <598> get package:
expressionAtom := constantNum (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := constantNum (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, }
===============================================================================

SHIFT <598> by constantNum to <508>.
This condition already existed.
From Condition <598> get package:
expressionAtom := columnName (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := columnName (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, }
===============================================================================

SHIFT <598> by columnName to <509>.
This condition already existed.
From Condition <598> get package:
predicate := expressionAtom (^)comparisonOperator expressionAtom , { AND, $eof$, OR, }
predicate := expressionAtom (^), { AND, $eof$, OR, }
expressionAtom := expressionAtom (^)mathOperator expressionAtom , { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, }
-------------------------------------------------------------------------------

After tracing, got package:
comparisonOperator := (^)'>' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
comparisonOperator := (^)'<=' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
comparisonOperator := (^)'!=' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
predicate := expressionAtom (^)comparisonOperator expressionAtom , { AND, $eof$, OR, }
comparisonOperator := (^)'==' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
comparisonOperator := (^)'<' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
comparisonOperator := (^)'>=' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'*' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
predicate := expressionAtom (^), { AND, $eof$, OR, }
mathOperator := (^)'-' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
expressionAtom := expressionAtom (^)mathOperator expressionAtom , { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, }
mathOperator := (^)'+' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'%' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
mathOperator := (^)'/' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <598> by expressionAtom to <510>.
This condition already existed.
From Condition <598> get package:
deleteStatement := 'DELETE' 'FROM' tableName 'WHERE' expression (^), { $eof$, }
expression := expression (^)logicalOperator expression , { AND, $eof$, OR, }
-------------------------------------------------------------------------------

After tracing, got package:
logicalOperator := (^)'OR' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
deleteStatement := 'DELETE' 'FROM' tableName 'WHERE' expression (^), { $eof$, }
expression := expression (^)logicalOperator expression , { AND, $eof$, OR, }
logicalOperator := (^)'AND' , { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <598> by expression to <599>.
From Condition <599> get package:
logicalOperator := 'OR' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
logicalOperator := 'OR' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <599> by 'OR' to <377>
This condition already existed.
Condition<599>, REDUCE Production by '$eof$': 
pid <31>: 
deleteStatement := 'DELETE' 'FROM' tableName 'WHERE' expression 
From Condition <599> get package:
expression := expression logicalOperator (^)expression , { AND, $eof$, OR, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := (^)constantNum , { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, }
expressionAtom := (^)columnName , { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, }
predicate := (^)expressionAtom comparisonOperator expressionAtom , { AND, $eof$, OR, }
expression := expression logicalOperator (^)expression , { AND, $eof$, OR, }
expression := (^)expression logicalOperator expression , { $eof$, AND, OR, }
expressionAtom := (^)'STR_LITERAL' , { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, }
expressionAtom := (^)expressionAtom mathOperator expressionAtom , { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, }
predicate := (^)expressionAtom , { AND, $eof$, OR, }
expression := (^)predicate , { $eof$, AND, OR, }
constantNum := (^)positiveNum , { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, }
constantNum := (^)'-' positiveNum , { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, }
columnName := (^)'ID' , { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, }
columnName := (^)'ID' '.' 'ID' , { ==, >, *, <, <=, /, >=, %, !=, +, -, AND, $eof$, OR, }
positiveNum := (^)'NUMBER_CONSTANT' , { ==, *, >, <, /, <=, %, >=, !=, +, -, AND, $eof$, OR, }
===============================================================================

SHIFT <599> by logicalOperator to <559>.
This condition already existed.
From Condition <599> get package:
logicalOperator := 'AND' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
-------------------------------------------------------------------------------

After tracing, got package:
logicalOperator := 'AND' (^), { STR_LITERAL, ID, -, NUMBER_CONSTANT, }
===============================================================================

SHIFT <599> by 'AND' to <376>
This condition already existed.
From Condition <598> get package:
positiveNum := 'NUMBER_CONSTANT' (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := 'NUMBER_CONSTANT' (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, }
===============================================================================

SHIFT <598> by 'NUMBER_CONSTANT' to <551>
This condition already existed.
From Condition <598> get package:
expressionAtom := 'STR_LITERAL' (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, }
-------------------------------------------------------------------------------

After tracing, got package:
expressionAtom := 'STR_LITERAL' (^), { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, }
===============================================================================

SHIFT <598> by 'STR_LITERAL' to <549>
This condition already existed.
From Condition <598> get package:
expression := predicate (^), { AND, $eof$, OR, }
-------------------------------------------------------------------------------

After tracing, got package:
expression := predicate (^), { AND, $eof$, OR, }
===============================================================================

SHIFT <598> by predicate to <591>.
This condition already existed.
From Condition <598> get package:
constantNum := positiveNum (^), { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, }
-------------------------------------------------------------------------------

After tracing, got package:
constantNum := positiveNum (^), { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, }
===============================================================================

SHIFT <598> by positiveNum to <548>.
This condition already existed.
From Condition <598> get package:
constantNum := '-' (^)positiveNum , { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, }
-------------------------------------------------------------------------------

After tracing, got package:
positiveNum := (^)'NUMBER_CONSTANT' , { ==, *, >, <, /, <=, %, >=, !=, +, -, $eof$, AND, OR, }
constantNum := '-' (^)positiveNum , { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, }
===============================================================================

SHIFT <598> by '-' to <550>
This condition already existed.
From Condition <598> get package:
columnName := 'ID' (^), { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, }
columnName := 'ID' (^)'.' 'ID' , { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, }
-------------------------------------------------------------------------------

After tracing, got package:
columnName := 'ID' (^), { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, }
columnName := 'ID' (^)'.' 'ID' , { ==, >, *, <, <=, /, >=, %, !=, +, -, $eof$, AND, OR, }
===============================================================================

SHIFT <598> by 'ID' to <545>
This condition already existed.
From Condition <1> get package:
$start$ := sqlStatement (^)'$eof$' , { }
-------------------------------------------------------------------------------

After tracing, got package:
$start$ := sqlStatement (^)'$eof$' , { }
===============================================================================

From Condition <1> get package:
dmlStatement := deleteStatement (^), { $eof$, }
-------------------------------------------------------------------------------

After tracing, got package:
SHIFT <dmlStatement1 > by := sqlStatement to <600deleteStatement>. 
(^), { $eof$, }
===============================================================================

From Condition <600> get package:
$start$ := sqlStatement '$eof$' (^), { }
SHIFT <-------------------------------------------------------------------------------1
> by deleteStatement
 to <601After tracing, got package:>.

$start$ := sqlStatement '$eof$' (^), { }
===============================================================================
Condition<601
>, REDUCE Production by '$eof$': 
pid <9>: 
dmlStatement := deleteStatement 
SHIFT <600> by '$eof$' to <602>
From Condition <1> get package:
ddlStatement := dropTable (^), { $eof$, }
-------------------------------------------------------------------------------

After tracing, got package:
ddlStatement := dropTable (^), { $eof$, }
===============================================================================

SHIFT <1> by dropTable to <603>.
Condition<603>, REDUCE Production by '$eof$': 
pid <5>: 
ddlStatement := dropTable 
From Condition <1> get package:
sqlStatement := ddlStatement (^), { $eof$, }
-------------------------------------------------------------------------------

After tracing, got package:
sqlStatement := ddlStatement (^), { $eof$, }
===============================================================================

From Condition <1> get package:
sqlStatement := 'EXIT' (^), { $eof$, }
-------------------------------------------------------------------------------

After tracing, got package:
SHIFT <sqlStatement1 > by := ddlStatement to <604'EXIT'>. 
(^), { $eof$, }
===============================================================================

Condition<604>, REDUCE Production by '$eof$': 
pid <1>: 
sqlStatement := ddlStatement 
SHIFT <1> by 'EXIT' to <605>
Condition<605>, REDUCE Production by '$eof$': 
pid <3>: 
sqlStatement := 'EXIT' 
From Condition <1> get package:
dmlStatement := insertStatement (^), { $eof$, }
-------------------------------------------------------------------------------

After tracing, got package:
dmlStatement := insertStatement (^), { $eof$, }
===============================================================================

From Condition <1> get package:
dmlStatement := selectStatement (^), { $eof$, }
-------------------------------------------------------------------------------

After tracing, got package:
dmlStatement := selectStatement (^)SHIFT <, { 1$eof$> by , insertStatement} to <606
>.===============================================================================


Condition<606>, REDUCE Production by '$eof$': 
pid <7>: 
dmlStatement := insertStatement 
SHIFT <1> by selectStatement to <607>.
Condition<607>, REDUCE Production by '$eof$': 
pid <6>: 
dmlStatement := selectStatement 
From Condition <1> get package:
dropTable := 'DROP' (^)'TABLE' tableName , { $eof$, }
-------------------------------------------------------------------------------

After tracing, got package:
dropTable := 'DROP' (^)'TABLE' tableName , { $eof$, }
===============================================================================

SHIFT <1> by 'DROP' to <608>
From Condition <608> get package:
dropTable := 'DROP' 'TABLE' (^)tableName , { $eof$, }
-------------------------------------------------------------------------------

After tracing, got package:
dropTable := 'DROP' 'TABLE' (^)tableName , { $eof$, }
tableName := (^)'ID' , { $eof$, }
===============================================================================

SHIFT <608> by 'TABLE' to <609>
From Condition <609> get package:
dropTable := 'DROP' 'TABLE' tableName (^), { $eof$, }
-------------------------------------------------------------------------------

After tracing, got package:
dropTable := 'DROP' 'TABLE' tableName (^), { $eof$, }
===============================================================================

SHIFT <609> by tableName to <610>.
Condition<610>, REDUCE Production by '$eof$': 
pid <11>: 
dropTable := 'DROP' 'TABLE' tableName 
From Condition <609> get package:
tableName := 'ID' (^), { $eof$, }
-------------------------------------------------------------------------------

After tracing, got package:
tableName := 'ID' (^), { $eof$, }
===============================================================================

SHIFT <609> by 'ID' to <611>
Condition<611>, REDUCE Production by '$eof$': 
pid <66>: 
tableName := 'ID' 
Done!Call close.